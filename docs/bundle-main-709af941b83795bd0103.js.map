{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/../src/vector.js","webpack://Demo/./src/loadScene.js","webpack://Demo/./src/loadTexture.js","webpack://Demo/./src/worker/Services.js","webpack://Demo/./src/worker/services-constants.js","webpack://Demo/./src/index.js","webpack://Demo/../src/index.js","webpack://Demo/./src/worker/_services.worker.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","sqrt","Math","this","Vector","x","y","targetLength","scale","loader","GLTFLoader","TextureLoader","storage","Map","webWorker","WPWorker","secret","onWorkerMessage","ev","ticket","message","entry","reject","resolve","type","onProgress","percent","console","log","round","error","JSON","stringify","processWorkerMessage","e","addEventListener","container","camera","scene","renderer","light","controls","water","sphere","waterNormals","onWindowResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","mainLoop","time","performance","now","position","sin","rotation","z","material","uniforms","render","update","requestAnimationFrame","Promise","all","url","load","loadScene","loadTexture","then","oceanNormals","wrapS","wrapT","RepeatWrapping","document","getElementById","WebGLRenderer","setPixelRatio","devicePixelRatio","appendChild","domElement","Scene","PerspectiveCamera","set","DirectionalLight","add","waterGeometry","PlaneBufferGeometry","Water","textureWidth","textureHeight","alpha","sunDirection","clone","normalize","sunColor","waterColor","distortionScale","fog","undefined","PI","sky","Sky","theta","phi","parameters","cubeCamera","CubeCamera","renderTarget","texture","generateMipmaps","minFilter","LinearMipmapLinearFilter","background","cos","copy","geometry","BoxBufferGeometry","count","attributes","colors","color","Color","setHex","random","g","b","setAttribute","Float32BufferAttribute","MeshStandardMaterial","vertexColors","roughness","flatShading","envMap","side","FrontSide","Mesh","OrbitControls","maxPolarAngle","target","minDistance","maxDistance","enableDamping","dampingFactor","init","SIXTH","DEFAULT_CONFIG","width","height","numberOfRings","removeEdges","animatedEasing","renderFirstPassEdges","debug","addQuads","weightFunction","dx","x1","dy","y1","edgeLength","maxIterations","animating","minTension","findOtherEdge","faces","x0","y0","index","out","edge","removeRandomEdges","config","stack","Int32Array","pos","scaled","tmp","getEdgeStack","stackPos","eraseEdgesOfFaceInStack","success","code","otherIndex","otherEdge","x2","y2","otherIsOutmostTri","relaxWeighted","graph","tension","edgeCount","centerX","centerY","sumWeight","k","other","weight","ctx","hw","hh","outmostEdge","node","drawEdge","limit","updateConfig","DIRECTIONS","Float64Array","off","numTris","v0","v1","v2","isOutmost","createHexagonTriangles","start","firstPassLen","numNodes","tris","quads","calculateNumNodes","nodes","qPos","insertNode","isEdge","addQuad","insertEdge","n0","n1","found","Error","connect","firstEdgeIsOutmost","secondEdgeIsOutmost","m0x","m0y","m1x","m1y","m2x","m2y","cx","cy","n2","n3","n4","n5","n6","x3","y3","m3x","m3y","n7","n8","subdivide","Worker"],"mappings":"qBACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,GAExB,IAAIC,EAAaC,OAAyB,iBAAIA,OAAyB,kBAAK,GACxEC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAM1B,OAFA1C,EAAgBJ,KAAK,CAAC,GAAG,IAElBM,I,+RCvJT,IAAM0C,EAAOC,KAAb,K,aAII,iB,4FACA,SACIC,KAAA,IACAA,KAAA,I,sDAUA,OAAO,IAAIC,EAAOD,KAAX,EAAkBA,KAAzB,K,0BAWAE,EAAEC,GAaF,MAXA,iBAAWD,GAEPF,KAAA,KACAA,KAAA,OAIAA,KAAA,GAAUE,EAAV,EACAF,KAAA,GAAUE,EAAV,GAGJ,O,+BAUKA,EAAEC,GAaP,MAXA,iBAAWD,GAEPF,KAAA,KACAA,KAAA,OAIAA,KAAA,GAAUE,EAAV,EACAF,KAAA,GAAUE,EAAV,GAGJ,O,4BASEZ,GAKF,OAHAU,KAAA,KACAA,KAAA,KAEA,O,+BASJ,IACYE,EADZ,OACeC,EADf,OAEI,OAAOL,EAAKI,IAAIC,EAAhB,K,6BAWJ,IADKC,EACL,uDADoB,EAEhB,OAAOJ,KAAKK,MAAMD,EAAeJ,KAAjC,Y,wCASJ,IACYE,EADZ,OACeC,EADf,OAOI,OAHAH,KAAA,IACAA,KAAA,KAEA,O,+CASJ,IACYE,EADZ,OACeC,EADf,OAOI,OAJAH,KAAA,GAHJ,EAKIA,KAAA,IAEA,O,0BAUAE,EAAEC,GAEF,iBAAWD,GAEPF,KAAA,IACAA,KAAA,MAIAA,KAAA,EAASE,EAAT,EACAF,KAAA,EAASE,EAAT,Q,gHCrJNI,G,KAAS,I,KAAIC,I,qBCDbD,EAAS,IAAIE,K,gBCKnB,IAEMC,EAAU,IAAIC,IAEdC,EAAYC,MAEZC,EAASjC,OAAO,mBAsEtB,IAAMkC,EAAkB,SAAAC,GAEpB,KAtEJ,SAA8B/E,GAC9B,IAGYgF,EAAoBhF,EAApBgF,OAAQC,EAAYjF,EAAZiF,QAEVC,EAAQT,EAAQ/B,IAAIsC,GAC1B,GAAKE,EAAL,CANJ,MAYgCA,EAAML,GAAjBM,GAZrB,EAYYC,QAZZ,EAYqBD,QAIjB,OAFeF,EAARI,MASH,ICpCyB,oBDqCzB,IAEWC,EAAcJ,EAAdI,WACHA,EAEAA,EAAWL,EAAQM,SAInBC,QAAQC,IAAI1B,KAAK2B,MAAwB,IAAlBT,EAAQM,SAAiB,KAEpD,MAuBJ,ICtEsB,iBDwEtB,QACIJ,EAAOF,SArDXO,QAAQG,MAAM,mBAAqBC,KAAKC,UAAUZ,IA+DlDa,CAAqBf,EAAG/E,MAE5B,MAAM+F,GAEFP,QAAQG,MAAM,kCAAmCI,KAIzDpB,EAAUqB,iBAAiB,UAAWlB,GAAiB,GAoDvD,IETImB,EACAC,EAAQC,EAAOC,EAAUC,EACzBC,EAAUC,EAAOC,EAoMjBC,E,u8BAjCJ,SAASC,IAELR,EAAOS,OAAShD,OAAOiD,WAAajD,OAAOkD,YAC3CX,EAAOY,yBAEPV,EAASW,QAASpD,OAAOiD,WAAYjD,OAAOkD,aAIhD,SAASG,IAST,IAEUC,IAA2B,KAApBC,YAAYC,MAEzBX,EAAOY,SAASjD,EAAuB,EAAnBJ,KAAKsD,IAAKJ,GAAa,EAC3CT,EAAOc,SAASpD,EAAW,GAAP+C,EACpBT,EAAOc,SAASC,EAAW,IAAPN,EAEpBV,EAAMiB,SAASC,SAAf,KAAkC3E,OAAS,EAAM,GAEjDsD,EAASsB,OAAQvB,EAAOD,GAfxBI,EAASqB,SACTC,sBAAuBZ,GAqB3Ba,QAAQC,IAAI,CJ7UG,SAASC,GACxB,IAD6BzC,EAC7B,uDAD0C,KAEtC,OAAO,IAAIuC,SAAS,SAACzC,EAASD,GAE1Bb,EAAO0D,KAEHD,EAEA3C,EAEAE,EAEAH,MIkUR8C,CAAU,oBH/UC,SAASF,GACxB,IAD6BzC,EAC7B,uDAD0C,KAEtC,OAAO,IAAIuC,SAAS,SAACzC,EAASD,GAE1Bb,EAAO0D,KAEHD,EAEA3C,EAEAE,EAEAH,MGoUR+C,CAAY,6BAEXC,MAAK,YAA0B,aAAlBC,GAAkB,WAU5BA,EAAaC,MAAQD,EAAaE,MAAQC,KAC1C9B,EAAe2B,EAlNvB,WAEInC,EAAYuC,SAASC,eAAgB,cAIrCrC,EAAW,IAAIsC,MACNC,cAAehF,OAAOiF,kBAC/BxC,EAASW,QAASpD,OAAOiD,WAAYjD,OAAOkD,aAC5CZ,EAAU4C,YAAazC,EAAS0C,YAIhC3C,EAAQ,IAAI4C,MAIZ7C,EAAS,IAAI8C,IAAmB,GAAIrF,OAAOiD,WAAajD,OAAOkD,YAAa,EAAG,MACxEO,SAAS6B,IAAK,GAAI,GAAI,KAI7B5C,EAAQ,IAAI6C,IAAkB,SAAU,IACxC/C,EAAMgD,IAAK9C,GAIX,IAAM+C,EAAgB,IAAIC,IAAoB,IAAO,MAErD9C,EAAQ,IAAI+C,IACRF,EACA,CACIG,aAAc,IACdC,cAAe,IACf/C,eACAgD,MAAO,GACPC,aAAcrD,EAAMe,SAASuC,QAAQC,YACrCC,SAAU,UACVC,WAAY,UACZC,gBAAiB,IACjBC,SAAmBC,IAAd9D,EAAM6D,OAIb1C,SAASpD,GAAMH,KAAKmG,GAAK,EAE/B/D,EAAMgD,IAAK5C,GAIX,IAAM4D,EAAM,IAAIC,IAEV3C,EAAW0C,EAAI3C,SAASC,SAE9BA,EAAQ,UAAgB3E,MAAQ,EAChC2E,EAAQ,SAAe3E,MAAQ,IAC/B2E,EAAQ,UAAgB3E,MAAQ,EAChC2E,EAAQ,eAAqB3E,MAAQ,IACrC2E,EAAQ,gBAAsB3E,MAAQ,GAEtC,IAcUuH,EACAC,EAfJC,EACQ,IADRA,EAEW,IAFXA,EAGO,IAGPC,EAAa,IAAIC,IAAW,GAAK,EAAG,KAC1CD,EAAWE,aAAaC,QAAQC,iBAAkB,EAClDJ,EAAWE,aAAaC,QAAQE,UAAYC,IAE5C3E,EAAM4E,WAAaP,EAAWE,aAIpBL,EAAQtG,KAAKmG,IAAMK,EAAyB,IAC5CD,EAAM,EAAIvG,KAAKmG,IAAMK,EAAqB,IAEhDlE,EAAMe,SAASlD,EAAIqG,EAAsBxG,KAAKiH,IAAKV,GACnDjE,EAAMe,SAASjD,EAAIoG,EAAsBxG,KAAKsD,IAAKiD,GAAQvG,KAAKsD,IAAKgD,GACrEhE,EAAMe,SAASG,EAAIgD,EAAsBxG,KAAKsD,IAAKiD,GAAQvG,KAAKiH,IAAKX,GAErEF,EAAI3C,SAASC,SAAb,YAAuC3E,MAAQuD,EAAMe,SAAS6D,KAAM5E,EAAMe,UAC1Eb,EAAMiB,SAASC,SAAf,aAA0C3E,MAAMmI,KAAM5E,EAAMe,UAAWwC,YAEvEY,EAAW7C,OAAQvB,EAAU+D,GAcjC,IANA,IAAMe,EAAW,IAAIC,IAAkB,GAAI,GAAI,IACzCC,EAAQF,EAASG,WAAWjE,SAASgE,MAErCE,EAAS,GACTC,EAAQ,IAAIC,IAETlL,EAAI,EAAGA,EAAI8K,EAAO9K,GAAK,EAE5BiL,EAAME,OAAwB,SAAhB1H,KAAK2H,UAEnBJ,EAAOxK,KAAMyK,EAAM5I,EAAG4I,EAAMI,EAAGJ,EAAMK,GACrCN,EAAOxK,KAAMyK,EAAM5I,EAAG4I,EAAMI,EAAGJ,EAAMK,GACrCN,EAAOxK,KAAMyK,EAAM5I,EAAG4I,EAAMI,EAAGJ,EAAMK,GAIzCV,EAASW,aAAc,QAAS,IAAIC,IAAwBR,EAAQ,IAEpE,IAAM9D,EAAW,IAAIuE,IAAqB,CACtCC,cAAc,EACdC,UAAW,EACXC,aAAa,EACbC,OAAQ3B,EAAWE,aAAaC,QAChCyB,KAAMC,MAGV7F,EAAS,IAAI8F,IAAMpB,EAAU1D,GAC7BrB,EAAMgD,IAAK3C,IAIXF,EAAW,IAAIiG,IAAerG,EAAQE,EAAS0C,aACtC0D,cAA0B,IAAVzI,KAAKmG,GAC9B5D,EAASmG,OAAOxD,IAAK,EAAG,EAAG,GAC3B3C,EAASoG,YAAc,GACvBpG,EAASqG,YAAc,IACvBrG,EAASsG,eAAgB,EACzBtG,EAASuG,cAAgB,IACzBvG,EAASqB,SA0BThE,OAAOqC,iBAAkB,SAAUU,GAAgB,GAmE/CoG,GACA9F,Q,oLChXR,eACA,W,qqEAEA,IA0BM+F,EAFN,EAAYhJ,QAEZ,EAQA,IAAMiJ,EAAiB,CAEnBC,MAFmB,EAInBC,OAJmB,EAMnBC,cANmB,EAQnBC,YARmB,GAWnBC,gBAXmB,EAcnBC,sBAdmB,EAiBnBC,OAjBmB,EAmBnBC,UAnBmB,EAqBnBC,eAAiB,kBACb,IAAMC,EAAKC,EAAX,EACMC,EAAKC,EAAX,EACA,OAAO9J,UAAU2J,IAAUE,EAA3B,IAMJE,WA9BmB,GAgCnBC,cAhCmB,IAkCnBC,WAlCmB,EAqCnBC,WAAY,GA6GhB,SAASC,EAAcC,EAAOC,EAAIC,EAAIV,EAAIE,EAAIS,EAAOC,GAEjD,IAAK,IAAIjO,EAAT,EAAgBA,EAAI6N,EAApB,OAAkC7N,GA5KtC,GA8KQ,GAAIA,IAAJ,GAYA,IAAM8K,EAAQ+C,EAAM7N,EA5L5B,GA6LQ,GACI6N,EAAM7N,EAtMlB,KAsMY6N,GAA0BA,EAAM7N,EArM5C,KAqMY6N,GACAA,EAAM7N,EArMlB,KAoMY6N,GAC0BA,EAAM7N,EApM5C,KAkMQ,EAOI,OAFAiO,eACAA,UAGJ,GACIJ,EAAM7N,EA7MlB,KA6MY6N,GAA0BA,EAAM7N,EA5M5C,KA4MY6N,GACAA,EAAM7N,EA5MlB,KA2MY6N,GAC0BA,EAAM7N,EA3M5C,KAyMQ,EAOI,OAFAiO,eACAA,UAIJ,OAAInD,GAEA,GACI+C,EAAM7N,EAvNtB,KAuNgB6N,GAA0BA,EAAM7N,EAtNhD,KAsNgB6N,GACAA,EAAM7N,EA5NtB,KA2NgB6N,GAC0BA,EAAM7N,EA3NhD,KAyNY,EAOI,OAFAiO,eACAA,cAKR,CACI,GACIJ,EAAM7N,EAnOtB,KAmOgB6N,GAA0BA,EAAM7N,EAlOhD,KAkOgB6N,GACAA,EAAM7N,EAlOtB,KAiOgB6N,GAC0BA,EAAM7N,EAjOhD,KA+NY,EAOI,OAFAiO,eACAA,UAIJ,GACIJ,EAAM7N,EA3OtB,KA2OgB6N,GAA0BA,EAAM7N,EA1OhD,KA0OgB6N,GACAA,EAAM7N,EAlPtB,KAiPgB6N,GAC0BA,EAAM7N,EAjPhD,KA+OY,EAOI,OAFAiO,eACAA,WAOZA,WAIJ,IAAMA,EAAM,CAACD,OAAD,EAAYE,KAAM,GAqC9B,SAASC,EAAkBC,EAAQP,GAE/B,IAAM/C,EAASsD,oBAA2BA,EAA3BA,YAAD,IADlB,EAKUC,EAxCV,SAAsBD,EAAQP,GAM1B,IAJA,IAAM3N,EAAN,EAAekO,WACTC,EAAQ,IAAIC,WAAlB,GAEIC,EAAJ,EACSvO,EAAT,EAAgBA,EAAIoO,EAApB,aAAyCpO,GAhQ7C,GAiQI,CAMI,KALoB6N,EAAM7N,EAnQlC,IAkQI,GAOI,CACI,IAAMwO,EAASxO,GAAf,EACAqO,EAAME,KAANF,EACAA,EAAME,KAASC,EAAfH,EACAA,EAAME,KAASC,EAAfH,GAKR,IAAK,IAAIrO,EAAT,EAAiBA,EAAIuO,EAArB,EAA8BvO,IAC9B,CACI,IAAMkB,EAAIlB,GAAMyD,kBAAD,EAAf,GACMgL,EAAMJ,EAAZ,GACAA,KAAWA,EAAXA,GACAA,OAEJ,OAAOA,UAAP,GAUcK,CAAaN,EAA3B,GAEIA,EAAJ,OAEIlJ,+BAAoCmJ,EAApCnJ,UAiCJ,IA9BA,IAAIyJ,EAAJ,EAGMC,EAA0B,SAAAZ,GAE5B,IAAK,IAAIhO,EAAT,EAAuBA,EAAIqO,EAA3B,OAAyCrO,IAEhCqO,OAAD,IAAJ,IAEIA,UAORQ,EA5BR,EA0Ca7O,EAAT,EAAgBA,EAAhB,EAA2BA,IAC3B,CACI,IAAI8O,OAAI,EACR,EACA,CACI,GAAIH,IAAaN,EAAjB,OAOI,YALID,EAAJ,OAEIA,SAAgBlJ,mFAAhBkJ,IAKRU,EAAOT,EAAMM,YAXjB,IAYSG,GAGT,IAAMd,EAAQc,GAAd,EACMZ,EAAN,EAAaY,EAQb,GADAlB,EAAcC,EALHA,EAAMG,EAAjB,EAAyBE,GACdL,EAAMG,IAAQE,EAAzB,GACWA,MAAaL,EAAMG,EAxWtC,GAwWsDH,EAAMG,EAApD,GAA6DE,EAAD,IACjDA,MAAaL,EAAMG,EAxWtC,GAwWsDH,EAAMG,KAASE,EAAD,GAA5D,GAEqCF,EAArCJ,GACIK,YAAJ,IAAsBJ,EAAMI,QApWpC,GAqWQ,KACkBc,EAA+Bd,EADjD,MACoCe,EAAaf,EADjD,KAEUgB,EAAKf,MAAaL,EAAMG,EA3W1C,GA2W0DH,EAAMG,EAApD,GAA6DE,EAAD,IACtDgB,EAAKhB,MAAaL,EAAMG,EA3W1C,GA2W0DH,EAAMG,KAASE,EAAD,GAHhE,GAOUiB,EADctB,EAAMkB,EAA1B,IANJ,EAiBI,OADAlB,EAAMkB,EAANlB,KACA,GAEI,OACIA,EAAMkB,EA3X1B,GA2XoBlB,EACAA,EAAMkB,EA3X1B,GA2XoBlB,EACA,MACJ,OACIA,EAAMkB,EA/X1B,GA+X+ClB,EAAMkB,EAjYrD,GAkYoBlB,EAAMkB,EA/X1B,GA+X+ClB,EAAMkB,EAjYrD,GAkYoBlB,EAAMkB,EAnY1B,GAmYoBlB,EACAA,EAAMkB,EAnY1B,GAmYoBlB,EACA,MACJ,OACIA,EAAMkB,EArY1B,GAqY+ClB,EAAMkB,EAvYrD,GAwYoBlB,EAAMkB,EArY1B,GAqY+ClB,EAAMkB,EAvYrD,GAwYoBlB,EAAMkB,EAzY1B,GAyY+ClB,EAAMkB,EA3YrD,GA4YoBlB,EAAMkB,EAzY1B,GAyY+ClB,EAAMkB,EA3YrD,GA4YoBlB,EAAMkB,EA7Y1B,GA6YoBlB,EACAA,EAAMkB,EA7Y1B,GA6YoBlB,EAEA,IAEIA,EAAMkB,EA3Y9B,GA2YwBlB,GAMZe,EA7CJ,GAgDIf,EAAMG,EArZlB,GAqZYH,EAEAgB,IAEJD,KAMJ,OAFAR,SAAgBlJ,8CAAhBkJ,GAEA,EAmPJ,SAASgB,EAAchB,EAAQiB,GAK3B,IAJJ,IADsC5B,EACtC,uDADsD,EAG3CvN,EAAUmP,EAFrB,OAIarP,EAAT,EAAgBA,EAAhB,EAAmCA,IACnC,CAEI,IADA,IAAIsP,EAAJ,EACSpO,EAAT,EAAgBA,EAAhB,EAA4BA,GA5oBpC,GA8oBY,IAAKmO,EAAMnO,EAtpBvB,GAupBY,CASI,IARA,IAAM4M,EAAKuB,EAAMnO,EA1pBjC,GA2pBsB6M,EAAKsB,EAAMnO,EA1pBjC,GA2pBsBqO,EAAYF,EAAMnO,EAzpBxC,GA2pBoBsO,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EAESC,EAAT,EAAgBA,EAAhB,EAA+BA,IAC/B,CACI,IAAMC,EAAQP,EAAMnO,IAApB,GAEMmM,EAAKgC,EAAX,GACM9B,EAAK8B,EAAMO,EAAjB,GAEMC,EAASzB,uBAAf,GAEAoB,GAAWnC,EAAXmC,EACAC,GAAWlC,EAAXkC,EACAC,KAGJ,IAAMrC,EAAKmC,EAAX,EACMjC,EAAKkC,EAAX,EAEMrC,EAAKC,EAAX,EACMC,EAAKC,EAAX,EAEA8B,EAAMnO,EAtrBtB,GAsrBgBmO,EACAA,EAAMnO,EAtrBtB,GAsrBgBmO,EAEAC,GAAWlC,IAAUE,EAArBgC,EAKR,GAAIA,EAAUlB,EAAd,WAGI,OADAA,SAAgBlJ,sCAAuCkJ,EAAvClJ,mBAAmEkJ,EAAnElJ,WAAhBkJ,eACA,EAEJA,eAQJ,OALKA,EAAL,gBAEIA,SAAgBlJ,YAAY,mCAAqCkJ,EAAjEA,gBAGJ,E,iBAQA,cACA,Y,4FAAA,qBAqCS,SAAA0B,GACT,IACY1B,EAAyB,EADrC,OACoBiB,EAAiB,EADrC,MAC2BxB,EAAU,EADrC,MAIIiC,SAEA,IAAMC,EAAK3B,QAAX,EACM4B,EAAK5B,SAAX,EAEA0B,iBATJ,IAWW5P,EAAUmP,EAXrB,OAgBI,GAHAS,mBACAA,iBAAuB1B,EAAvB0B,MAAqC1B,EAArC0B,QAEI1B,EAAJ,qBACA,CAII0B,qBACAA,cAIA,IADA,IACSvB,EAAT,EAAkBA,EAAMH,EAAxB,aAA6CG,GAtxBzD,GAuxBY,CACI,IAAMzD,EAAQ+C,EAAMU,EA1xBpC,GA4xBgB,GAAIzD,GAAJ,EACA,CAEIgF,cACAA,SAAWjC,EAAMU,EAxyBrC,GAwyBkDV,EAAMU,EAvyBxD,IAyyBoB,IAAK,IAAIvO,EAAT,EAAgBA,EAAhB,EAA2BA,IAEvB8P,SAAWjC,EAAMU,EAAjBuB,EAAuB9P,GAAK6N,EAAMU,IAAOvO,EAAzC8P,IAGJA,cACAA,WAEA,IAAMG,EAAcpC,EAAMU,EAzyB9C,GA0yBwB0B,GAAJ,IAEIH,qBACAA,cACAA,SAAWjC,EAAMU,EAAjBuB,EAAuBG,GAAmBpC,EAAMU,IAAM0B,EAAtDH,IAEIG,IAAgBnF,EAApB,EAEIgF,SAAWjC,EAAMU,EA3zB7C,GA2zB0DV,EAAMU,EA1zBhE,IA8zB4BuB,SAAWjC,EAAMU,EAAjBuB,GAAwBG,EAAD,IAA0BpC,EAAMU,KAAO0B,EAAD,GAA7DH,IAEJA,WACAA,wBAiBhB,kBAEI,IAAMzC,EAAKgC,EAAMa,EAz0B7B,GA00BkB3C,EAAK8B,EAAMa,EAz0B7B,GA20BYJ,cACAA,cACAA,cACAA,WAZJA,qBACAA,cAeA,IAAK,IAAI9P,EAAT,EAAgBA,EAAhB,EAA4BA,GAz0BpC,GA+0BY,IAJA,IAAM8N,EAAKuB,EAAMrP,EAr1B7B,GAs1BkB+N,EAAKsB,EAAMrP,EAr1B7B,GAs1BkBuP,EAAYF,EAAMrP,EAp1BpC,GAs1BqBkB,EAAT,EAAgBA,EAAhB,EAA+BA,IAE3BiP,EAASrC,EAAIC,EAAIsB,EAAMrP,EAv1BvC,EAu1BgBmQ,IAiDRL,YAEI1B,EAAJ,WAEQgB,EAAchB,EAAlB,KAEIA,iBA5LR,IAxpBcA,EA9CUgC,EAssBlBhC,EAAS,EAAH,QAAZ,IAxpBcA,EA6pBdiC,GA3pBJjC,SA9CO,IAFqBgC,EAgDahC,EAAzCA,eA9CO,IAAmBgC,EAA1B,GA+CAhC,eAnEJ,GAmE0BA,WACtBA,sBAA2BA,WAC3BA,aAAsB3K,SAAS2K,EAAT3K,MAAuB2K,EAAvB3K,SAAyC2K,kBAA3C,GAApBA,EACAA,YAAmBA,EAAnBA,eACAA,eAwpBI1K,KAAA,SAEA,IAAMmK,EAtpBd,SAAgCO,GAG5B,IAAMgC,EAAQhC,EAFlB,cAMUkC,EAAa,CACf,IAAI3M,EAAJ,QACIF,YAAc2K,EADlB,WAEI3K,YAAc2K,EAHH,YAKf,IAAIzK,EAAJ,QACIF,YAAkB2K,EADtB,WAEI3K,YAAkB2K,EAPP,YASf,IAAIzK,EAAJ,QACIF,WAASgJ,GAAa2B,EAD1B,WAEI3K,WAASgJ,GAAa2B,EAXX,YAaf,IAAIzK,EAAJ,QACIF,WAASgJ,GAAa2B,EAD1B,WAEI3K,WAASgJ,GAAa2B,EAfX,YAiBf,IAAIzK,EAAJ,QACIF,WAASgJ,GAAa2B,EAD1B,WAEI3K,WAASgJ,GAAa2B,EAnBX,YAqBf,IAAIzK,EAAJ,QACIF,WAASgJ,GAAa2B,EAD1B,WAEI3K,WAASgJ,GAAa2B,EAvB9B,aA2BMP,EAAQ,IAAI0C,aAAanC,EAA/B,cAEIoC,EAAJ,EAEI1F,EAAJ,EACI2F,EAAJ,EACA,EACA,CACI,IAAK,IAAIzQ,EAAT,EAAgBA,EAAhB,EAAuBA,IAQnB,IANA,IAAM0Q,EAAKJ,EAAX,GACMK,EAAKL,GAAYtQ,EAAD,GAAtB,GACM4Q,EAAKN,GAAYtQ,EAAD,GAAtB,GAEIuO,EAAMmC,eAAV,GAESxP,EAAT,EAAgBA,EAAhB,EAA6BA,IAEzB,KAAIA,EAEA2M,EAAM2C,EA3I1B,GA2IoB3C,EAAqBU,EAAD,EACpBV,EAAM2C,EA3I1B,GA2IoB3C,EAAqBU,EAAD,EACpBV,EAAM2C,EA3I1B,GA2IyCjC,IAAQoC,EAAT,EAApB9C,EACAA,EAAM2C,EA3I1B,GA2IyCjC,IAAQoC,EAAT,EAApB9C,EACAA,EAAM2C,EA3I1B,GA2IyCjC,IAAQqC,EAAT,EAApB/C,EACAA,EAAM2C,EA3I1B,GA2IyCjC,IAAQqC,EAAT,EAApB/C,EACAA,EAAM2C,EAzI1B,GAyIoB3C,EACAA,EAAM2C,EAzI1B,IAyIoB3C,EAEA2C,GA1IpB,GA4IoBjC,aAGJ,CAGI,IAAMsC,EAAY/F,IAAlB,EAEA+C,EAAM2C,EA9J1B,GA8JoB3C,EAAqBU,EAAD,EACpBV,EAAM2C,EA9J1B,GA8JoB3C,EAAqBU,EAAD,EACpBV,EAAM2C,EA9J1B,GA8JyCjC,IAAQmC,EAAT,EAApB7C,EACAA,EAAM2C,EA9J1B,GA8JyCjC,IAAQmC,EAAT,EAApB7C,EACAA,EAAM2C,EA9J1B,GA8JyCjC,IAAQoC,EAAT,EAApB9C,EACAA,EAAM2C,EA9J1B,GA8JyCjC,IAAQoC,EAAT,EAApB9C,EACAA,EAAM2C,EA5J1B,GA4JoB3C,EACAA,EAAM2C,EA5J1B,GA4JiDK,EAAY,GAAzChD,EAEA2C,GA7JpB,GAkKQC,WAEK3F,IAjDT,GAmDA,SA2jBkBgG,CAAd,GAEI1C,EAAJ,uBAEI1K,KAAA,MAAa0K,kCAA2CP,EAA3CO,QAAb,GAGJ,IAAM2C,EAAQ3C,UAAgB,IAA9B,WAEAD,EAAkB,EAAlBA,GAEAC,SAAgBlJ,gCAAiC,eAAjCA,EAAhBkJ,MAtBJ,QAzRJ,SAAmBA,EAAQP,GA0FvB,IAzFJ,IACYmD,EAA2B5C,EADvC,aAC0BlB,EAAakB,EADvC,SAGU6C,EAhCV,SAA2B7C,EAAQP,GAI/B,IAFA,IAAIqD,EAAJ,EACIC,EAAJ,EACSnR,EAAT,EAAgBA,EAAIoO,EAApB,aAAyCpO,GAra7C,GAsaI,CACI,IAAM8K,EAAQ+C,EAAM7N,EAza5B,GA2aQ,IAAI8K,EAEAoG,IAEC,IAAIpG,GAELqG,IAOR,OAAOA,IAAP,EAAmBD,EAWFE,CAAkBhD,EAAnC,GAEMiD,EAAQ,IAAId,aAvbtB,GAubmCU,GAGzBE,EAAQjE,GAAY,IAAIoB,WAZlC,EAY6C2C,GAErC1C,EAAJ,EACI+C,EAAJ,EAEMC,EAAa,SAACzD,EAAIC,EAAIyD,GAExB1D,KACAC,KAEA,IAAK,IAAI/N,EAAT,EAAgBA,EAAhB,EAAyBA,GApcjC,GAscY,GAAIyD,SAAS4N,KAAT5N,MAA+BA,SAAS4N,EAAMrR,EAANqR,GAAT5N,GAAnC,EAYI,OALI+N,IAAWH,EAAMrR,EAArB,KAEIqR,EAAMrR,EAANqR,MAGJ,EAIR,IAAMrD,EAAN,EASA,OAPAqD,EAAM9C,EAled,GAkeQ8C,EACAA,EAAM9C,EAled,GAkeQ8C,EACAA,EAAM9C,EAled,GAkegCiD,EAAS,EAAjCH,EACAA,EAAM9C,EAled,GAkeQ8C,EAEA9C,GA7dR,GA+dQ,GAGEkD,EAAUvE,GAAa,kBAEzBiE,EAAMG,KAANH,EACAA,EAAMG,KAANH,EACAA,EAAMG,KAANH,EACAA,EAAMG,KAANH,GAIEO,EAAa,SAACC,EAAIC,GAIpB,IAHA,IAAI9G,EAAQuG,EAAMM,EAAlB,GAEIE,GAAJ,EACS7R,EAAT,EAAgBA,EAAhB,EAA2BA,IAC3B,CAEI,GADcqR,EAAMM,IAApB,KACA,EACA,CACIE,KACA,OAGR,MACA,CACI,GAAI/G,GAAJ,GAEI,MAAM,IAAIgH,MAAV,6BAGJT,EAAMM,IAAS7G,KAAfuG,EACAA,EAAMM,EAANN,OAIFU,EAAU,SAACJ,EAAIC,GAEjBF,EAAWC,EAAXD,GACAA,EAAWE,EAAXF,IAIK1R,EAAT,EAAgBA,EAAhB,EAAkCA,GAvhBtC,GAwhBI,CACI,IAAM8K,EAAQ+C,EAAM7N,EA3hB5B,GA4hBQ,OAAI8K,EAAJ,CAKA,IAAMgD,EAAKD,EAAM7N,EAziBzB,GA0iBc+N,EAAKF,EAAM7N,EAziBzB,GA0iBcqN,EAAKQ,EAAM7N,EAziBzB,GA0iBcuN,EAAKM,EAAM7N,EAziBzB,GA0iBciP,EAAKpB,EAAM7N,EAziBzB,GA0iBckP,EAAKrB,EAAM7N,EAziBzB,GA2iBciQ,EAAcpC,EAAM7N,EAviBlC,GAyiBcgS,EAAN,IAA2B/B,EACrBgC,EAAN,IAA4BhC,EAE5B,OAAInF,EACJ,CACI,IAAMoH,GAAOpE,EAAD,GAAZ,EACMqE,GAAOpE,EAAD,GAAZ,EACMqE,GAAO/E,EAAD,GAAZ,EACMgF,GAAO9E,EAAD,GAAZ,EACM+E,GAAOrD,EAAD,GAAZ,EACMsD,GAAOrD,EAAD,GAAZ,EAEMsD,GAAM1E,IAAD,GAAX,EACM2E,GAAM1E,IAAD,GAAX,EAEM4D,EAAKJ,EAAWzD,EAAtB,GACM8D,EAAKL,EAAWW,EAAtB,GACMQ,EAAKnB,EAAWlE,EAAIE,EAA1B,GACMoF,EAAKpB,EAAWa,EAAKC,EAA3B,GACMO,EAAKrB,EAAWtC,EAAIC,EAA1B,GACM2D,EAAKtB,EAAWe,EAAtB,GACMQ,EAAKvB,EAAWiB,EAAtB,GAEAT,EAAQJ,EAARI,GACAA,EAAQH,EAARG,GACAA,EAAQe,EAARf,GACAA,EAAQc,EAARd,GAEAA,EAAQH,EAARG,GACAA,EAAQW,EAARX,GACAA,EAAQY,EAARZ,GACAA,EAAQe,EAARf,GAEAA,EAAQc,EAARd,GACAA,EAAQe,EAARf,GACAA,EAAQY,EAARZ,GACAA,EAAQa,EAARb,GAEA,IAEIN,EAAQE,EAAD,IAAPF,GACAA,EAAQG,EAAD,IAAPH,GACAA,EAAQoB,EAAD,IAAPpB,QAKR,CACI,IAAMsB,EAAKlF,EAAM7N,EA5lB7B,GA6lBkBgT,EAAKnF,EAAM7N,EA5lB7B,GA8lBkBkS,GAAOpE,EAAD,GAAZ,EACMqE,GAAOpE,EAAD,GAAZ,EACMqE,GAAO/E,EAAD,GAAZ,EACMgF,GAAO9E,EAAD,GAAZ,EACM+E,GAAOrD,EAAD,GAAZ,EACMsD,GAAOrD,EAAD,GAAZ,EACM+D,GAAOF,EAAD,GAAZ,EACMG,GAAOF,EAAD,GAAZ,EAEMR,GAAM1E,MAAD,GAAX,EACM2E,GAAM1E,MAAD,GAAX,EAEM4D,EAAKJ,EAAWzD,EAAtB,GACM8D,EAAKL,EAAW,EAAtB,GACMmB,EAAKnB,EAAWlE,EAAIE,EAA1B,GACMoF,GAAKpB,EAAW,EAAD,EAArB,GACMqB,GAAKrB,EAAWtC,EAAIC,EAAI8C,GAA9B,GACMa,GAAKtB,EAAW,EAAD,EAArB,GACMuB,GAAKvB,EAAWwB,EAAIC,EAA1B,GACMG,GAAK5B,EAAW0B,EAAtB,GACMG,GAAK7B,EAAW,EAAtB,GAEAQ,EAAQ,EAARA,GACAA,EAAQ,EAARA,GACAA,EAAQ,EAARA,IACAA,EAAQ,GAARA,IACAA,EAAQ,GAARA,IACAA,EAAQ,GAARA,IACAA,EAAQ,GAARA,IACAA,EAAQoB,GAARpB,GAEAA,EAAQqB,GAARrB,IACAA,EAAQqB,GAARrB,IACAA,EAAQqB,GAARrB,IACAA,EAAQqB,GAARrB,GAEA,IAEIN,EAAQ,EAAD,KAAPA,IACAA,EAAQ,EAAD,KAAPA,IACAA,EAAQ2B,GAAD,MAAP3B,IACAA,EAAQ0B,GAAD,MAAP1B,OAQZ,MAAO,CAACJ,UAAD,GAAsBF,GAASA,UAAtC,IAkG2BkC,CAAU,EAxBrC,MAwBWhE,EAxBX,KAwBkB8B,EAxBlB,KAyBIzN,KAAA,QAEK0K,EAAL,WAEIgB,EAAc,EAAD,EAAgBhB,EAA7BgB,eAGJ1L,KAAA,Q,wDAsKA,OA55BR,Q,+DCbAhC,EAAOD,QAAU,WACf,OAAO,IAAI6R,OAAO,IAA0B","file":"bundle-main-709af941b83795bd0103.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpDemo\"] = window[\"webpackJsonpDemo\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([19,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","const sqrt = Math.sqrt;\n\nclass Vector\n{\n    constructor(x,y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns a copy of this vector.\n     *\n     * @returns {Vector} copy\n     */\n    copy()\n    {\n        return new Vector(this.x,this.y);\n    }\n\n    /**\n     * Adds to this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n\n    add(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x += x;\n            this.y += y;\n        }\n        else\n        {\n            this.x += x.x;\n            this.y += x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Subtracts from this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    subtract(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x -= x;\n            this.y -= y;\n        }\n        else\n        {\n            this.x -= x.x;\n            this.y -= x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by a planar number.\n     *\n     * @param n     scale\n     * @returns {Vector} this vector, scaled\n     */\n    scale(n)\n    {\n        this.x *= n;\n        this.y *= n;\n\n        return this;\n    }\n\n    /**\n     * Length of this vector\n     *\n     * @returns {number}    length\n     */\n    length()\n    {\n        const { x, y } = this;\n        return sqrt(x*x+y*y);\n    }\n\n    /**\n     * Scales the vector to normal length or a specified length\n     *\n     * @param targetLength      {number?} target length of the vector (default is 1, the normal vector length)\n     *\n     * @returns {Vector}\n     */\n    norm(targetLength = 1)\n    {\n        return this.scale(targetLength / this.length());\n    }\n\n    /**\n     * Rotate vector 90 degrees clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateClockwise()\n    {\n        const { x, y } = this;\n\n        //noinspection JSSuspiciousNameCombination\n        this.x = y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate vector 90 degrees counter clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateCounterClockwise()\n    {\n        const { x, y } = this;\n\n        this.x = -y;\n        //noinspection JSSuspiciousNameCombination\n        this.y = x;\n\n        return this;\n    }\n\n    /**\n     * Sets the coordinates of this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    set(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x = x;\n            this.y = y;\n        }\n        else\n        {\n            this.x = x.x;\n            this.y = x.y;\n        }\n\n    }\n}\n\nexport default Vector;\n","\n// Instantiate a loader\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nconst loader = new GLTFLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","// Instantiate a loader\nimport { TextureLoader } from \"three\";\n\nconst loader = new TextureLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","import WPWorker from \"./_services.worker\";\n\nimport {\n    RESPONSE_ERROR,\n    RESPONSE_PROGRESS,\n} from \"./services-constants\";\n\n\nlet counter = 0;\n\nconst storage = new Map();\n\nconst webWorker = WPWorker();\n\nconst secret = Symbol(\"Services Secret\");\n\nfunction processWorkerMessage(data)\n{\n    //console.log(\"RESPONSE\", data);\n\n    const { ticket, message } = data;\n\n    const entry = storage.get(ticket);\n    if (!entry)\n    {\n        console.error(\"INVALID TICKET: \" + JSON.stringify(message));\n        return;\n    }\n\n    const { resolve, reject } = entry[secret];\n\n    const {type} = message;\n\n    switch (type)\n    {\n        // case RESPONSE_MAP:\n        //     resolve(\n        //         WorldMap.deserialize(message.payload)\n        //     );\n        //     break;\n        case RESPONSE_PROGRESS:\n        {\n\n            const {onProgress} = entry;\n            if (onProgress)\n            {\n                onProgress(message.percent);\n            }\n            else\n            {\n                console.log(Math.round(message.percent * 100) + \"%\");\n            }\n            break;\n        }\n        // case RESPONSE_SEGMENT:\n        // {\n        //     if (entry.onSegment(message.path) === false)\n        //     {\n        //         resolve({\n        //             path: false\n        //         });\n        //\n        //         webWorker.postMessage({\n        //             type: MESSAGE_CANCEL_PATH,\n        //             ticket: message.ticket\n        //         })\n        //     }\n        //     break;\n        // }\n        // case RESPONSE_PATH:\n        // {\n        //     resolve(\n        //         message\n        //     );\n        // }\n        case RESPONSE_ERROR:\n        // intentional fall-through\n        default:\n            reject(message);\n    }\n\n}\n\n\nconst onWorkerMessage = ev => {\n\n    try\n    {\n        processWorkerMessage(ev.data);\n    }\n    catch(e)\n    {\n        console.error(\"ERROR processing worker message\", e)\n    }\n};\n\nwebWorker.addEventListener(\"message\", onWorkerMessage, true);\n\n\n\n/**\n *\n * @param {Object} message      message object\n * @param {Object} [ctx]    context for handler\n * @return {Promise<any>}\n */\nfunction postWithReply(message, ctx)\n{\n    const ticket = ++counter;\n\n    return new Promise(((promiseResolve, promiseReject) => {\n\n        //console.log(\"POST-W-REPLY\", ticket, message);\n\n        webWorker.postMessage({\n            ticket,\n            message\n        });\n\n        // make sure to delete our stored ticket both when resolving and rejecting\n        const internal = {\n            resolve: result => {\n                storage.delete(ticket);\n                promiseResolve(result);\n\n            },\n            reject: err => {\n                storage.delete(ticket);\n                promiseReject(err);\n\n            }\n        };\n\n        if (ctx)\n        {\n            ctx[secret] = internal;\n        }\n        else\n        {\n            ctx = {\n                [secret] : internal,\n            };\n        }\n        storage.set(ticket, ctx);\n    }));\n}\n\n\nconst Services = {\n\n    // /**\n    //  * Generates the world map with the given seed. Returns a promise that resolves\n    //  * with the new map object\n    //  *\n    //  * @param {String|Number}   seed    seed value\n    //  * @param size\n    //  * @param {Function} [onProgress]   optional progress handler\n    //  * @return {Promise<any>}\n    //  */\n    // generateMap: (seed, size = 2048, onProgress) => {\n    //     return postWithReply({\n    //             type: QUERY_GENERATE,\n    //             seed,\n    //             size,\n    //             reportProgress: !!onProgress\n    //         }, {\n    //             onProgress\n    //         })\n    //         .catch(\n    //             e => {\n    //                 console.error(\"ERROR in generateMap\", e);\n    //                 return Promise.reject(e);\n    //             }\n    //         );\n    // },\n    //\n    // /**\n    //  * Plans a path starting at sx,sy and ending at ex,ey. The planning works on two levels. It uses a prepared\n    //  * navigation mesh to vastly cut down on computational complexity for very long paths connecting e.g. the next village.\n    //  *\n    //  * One the second level, a grid-based planning controls the path in between nodes of the navigation mesh. For short\n    //  * paths, only the second level might be needed.\n    //  *\n    //  * The promise returned resolves to the complete path\n    //  *\n    //  * @param {Number} worldId          world map id\n    //  * @param {Number} sx               starting point x-coordinate\n    //  * @param {Number} sy               starting point y-coordinate\n    //  * @param {Number} ex               end point x-coordinate\n    //  * @param {Number} ey               end point y-coordinate\n    //  * @param {Function} [onSegment]    optional callback to receive each second level sub path\n    //  * @return {Promise<any>}\n    //  */\n    // planPath: (worldId, sx, sy, ex, ey, onSegment) => {\n    //     return postWithReply({\n    //             type: QUERY_PATH,\n    //             worldId,\n    //             sx,\n    //             sy,\n    //             ex,\n    //             ey,\n    //             reportSegments: !!onSegment\n    //         }, {\n    //             onSegment\n    //         })\n    //         .catch(\n    //             e => {\n    //                 console.error(\"ERROR in planPath\", e)\n    //                 return Promise.reject(e);\n    //             }\n    //         );\n    // },\n\n    close: () => {\n        webWorker.removeEventListener(\"message\", onWorkerMessage, true);\n        webWorker.close();\n\n    }\n};\n\nexport default Services;\n\n","// export const MESSAGE_CANCEL_PATH = \"MESSAGE_CANCEL_PATH\";\n// export const QUERY_GENERATE = \"QUERY_GENERATE\";\n// export const QUERY_PATH = \"QUERY_PATH\";\n\nexport const RESPONSE_PROGRESS = \"RESPONSE_PROGRESS\";\nexport const RESPONSE_ERROR = \"RESPONSE_ERROR\";\n","import React, { useMemo, useRef } from \"react\"\nimport ReactDOM from \"react-dom\"\n// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport {\n    Color,\n    CubeCamera,\n    DirectionalLight,\n    FrontSide,\n    Float32BufferAttribute,\n    IcosahedronBufferGeometry,\n    LinearMipmapLinearFilter,\n    Mesh,\n    MeshStandardMaterial,\n    PerspectiveCamera,\n    PlaneBufferGeometry,\n    RepeatWrapping,\n    Scene,\n    TextureLoader,\n    WebGLRenderer,\n    BoxBufferGeometry\n} from \"three\";\nimport OrganicQuads from \"@fforw/organic-quads\";\nimport loadScene from \"./loadScene\";\nimport { Water } from \"three/examples/jsm/objects/Water.js\";\nimport { Sky } from \"three/examples/jsm/objects/Sky.js\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport loadTexture from \"./loadTexture\";\nimport Services from \"./worker/Services\";\n\n\nfunction Islands()\n{\n\n    const island = useMemo(() => {\n\n        const organicQuads = new OrganicQuads({\n            numberOfRings: 4,\n            width: 100,\n            height: 100,\n            addQuads: true\n        });\n\n        const {quads, graph} = organicQuads;\n\n        const {length} = quads;\n\n        const height = new Float32Array(length / 4);\n\n        const boxes = [];\n        for (let i = 0; i < height.length; i++)\n        {\n\n            const n0 = quads[i * 4];\n            const n1 = quads[i * 4 + 1];\n            const n2 = quads[i * 4 + 2];\n            const n3 = quads[i * 4 + 3];\n\n            const onEdge = (graph[n0 + 2] || graph[n1 + 2] || graph[n2 + 2] || graph[n3 + 2])\n\n            const cx = (graph[n0] + graph[n1] + graph[n2] + graph[n3]) / 4;\n            const cy = (graph[n0 + 1] + graph[n1 + 1] + graph[n2 + 1] + graph[n3 + 1]) / 4;\n\n            const rnd = Math.random();\n            const h = onEdge ? 0.5 : rnd < 0.7 ? 2 : rnd < 0.98 ? 10 + Math.random() : 15;\n            height[i] = h;\n\n            const shape = new Shape();\n\n            shape.moveTo(graph[n0], graph[n0 + 1]);\n            shape.lineTo(graph[n1], graph[n1 + 1]);\n            shape.lineTo(graph[n2], graph[n2 + 1]);\n            shape.lineTo(graph[n3], graph[n3 + 1]);\n            shape.lineTo(graph[n0], graph[n0 + 1]);\n\n            const box = (\n                <mesh\n                    key={i}\n                    rotateOnWorldAxis={true}\n                    castShadow\n                    receiveShadow\n                >\n                    <ExtrudeBufferGeometry\n                        attach=\"geometry\"\n                        args={[\n                            shape,\n                            {\n                                steps: 2,\n                                depth: h,\n                                bevelEnabled: true,\n                                bevelThickness: 0.5,\n                                bevelSize: 0.5,\n                                bevelOffset: 0,\n                                bevelSegments: 2\n                            }\n                        ]}\n\n                    />\n                    <MeshStandardMaterial attach=\"material\" roughness={0.9} color=\"#ffe6ee\"/>\n                </mesh>\n            );\n\n            //console.log(\"BOX\", h, box);\n\n            boxes.push(\n                box\n            )\n        }\n\n        console.log(\"INIT\", {quads, height})\n\n        return {\n            organicQuads,\n            height,\n            boxes\n        }\n    }, [])\n\n    const ref = useRef();\n    //useFrame(() => (ref.current.rotation.z += 0.01));\n\n    return (\n        <mesh\n            ref={ref}\n            castShadow\n            receiveShadow\n        >\n            {\n                island.boxes\n            }\n            <planeBufferGeometry attach=\"geometry\" args={[1000, 1000, 10, 100, 100, 10]}/>\n            <MeshStandardMaterial attach=\"material\" roughness={0.33} color=\"#6687e8\" normalMap={ oceanNormals }/>\n        </mesh>\n\n    )\n}\n\n\nlet container, stats;\nlet camera, scene, renderer, light;\nlet controls, water, sphere;\n\n\nfunction init() {\n\n    container = document.getElementById( \"container\" );\n\n    //\n\n    renderer = new WebGLRenderer();\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    container.appendChild( renderer.domElement );\n\n    //\n\n    scene = new Scene();\n\n    //\n\n    camera = new PerspectiveCamera( 55, window.innerWidth / window.innerHeight, 1, 20000 );\n    camera.position.set( 30, 30, 100 );\n\n    //\n\n    light = new DirectionalLight( 0xffffff, 0.8 );\n    scene.add( light );\n\n    // Water\n\n    const waterGeometry = new PlaneBufferGeometry(10000, 10000);\n\n    water = new Water(\n        waterGeometry,\n        {\n            textureWidth: 512,\n            textureHeight: 512,\n            waterNormals,\n            alpha: 0.9,\n            sunDirection: light.position.clone().normalize(),\n            sunColor: \"#fff8d5\",\n            waterColor: \"#000e1e\",\n            distortionScale: 3.7,\n            fog: scene.fog !== undefined\n        }\n    );\n\n    water.rotation.x = - Math.PI / 2;\n\n    scene.add( water );\n\n    // Skybox\n\n    const sky = new Sky();\n\n    const uniforms = sky.material.uniforms;\n\n    uniforms[ \"turbidity\" ].value = 5;\n    uniforms[ \"rayleigh\" ].value = 1.5;\n    uniforms[ \"luminance\" ].value = 1;\n    uniforms[ \"mieCoefficient\" ].value = 0.05;\n    uniforms[ \"mieDirectionalG\" ].value = 0.8;\n\n    const parameters = {\n        distance: 1000,\n        inclination: 0.05,\n        azimuth: 0.25\n    };\n\n    const cubeCamera = new CubeCamera(0.1, 1, 512);\n    cubeCamera.renderTarget.texture.generateMipmaps = true;\n    cubeCamera.renderTarget.texture.minFilter = LinearMipmapLinearFilter;\n\n    scene.background = cubeCamera.renderTarget;\n\n    function updateSun() {\n\n        const theta = Math.PI * (parameters.inclination - 0.5);\n        const phi = 2 * Math.PI * (parameters.azimuth - 0.5);\n\n        light.position.x = parameters.distance * Math.cos( phi );\n        light.position.y = parameters.distance * Math.sin( phi ) * Math.sin( theta );\n        light.position.z = parameters.distance * Math.sin( phi ) * Math.cos( theta );\n\n        sky.material.uniforms[ \"sunPosition\" ].value = light.position.copy( light.position );\n        water.material.uniforms[ \"sunDirection\" ].value.copy( light.position ).normalize();\n\n        cubeCamera.update( renderer, sky );\n\n    }\n\n    updateSun();\n\n    //\n\n    const geometry = new BoxBufferGeometry(20, 20, 20);\n    const count = geometry.attributes.position.count;\n\n    const colors = [];\n    const color = new Color();\n\n    for (let i = 0; i < count; i += 3 ) {\n\n        color.setHex( Math.random() * 0xffffff );\n\n        colors.push( color.r, color.g, color.b );\n        colors.push( color.r, color.g, color.b );\n        colors.push( color.r, color.g, color.b );\n\n    }\n\n    geometry.setAttribute( \"color\", new Float32BufferAttribute( colors, 3 ) );\n\n    const material = new MeshStandardMaterial({\n        vertexColors: true,\n        roughness: 0.0,\n        flatShading: true,\n        envMap: cubeCamera.renderTarget.texture,\n        side: FrontSide\n    });\n\n    sphere = new Mesh( geometry, material );\n    scene.add( sphere );\n\n    //\n\n    controls = new OrbitControls( camera, renderer.domElement );\n    controls.maxPolarAngle = Math.PI * 0.45;\n    controls.target.set( 0, 0, 0 );\n    controls.minDistance = 40.0;\n    controls.maxDistance = 300.0;\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.02;\n    controls.update();\n\n    //\n\n    // stats = new Stats();\n    // container.appendChild( stats.dom );\n\n    // GUI\n\n    //var gui = new GUI();\n\n    // var folder = gui.addFolder( \"Sky\" );\n    // folder.add( parameters, \"inclination\", 0, 0.5, 0.0001 ).onChange( updateSun );\n    // folder.add( parameters, \"azimuth\", 0, 1, 0.0001 ).onChange( updateSun );\n    // folder.open();\n    //\n    // var uniforms = water.material.uniforms;\n    //\n    // var folder = gui.addFolder( \"Water\" );\n    // folder.add( uniforms.distortionScale, \"value\", 0, 8, 0.1 ).name( \"distortionScale\" );\n    // folder.add( uniforms.size, \"value\", 0.1, 10, 0.1 ).name( \"size\" );\n    // folder.add( uniforms.alpha, \"value\", 0.9, 1, .001 ).name( \"alpha\" );\n    // folder.open();\n\n    //\n\n    window.addEventListener( \"resize\", onWindowResize, false );\n\n}\n\nfunction onWindowResize() {\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n}\n\nfunction mainLoop() {\n\n    render();\n    //stats.update();\n    controls.update()\n    requestAnimationFrame( mainLoop );\n\n}\n\nfunction render() {\n\n    const time = performance.now() * 0.001;\n\n    sphere.position.y = Math.sin( time ) * 5 + 1;\n    sphere.rotation.x = time * 0.5;\n    sphere.rotation.z = time * 0.51;\n\n    water.material.uniforms[ \"time\" ].value += 1.0 / 60.0;\n\n    renderer.render( scene, camera );\n\n}\n\n\nlet waterNormals;\n\nPromise.all([\n    loadScene(\"assets/tiles.glb\"),\n    loadTexture(\"assets/waternormals.jpg\")\n])\n    .then(([gltf, oceanNormals]) => {\n\n        //scene.add( gltf.scene );\n\n        // console.log(\"Scene Objects\", gltf.scene.children.map(kid => kid.name).join(\", \"))\n        //\n        // const obj  = gltf.scene.children.find(\n        //     kid => kid.name === \"tree_default\"\n        // );\n\n        oceanNormals.wrapS = oceanNormals.wrapT = RepeatWrapping;\n        waterNormals = oceanNormals;\n\n        // gltf.animations; // Array<AnimationClip>\n        // gltf.scene; // Group\n        // gltf.scenes; // Array<Group>\n        // gltf.cameras; // Array<Camera>\n        // gltf.asset; // Object\n\n        // ReactDOM.render(\n        //     <Game/>,\n        //     document.getElementById(\"root\")\n        // )\n\n        init();\n        mainLoop();\n    })\n","import now from \"performance-now\"\nimport Vector from \"./vector\";\n\nconst f_x0 = 0;\nconst f_y0 = 1;\nconst f_x1 = 2;\nconst f_y1 = 3;\nconst f_x2 = 4;\nconst f_y2 = 5;\nconst f_x3 = 6;\nconst f_y3 = 7;\nconst f_count = 8;\nconst f_outmostEdge = 9;\nconst f_size = 10;\n\nconst g_x = 0;\nconst g_y = 1;\nconst g_isEdge = 2;\nconst g_count = 3;\nconst g_edge0 = 4;\nconst g_edge1 = 5;\nconst g_edge2 = 6;\nconst g_edge3 = 7;\nconst g_edge4 = 8;\nconst g_edge5 = 9;\nconst g_size = 10;\n\nconst TAU = Math.PI * 2;\n\nconst SIXTH = TAU / 6;\n\nfunction calculateNumberOfFaces(limit)\n{\n    return 6 * (limit + 1) * (limit + 1);\n}\n\n\nconst DEFAULT_CONFIG = {\n    /** coordinate width */\n    width: 0,\n    /** coordinate height */\n    height: 0,\n    /** number of rings in the hexagon / number of base intersections of hexaxgon */\n    numberOfRings: 5,\n    /** how many percent of the edges shall we attempt to remove? */\n    removeEdges: 50,\n\n    /** if true, the graph will be layouted a bit with every render. If false, the graph relaxation happens at creation */\n    animatedEasing: true,\n\n    /** Set to true to render the original triangles, set to \"merged\" to render the merged triangles before subdivision */\n    renderFirstPassEdges: false,\n\n     /** Set to true to enable some debug logging */\n    debug : false,\n\n    addQuads: false,\n\n    weightFunction : (x0,y0,x1,y1) => {\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n        return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /// MOSTLY INTERNAL CONFIG ////\n    \n    // calculated internally to match the height\n    edgeLength: 80,\n    // number of iterations until we give up (we will drop out due to having reached low energy most likely much sooner)\n    maxIterations: 100,\n    // set to false if the graph is done animated on animatedEasing : true\n    animating: true,\n\n    // Minimum energy at which we stop relaxing the graph\n    minTension: 2\n};\n\nfunction updateConfig(config)\n{\n    config.numFaces = calculateNumberOfFaces(config.numberOfRings)\n    config.firstPassLen = config.numFaces * f_size\n    config.firstPassNumEdges = config.numFaces * 3\n    config.edgeLength = ( Math.min(config.width, config.height) / (config.numberOfRings * 2 + 2)) | 0;\n    config.animating = config.animatedEasing;\n    config.relaxCount = 0;\n}\n\n\nfunction createHexagonTriangles(config)\n{\n\n    const limit = config.numberOfRings;\n\n    //console.log(\"createHexagonTriangles\", limit);\n\n    const DIRECTIONS = [\n        new Vector(\n            Math.cos(0) * config.edgeLength,\n            Math.sin(0) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH) * config.edgeLength,\n            Math.sin(SIXTH) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 2) * config.edgeLength,\n            Math.sin(SIXTH * 2) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 3) * config.edgeLength,\n            Math.sin(SIXTH * 3) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 4) * config.edgeLength,\n            Math.sin(SIXTH * 4) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 5) * config.edgeLength,\n            Math.sin(SIXTH * 5) * config.edgeLength\n        )\n    ];\n\n    const faces = new Float64Array(config.firstPassLen);\n\n    let off = 0;\n\n    let count = 0;\n    let numTris = 1;\n    do\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            const v0 = DIRECTIONS[i];\n            const v1 = DIRECTIONS[(i + 1) % 6];\n            const v2 = DIRECTIONS[(i + 2) % 6];\n\n            let pos = v0.copy().scale(count);\n\n            for (let j = 0; j < numTris; j++)\n            {\n                if (j & 1)\n                {\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v1.x) | 0;\n                    faces[off + f_y1] = (pos.y + v1.y) | 0;\n                    faces[off + f_x2] = (pos.x + v2.x) | 0;\n                    faces[off + f_y2] = (pos.y + v2.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = -1;\n\n                    off += f_size;\n\n                    pos.add(v2);\n                }\n                else\n                {\n\n                    // All tris in the last row all have their edge #1 on the outer edge of the big hexagon\n                    const isOutmost = count === limit;\n\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v0.x) | 0;\n                    faces[off + f_y1] = (pos.y + v0.y) | 0;\n                    faces[off + f_x2] = (pos.x + v1.x) | 0;\n                    faces[off + f_y2] = (pos.y + v1.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = isOutmost ? 1 : -1;\n\n                    off += f_size;\n                }\n            }\n        }\n\n        numTris += 2;\n\n    } while (count++ < limit);\n\n    return faces;\n}\n\n\nfunction findOtherEdge(faces, x0, y0, x1, y1, index, out)\n{\n    for (let i = 0; i < faces.length; i += f_size)\n    {\n        if (i === index)\n        {\n            continue;\n        }\n\n        // console.log(\"find\", x0, y0, x1, y1, \":\",\n        //     faces[i + f_x0], faces[i + f_y0],\n        //     faces[i + f_x1], faces[i + f_y1],\n        //     faces[i + f_x2], faces[i + f_y2],\n        //     faces[i + f_x3], faces[i + f_y3],\n        // );\n\n        const count = faces[i + f_count];\n        if (\n            faces[i + f_x0] === x1 && faces[i + f_y0] === y1 &&\n            faces[i + f_x1] === x0 && faces[i + f_y1] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 0;\n            return;\n        }\n        if (\n            faces[i + f_x1] === x1 && faces[i + f_y1] === y1 &&\n            faces[i + f_x2] === x0 && faces[i + f_y2] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 1;\n            return;\n        }\n\n        if (count === 3)\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n        }\n        else\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x3] === x0 && faces[i + f_y3] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n\n            if (\n                faces[i + f_x3] === x1 && faces[i + f_y3] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 3;\n                return;\n            }\n\n        }\n    }\n\n    out.index = -1;\n}\n\n\nconst out = {index: -1, edge: 0};\n\n\nfunction getEdgeStack(config, faces)\n{\n    const length = config.numFaces * 3;\n    const stack = new Int32Array(length);\n\n    let pos = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const outmostEdge = faces[i + f_outmostEdge];\n\n        const targetIsOutmostFace = outmostEdge >= 0;\n        // we can't remove any of the outmost edges around the big hexagon (and we avoid having an edge triange as\n        // first merged triangle to simplify edge removal\n        if (!targetIsOutmostFace)\n        {\n            const scaled = i << 2;\n            stack[pos++] = scaled ;\n            stack[pos++] = scaled + 1;\n            stack[pos++] = scaled + 2;\n        }\n    }\n\n    // fisher-yates shuffle the stack\n    for (let i  = 0; i < pos - 2; i++)\n    {\n        const j = i + ((Math.random() * pos - i - 1)|0)\n        const tmp = stack[i];\n        stack[i] = stack[j];\n        stack[j] = tmp;\n    }\n    return stack.slice(0, pos);\n}\n\n\nfunction removeRandomEdges(config, faces)\n{\n    const count = (config.firstPassNumEdges * config.removeEdges / 100)|0;\n\n    //console.log(\"remove attempts\", count);\n\n    const stack = getEdgeStack(config, faces);\n\n    if (config.debug)\n    {\n        console.log(\"Shuffled stack\", [ ... stack.slice() ])\n    }\n\n    let stackPos = 0;\n\n\n    const eraseEdgesOfFaceInStack = index => {\n\n        for (let i = stackPos; i < stack.length; i++)\n        {\n            if ((stack[i] >>> 2) === index)\n            {\n                stack[i] = -1;\n            }\n        }\n    }\n\n\n\n    let success = 0;\n\n    // function printEdge(faces, otherIndex, outMostEdge)\n    // {\n    //     const count = faces[otherIndex + f_count];\n    //     const x0 = faces[otherIndex + outMostEdge * 2]\n    //     const y0 = faces[otherIndex + outMostEdge * 2 + 1]\n    //     const x1 = outMostEdge === count -1 ? faces[otherIndex] : faces[otherIndex + (outMostEdge + 1) * 2]\n    //     const y1 = outMostEdge === count -1 ? faces[otherIndex + 1] : faces[otherIndex + (outMostEdge + 1) * 2 + 1]\n    //\n    //\n    //     return x0 + \",\" + y0 + \",\" + x1 + \",\" + y1;\n    // }\n\n    for (let i = 0; i < count; i++)\n    {\n        let code;\n        do\n        {\n            if (stackPos === stack.length)\n            {\n                if (config.debug)\n                {\n                    config.debug && console.log(\"Ran out of removal candidates after successfully removing\", success, \"out of\", count);\n                }\n                // no more valid removals\n                return;\n            }\n            code = stack[stackPos++];\n        } while (code === -1);\n\n\n        const index = code >> 2;\n        const edge = code & 3;\n\n        const x0 = faces[index + edge * 2];\n        const y0 = faces[index + edge * 2 + 1];\n        const x1 = edge === 2 ? faces[index + f_x0] : faces[index + (edge + 1) * 2];\n        const y1 = edge === 2 ? faces[index + f_y0] : faces[index + (edge + 1) * 2 + 1];\n\n        findOtherEdge(faces, x0, y0, x1, y1, index, out)\n        if (out.index >= 0 && faces[out.index + f_count] === 3)\n        {\n            const {index: otherIndex, edge: otherEdge} = out;\n            const x2 = edge === 0 ? faces[index + f_x2] : faces[index + (edge - 1) * 2];\n            const y2 = edge === 0 ? faces[index + f_y2] : faces[index + (edge - 1) * 2 + 1];\n\n            // check if we're merging with an outmost face\n            const outMostEdge = faces[otherIndex + 9];\n            const otherIsOutmostTri = outMostEdge >= 0;\n\n            //const before = printEdge(faces, otherIndex, outMostEdge)\n            // if (otherIsOutmostTri)\n            // {\n            //     console.log(\"OUTMOST edge before split\", printEdge(faces, otherIndex, outMostEdge),\"EDGE CASE\", otherEdge, \"outMostEdge\", outMostEdge)\n            //     console.log(\"face before\", faces.slice(otherIndex, otherIndex + f_size))\n            // }\n\n            faces[otherIndex + 8] = 4;\n            switch (otherEdge)\n            {\n                case 2:\n                    faces[otherIndex + f_x3] = x2;\n                    faces[otherIndex + f_y3] = y2;\n                    break;\n                case 1:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = x2;\n                    faces[otherIndex + f_y2] = y2;\n                    break;\n                case 0:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = faces[otherIndex + f_x1];\n                    faces[otherIndex + f_y2] = faces[otherIndex + f_y1];\n                    faces[otherIndex + f_x1] = x2\n                    faces[otherIndex + f_y1] = y2;\n\n                    if (otherIsOutmostTri)\n                    {\n                        faces[otherIndex + f_outmostEdge] = 2;\n                    }\n\n                    break;\n\n            }\n            eraseEdgesOfFaceInStack(otherIndex)\n\n            // remove our face\n            faces[index + f_count] = 0;\n\n            success++;\n        }\n        eraseEdgesOfFaceInStack(index)\n\n    }\n\n    config.debug && console.log(\"Successfully removed\", success, \"out of\", count);\n\n    return success;\n}\n\n\nfunction calculateNumNodes(config, faces)\n{\n    let tris = 0;\n    let quads = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        if (count === 3)\n        {\n            tris++;\n        }\n        else if (count === 4)\n        {\n            quads++;\n        }\n    }\n\n    //console.log({quads,tris})\n\n    // we divide each quad in 9 nodes and each tri into 7 nodes\n    return quads * 9 + tris * 7;\n}\n\n\nconst QUAD_SIZE = 4;\n\n\nfunction subdivide(config, faces)\n{\n    const { firstPassLen, addQuads } = config;\n\n    const numNodes = calculateNumNodes(config, faces);\n\n    const nodes = new Float64Array(numNodes * g_size);\n\n\n    const quads = addQuads && new Int32Array(numNodes * QUAD_SIZE);\n\n    let pos = 0;\n    let qPos = 0;\n\n    const insertNode = (x0, y0, isEdge) => {\n\n        x0 |= 0;\n        y0 |= 0;\n\n        for (let i = 0; i < pos; i += g_size)\n        {\n            if (Math.abs(nodes[i] - x0) < 2 && Math.abs(nodes[i + 1] - y0) < 2)\n            {\n                // if we discover an odd face vertex touching the outmost edge, we will\n                // not register that because the odd tris are not marked as having an outmost edge, because they don't, they\n                // only have one vertices on the edge at most\n                // Later we might however return to that node within an outmost edge and we have to make sure that\n                // we take over the isEdge status from such a node\n                if (isEdge && !nodes[i + 2])\n                {\n                    nodes[i + 2] = 1;\n                }\n\n                return i;\n            }\n        }\n\n        const index = pos;\n\n        nodes[pos + g_x] = x0;\n        nodes[pos + g_y] = y0;\n        nodes[pos + g_isEdge] = isEdge ? 1 : 0;\n        nodes[pos + g_count] = 0;\n\n        pos += g_size;\n\n        return index;\n    }\n\n    const addQuad = addQuads && ((n0,n1,n2,n3) => {\n\n        quads[qPos++] = n0;\n        quads[qPos++] = n1;\n        quads[qPos++] = n2;\n        quads[qPos++] = n3;\n\n    });\n\n    const insertEdge = (n0, n1) => {\n        let count = nodes[n0 + 3];\n\n        let found = false;\n        for (let i = 0; i < count; i++)\n        {\n            const other = nodes[n0 + 4 + i];\n            if (other === n1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            if (count >= 10)\n            {\n                throw new Error(\"At most 10 edges per node\")\n            }\n\n            nodes[n0 + 4 + count++] = n1;\n            nodes[n0 + 3] = count;\n        }\n\n    }\n    const connect = (n0, n1) => {\n\n        insertEdge(n0, n1);\n        insertEdge(n1, n0);\n\n    }\n\n    for (let i = 0; i < firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n        if (count === 0)\n        {\n            continue;\n        }\n\n        const x0 = faces[i + f_x0]\n        const y0 = faces[i + f_y0]\n        const x1 = faces[i + f_x1]\n        const y1 = faces[i + f_y1]\n        const x2 = faces[i + f_x2]\n        const y2 = faces[i + f_y2]\n\n        const outmostEdge = faces[i + f_outmostEdge ];\n\n        const firstEdgeIsOutmost = outmostEdge === 1;\n        const secondEdgeIsOutmost = outmostEdge === 2;\n\n        if (count === 3)\n        {\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x0) / 2;\n            const m2y = (y2 + y0) / 2;\n\n            const cx = (x0 + x1 + x2) / 3\n            const cy = (y0 + y1 + y2) / 3\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y);\n            const n6 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n6);\n            connect(n6, n5);\n            connect(n5, n0);\n\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n6);\n            connect(n6, n1);\n\n            connect(n5, n6);\n            connect(n6, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n\n            if (addQuads)\n            {\n                addQuad(n0,n1,n6,n5);\n                addQuad(n1,n2,n3,n6);\n                addQuad(n5,n6,n3,n4);\n            }\n\n        }\n        else\n        {\n            const x3 = faces[i + f_x3]\n            const y3 = faces[i + f_y3]\n\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x3) / 2;\n            const m2y = (y2 + y3) / 2;\n            const m3x = (x3 + x0) / 2;\n            const m3y = (y3 + y0) / 2;\n\n            const cx = (x0 + x1 + x2 + x3) / 4\n            const cy = (y0 + y1 + y2 + y3) / 4\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost || secondEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y, secondEdgeIsOutmost);\n            const n6 = insertNode(x3, y3, secondEdgeIsOutmost);\n            const n7 = insertNode(m3x, m3y);\n            const n8 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n            connect(n5, n6);\n            connect(n6, n7);\n            connect(n7, n0);\n\n            connect(n8, n3);\n            connect(n8, n5);\n            connect(n8, n7);\n            connect(n8, n1);\n\n            if (addQuads)\n            {\n                addQuad(n0,n1,n8,n7);\n                addQuad(n1,n2,n3,n8);\n                addQuad(n8,n3,n4,n5);\n                addQuad(n7,n8,n5,n6);\n            }\n        }\n    }\n\n    //const fillRate = (pos / g_size) / numNodes;\n    //console.log(\"SUBDIVIDED: limit = \", numNodes, \", fill rate = \", fillRate);\n\n    return [nodes.slice(0, pos), quads && quads.slice(0, qPos)];\n}\n\n\nfunction relaxWeighted(config, graph, maxIterations = 1)\n{\n\n    const {length} = graph;\n\n    for (let i = 0; i < maxIterations; i++)\n    {\n        let tension = 0;\n        for (let j = 0; j < length; j += g_size)\n        {\n            if (!graph[j + g_isEdge])\n            {\n                const x0 = graph[j + g_x]\n                const y0 = graph[j + g_y]\n                const edgeCount = graph[j + g_count]\n\n                let centerX = 0;\n                let centerY = 0;\n                let sumWeight = 0;\n\n                for (let k = 0; k < edgeCount; k++)\n                {\n                    const other = graph[j + 4 + k];\n\n                    const x1 = graph[other];\n                    const y1 = graph[other + 1];\n\n                    const weight = config.weightFunction(x0, y0, x1, y1);\n\n                    centerX += x1 * weight;\n                    centerY += y1 * weight;\n                    sumWeight += weight;\n                }\n\n                const x1 = centerX / sumWeight\n                const y1 = centerY / sumWeight;\n\n                const dx = x1 - x0;\n                const dy = y1 - y0;\n\n                graph[j + g_x] = x1;\n                graph[j + g_y] = y1;\n\n                tension += dx * dx + dy * dy;\n\n            }\n        }\n\n        if (tension < config.minTension)\n        {\n            config.debug && console.log(\"Reached minimal tension\", config.minTension, \"after\", config.relaxCount, \"iterations\")\n            return true;\n        }\n        config.relaxCount++;\n    }\n\n    if (!config.animatedEasing)\n    {\n        config.debug && console.log(\"Stopping after max iterations = \" + config.maxIterations)\n    }\n\n    return false;\n}\n\n\n/**\n * A hexagon filled with quads forming organic shapes.\n */\nclass OrganicQuads {\n    constructor(cfg)\n    {\n\n        const config = {\n            ...DEFAULT_CONFIG,\n            ...cfg\n        }\n\n        updateConfig(config)\n\n        this.config = config;\n\n        const faces = createHexagonTriangles(config);\n\n        if (config.renderFirstPassEdges)\n        {\n            this.faces = config.renderFirstPassEdges !== \"merged\" ? faces.slice() : faces;\n        }\n\n        const start = config.debug && now();\n\n        removeRandomEdges(config, faces)\n\n        config.debug && console.log(\"Edge removal in \" , now() - start, \"ms\")\n\n        const [graph, quads] = subdivide(config, faces);\n        this.quads = quads;\n\n        if (!config.animating)\n        {\n            relaxWeighted(config, graph, config.maxIterations);\n        }\n        //console.log(\"GRAPH f_size\", graph.length / g_size, graph);\n        this.graph = graph;\n\n    }\n\n\n    render = ctx =>\n    {\n        const { config, graph, faces } = this;\n\n\n        ctx.save();\n\n        const hw = config.width / 2;\n        const hh = config.height / 2;\n\n        ctx.translate(hw, hh)\n\n        const {length} = graph;\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(-hw, -hh, config.width, config.height)\n\n        if (config.renderFirstPassEdges)\n        {\n\n            // draw original quads and tris\n\n            ctx.strokeStyle = \"#f00\";\n            ctx.lineWidth = 1;\n\n\n            let outerCount = 0;\n            for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n            {\n                const count = faces[pos + f_count];\n\n                if (count >= 3)\n                {\n\n                    ctx.beginPath();\n                    ctx.moveTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n\n                    for (let i = 1; i < count; i++)\n                    {\n                        ctx.lineTo(faces[pos + i*2],faces[pos +  i*2 + 1]);\n                    }\n\n                    ctx.closePath();\n                    ctx.stroke();\n\n                    const outmostEdge = faces[pos + f_outmostEdge];\n                    if (outmostEdge >= 0)\n                    {\n                        ctx.strokeStyle = \"#fe0\";\n                        ctx.beginPath();\n                        ctx.moveTo(faces[pos + outmostEdge * 2  ],faces[pos + outmostEdge * 2 + 1]);\n\n                        if (outmostEdge === count - 1)\n                        {\n                            ctx.lineTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n                        }\n                        else\n                        {\n                            ctx.lineTo(faces[pos + (outmostEdge + 1 ) * 2  ],faces[pos + (outmostEdge + 1 ) * 2 + 1]);\n                        }\n                        ctx.stroke();\n                        ctx.strokeStyle = \"#f00\";\n\n                        outerCount++;\n\n                    }\n\n                }\n            }\n            //    console.log(\"Number of outer edges\", outerCount)\n\n            //console.log(\"DRAW EDGES\")\n        }\n\n        ctx.strokeStyle = \"#fff\";\n        ctx.lineWidth = 1;\n\n\n        function drawEdge(x0, y0, node)\n        {\n            const x1 = graph[node + g_x];\n            const y1 = graph[node + g_y];\n\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n        }\n\n\n        for (let i = 0; i < length; i += g_size)\n        {\n            const x0 = graph[i + g_x];\n            const y0 = graph[i + g_y];\n            const edgeCount = graph[i + g_count];\n\n            for (let j = 0; j < edgeCount; j++)\n            {\n                drawEdge(x0, y0, graph[i + g_edge0 + j])\n            }\n        }\n\n        //ctx.fillStyle = \"#f0f\";\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const isEdge = graph[i + g_isEdge];\n        //\n        //     if (isEdge)\n        //     {\n        //         ctx.fillRect(x0 - 4,  y0 - 4, 8, 8)\n        //     }\n        // }\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 4;\n        //\n        // for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n        // {\n        //     const count = faces[pos + f_count];\n        //     const outmostEdge = faces[pos + f_outmostEdge];\n        //\n        //\n        //     const last = count - 1;\n        //     for (let i=0; i < count; i++)\n        //     {\n        //         if (i === outmostEdge)\n        //         {\n        //             ctx.strokeStyle = \"rgba(255,0,0,0.5)\";\n        //         }\n        //         else\n        //         {\n        //             ctx.strokeStyle = \"rgba(0,255,0,0.5)\";\n        //         }\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos + i * 2], faces[pos + i * 2 + 1]);\n        //         ctx.lineTo(\n        //             i === last ? faces[pos + f_x0 ] : faces[pos + (i+1) * 2],\n        //             i === last ? faces[pos + f_y0 ] : faces[pos + (i+1) * 2 + 1]\n        //         );\n        //         ctx.stroke();\n        //     }\n        // }\n\n        ctx.restore();\n\n        if (config.animating)\n        {\n            if (relaxWeighted(config, graph))\n            {\n                config.animating = false;\n            }\n            //            raf(redrawGraph)\n        }\n    }\n\n    get nodeSize()\n    {\n        return f_size;\n    }\n}\n\n\nexport {  Vector }\n\nexport default OrganicQuads\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"6ea96756a6d89a8d92f9.worker.js\");\n};"],"sourceRoot":""}