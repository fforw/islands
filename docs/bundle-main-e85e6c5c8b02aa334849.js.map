{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/../src/index.js","webpack://Demo/../src/vector.js","webpack://Demo/./src/constants.js","webpack://Demo/./src/loadTexture.js","webpack://Demo/./src/index.js","webpack://Demo/./src/util/dump.js","webpack://Demo/./src/loadScene.js","webpack://Demo/./src/heightLimit.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","3","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","SIXTH","Math","DEFAULT_CONFIG","width","height","numberOfRings","removeEdges","animatedEasing","renderFirstPassEdges","debug","weightFunction","dx","x1","dy","y1","edgeLength","maxIterations","animating","minTension","findOtherEdge","faces","x0","y0","index","out","count","edge","removeRandomEdges","config","stack","Int32Array","pos","scaled","tmp","getEdgeStack","console","stackPos","eraseEdgesOfFaceInStack","success","code","otherIndex","otherEdge","x2","y2","otherIsOutmostTri","subdivide","firstPassLen","numNodes","tris","quads","calculateNumNodes","nodes","Float64Array","tiles","tilePos","insertNode","isEdge","addTile","n0","insertEdge","n1","found","Error","connect","outmostEdge","firstEdgeIsOutmost","secondEdgeIsOutmost","m0x","m0y","m1x","m1y","m2x","m2y","cx","cy","n2","n3","n4","n5","n6","x3","y3","m3x","m3y","n7","n8","newTiles","numConnections","k","otherNode0","otherNode1","otherNode2","otherNode3","connectTiles","relaxWeighted","graph","tension","edgeCount","centerX","centerY","sumWeight","other","weight","ctx","hw","hh","limit","updateConfig","this","DIRECTIONS","Vector","off","numTris","v0","v1","v2","isOutmost","createHexagonTriangles","start","sqrt","x","y","targetLength","scale","WATER","SAND","GRASS","FOREST","STONE","DIRT","UNDEFINED","MATERIAL_NAMES","CASE_NAMES","GROUND_COLORS","TAU","PI","PHI","loader","TextureLoader","container","camera","scene","renderer","light","controls","water","tileData","heightMap","materials","organicQuads","nOffset","random","mOffset","heightFn","z0","distance","w","noise","noise2D","heightLimit","max","MAX_HEIGHT","tmpHeight","cutCliffs","tileDataFactor","t_size","tileCuts","cutNodes","Set","tileDataIndex","tileDataIndex0","t_tile0","tileDataIndex1","t_tile1","tileDataIndex2","t_tile2","tileDataIndex3","t_tile3","cutMask","abs","cut0","cut1","heightMapIndex0","t_n0","heightIndexFactor","heightMapIndex1","node0","node1","add","rnd","h_ground","usInOther","next","prevIsCut","nextIsCut","cut","createScene","OrganicQuads","graphUserData","heightMapFactor","g_size","g_x","g_y","tileDataPos","t_n1","t_n2","t_n3","updateCentroids","log","group","tileIndex","t_isEdge","findEdgeTile","visited","walkRecursive","has","testWalkability","heightMapPos","nodePos","generateGround","rng","Prando","SimplexNoise","cubeCamera","sky","skyParameters","updateSun","theta","phi","position","cos","sin","z","material","uniforms","copy","normalize","update","init","document","getElementById","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","Scene","PerspectiveCamera","set","DirectionalLight","CubeCamera","background","renderTarget","waterGeometry","PlaneBufferGeometry","Water","textureWidth","textureHeight","waterNormals","alpha","sunDirection","clone","sunColor","waterColor","distortionScale","clipBias","fog","rotation","Sky","texture","OrbitControls","maxPolarAngle","target","minDistance","maxDistance","enableDamping","dampingFactor","addEventListener","onWindowResize","marchingSquaresArray","vertexMap","Map","vertexCount","uv","normal","insert","nx","ny","nz","u","v","round","undefined","newIndex","facesByMaterial","Array","currGround","array","createMarchingSquares","cutCase","tileA","tileB","tileDataIndexA","tileDataIndexB","otherCut0","otherCut1","z1","z3","z2","ax","ay","az","bx","by","bz","indexA","indexB","indexC","indexD","geometry","BufferGeometry","setAttribute","BufferAttribute","Float32Array","meshMaterials","concat","addGroup","setIndex","terrain","Mesh","addMarchingSquareObjects","Object3D","Vector3","vX1","vX2","vY1","vAxisStart","vAxisEnd","transformed","vUp","ground","heightIndex0","heightIndex1","heightIndex2","heightIndex3","cz","upX","upY","upZ","f","g1","g2","g4","g8","tileCase","geo","getIndex","positions","getAttribute","uvs","normals","idx","uvIdx","multiplyScalar","sub","aspect","updateProjectionMatrix","mainLoop","time","performance","now","WATER_LIMIT","render","raf","Promise","all","loadScene","url","onProgress","resolve","reject","load","loadTexture","then","marchingSquares","tWaterNormals","dump","obj","level","type","nextLevel","children","map","find","kid","indexOf","extractMarchingSquares","wrapS","wrapT","RepeatWrapping","GLTFLoader","beach","beachSquared","mountain","mountain_mid","delta"],"mappings":"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","file":"bundle-main-e85e6c5c8b02aa334849.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t3: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpDemo\"] = window[\"webpackJsonpDemo\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([39,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import now from \"performance-now\"\nimport Vector from \"./vector\";\n\nexport const f_x0 = 0;\nexport const f_y0 = 1;\nexport const f_x1 = 2;\nexport const f_y1 = 3;\nexport const f_x2 = 4;\nexport const f_y2 = 5;\nexport const f_x3 = 6;\nexport const f_y3 = 7;\nexport const f_count = 8;\nexport const f_outmostEdge = 9;\nexport const f_size = 10;\n\nexport const g_x = 0;\nexport const g_y = 1;\nexport const g_isEdge = 2;\nexport const g_count = 3;\nexport const g_edge0 = 4;\nexport const g_edge1 = 5;\nexport const g_edge2 = 6;\nexport const g_edge3 = 7;\nexport const g_edge4 = 8;\nexport const g_edge5 = 9;\nexport const g_size = 10;\n\n\nexport const t_n0 = 0;\nexport const t_n1 = 1;\nexport const t_n2 = 2;\nexport const t_n3 = 3;\nexport const t_isEdge = 4;\nexport const t_tile0 = 5;\nexport const t_tile1 = 6;\nexport const t_tile2 = 7;\nexport const t_tile3 = 8;\nexport const t_size = 9;\n\nconst TAU = Math.PI * 2;\n\nconst SIXTH = TAU / 6;\n\nfunction calculateNumberOfFaces(limit)\n{\n    return 6 * (limit + 1) * (limit + 1);\n}\n\n\nconst DEFAULT_CONFIG = {\n    /** coordinate width */\n    width: 0,\n    /** coordinate height */\n    height: 0,\n    /** number of rings in the hexagon / number of base intersections of hexaxgon */\n    numberOfRings: 5,\n    /** how many percent of the edges shall we attempt to remove? */\n    removeEdges: 50,\n\n    /** if true, the graph will be layouted a bit with every render. If false, the graph relaxation happens at creation */\n    animatedEasing: true,\n\n    /** Set to true to render the original triangles, set to \"merged\" to render the merged triangles before subdivision */\n    renderFirstPassEdges: false,\n\n     /** Set to true to enable some debug logging */\n    debug : false,\n\n    weightFunction : (x0,y0,x1,y1) => {\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n        return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /// MOSTLY INTERNAL CONFIG ////\n    \n    // calculated internally to match the height\n    edgeLength: 80,\n    // number of iterations until we give up (we will drop out due to having reached low energy most likely much sooner)\n    maxIterations: 100,\n    // set to false if the graph is done animated on animatedEasing : true\n    animating: true,\n\n    // Minimum energy at which we stop relaxing the graph\n    minTension: 2\n};\n\nfunction updateConfig(config)\n{\n    config.numFaces = calculateNumberOfFaces(config.numberOfRings)\n    config.firstPassLen = config.numFaces * f_size\n    config.firstPassNumEdges = config.numFaces * 3\n    config.edgeLength = ( Math.min(config.width, config.height) / (config.numberOfRings * 2 + 2)) | 0;\n    config.animating = config.animatedEasing;\n    config.relaxCount = 0;\n}\n\n\nfunction createHexagonTriangles(config)\n{\n\n    const limit = config.numberOfRings;\n\n    //console.log(\"createHexagonTriangles\", limit);\n\n    const DIRECTIONS = [\n        new Vector(\n            Math.cos(0) * config.edgeLength,\n            Math.sin(0) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH) * config.edgeLength,\n            Math.sin(SIXTH) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 2) * config.edgeLength,\n            Math.sin(SIXTH * 2) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 3) * config.edgeLength,\n            Math.sin(SIXTH * 3) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 4) * config.edgeLength,\n            Math.sin(SIXTH * 4) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 5) * config.edgeLength,\n            Math.sin(SIXTH * 5) * config.edgeLength\n        )\n    ];\n\n    const faces = new Float64Array(config.firstPassLen);\n\n    let off = 0;\n\n    let count = 0;\n    let numTris = 1;\n    do\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            const v0 = DIRECTIONS[i];\n            const v1 = DIRECTIONS[(i + 1) % 6];\n            const v2 = DIRECTIONS[(i + 2) % 6];\n\n            let pos = v0.copy().scale(count);\n\n            for (let j = 0; j < numTris; j++)\n            {\n                if (j & 1)\n                {\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v1.x) | 0;\n                    faces[off + f_y1] = (pos.y + v1.y) | 0;\n                    faces[off + f_x2] = (pos.x + v2.x) | 0;\n                    faces[off + f_y2] = (pos.y + v2.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = -1;\n\n                    off += f_size;\n\n                    pos.add(v2);\n                }\n                else\n                {\n\n                    // All tris in the last row all have their edge #1 on the outer edge of the big hexagon\n                    const isOutmost = count === limit;\n\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v0.x) | 0;\n                    faces[off + f_y1] = (pos.y + v0.y) | 0;\n                    faces[off + f_x2] = (pos.x + v1.x) | 0;\n                    faces[off + f_y2] = (pos.y + v1.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = isOutmost ? 1 : -1;\n\n                    off += f_size;\n                }\n            }\n        }\n\n        numTris += 2;\n\n    } while (count++ < limit);\n\n    return faces;\n}\n\n\nfunction findOtherEdge(faces, x0, y0, x1, y1, index, out)\n{\n    for (let i = 0; i < faces.length; i += f_size)\n    {\n        if (i === index)\n        {\n            continue;\n        }\n\n        // console.log(\"find\", x0, y0, x1, y1, \":\",\n        //     faces[i + f_x0], faces[i + f_y0],\n        //     faces[i + f_x1], faces[i + f_y1],\n        //     faces[i + f_x2], faces[i + f_y2],\n        //     faces[i + f_x3], faces[i + f_y3],\n        // );\n\n        const count = faces[i + f_count];\n        if (\n            faces[i + f_x0] === x1 && faces[i + f_y0] === y1 &&\n            faces[i + f_x1] === x0 && faces[i + f_y1] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 0;\n            return;\n        }\n        if (\n            faces[i + f_x1] === x1 && faces[i + f_y1] === y1 &&\n            faces[i + f_x2] === x0 && faces[i + f_y2] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 1;\n            return;\n        }\n\n        if (count === 3)\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n        }\n        else\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x3] === x0 && faces[i + f_y3] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n\n            if (\n                faces[i + f_x3] === x1 && faces[i + f_y3] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 3;\n                return;\n            }\n\n        }\n    }\n\n    out.index = -1;\n}\n\n\nconst out = {index: -1, edge: 0};\n\n\nfunction getEdgeStack(config, faces)\n{\n    const length = config.numFaces * 3;\n    const stack = new Int32Array(length);\n\n    let pos = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const outmostEdge = faces[i + f_outmostEdge];\n\n        const targetIsOutmostFace = outmostEdge >= 0;\n        // we can't remove any of the outmost edges around the big hexagon (and we avoid having an edge triange as\n        // first merged triangle to simplify edge removal\n        if (!targetIsOutmostFace)\n        {\n            const scaled = i << 2;\n            stack[pos++] = scaled ;\n            stack[pos++] = scaled + 1;\n            stack[pos++] = scaled + 2;\n        }\n    }\n\n    // fisher-yates shuffle the stack\n    for (let i  = 0; i < pos - 2; i++)\n    {\n        const j = i + ((Math.random() * pos - i - 1)|0)\n        const tmp = stack[i];\n        stack[i] = stack[j];\n        stack[j] = tmp;\n    }\n    return stack.slice(0, pos);\n}\n\n\nfunction removeRandomEdges(config, faces)\n{\n    const count = (config.firstPassNumEdges * config.removeEdges / 100)|0;\n\n    //console.log(\"remove attempts\", count);\n\n    const stack = getEdgeStack(config, faces);\n\n    if (config.debug)\n    {\n        console.log(\"Shuffled stack\", [ ... stack.slice() ])\n    }\n\n    let stackPos = 0;\n\n\n    const eraseEdgesOfFaceInStack = index => {\n\n        for (let i = stackPos; i < stack.length; i++)\n        {\n            if ((stack[i] >>> 2) === index)\n            {\n                stack[i] = -1;\n            }\n        }\n    }\n\n\n\n    let success = 0;\n\n    // function printEdge(faces, otherIndex, outMostEdge)\n    // {\n    //     const count = faces[otherIndex + f_count];\n    //     const x0 = faces[otherIndex + outMostEdge * 2]\n    //     const y0 = faces[otherIndex + outMostEdge * 2 + 1]\n    //     const x1 = outMostEdge === count -1 ? faces[otherIndex] : faces[otherIndex + (outMostEdge + 1) * 2]\n    //     const y1 = outMostEdge === count -1 ? faces[otherIndex + 1] : faces[otherIndex + (outMostEdge + 1) * 2 + 1]\n    //\n    //\n    //     return x0 + \",\" + y0 + \",\" + x1 + \",\" + y1;\n    // }\n\n    for (let i = 0; i < count; i++)\n    {\n        let code;\n        do\n        {\n            if (stackPos === stack.length)\n            {\n                if (config.debug)\n                {\n                    config.debug && console.log(\"Ran out of removal candidates after successfully removing\", success, \"out of\", count);\n                }\n                // no more valid removals\n                return;\n            }\n            code = stack[stackPos++];\n        } while (code === -1);\n\n\n        const index = code >> 2;\n        const edge = code & 3;\n\n        const x0 = faces[index + edge * 2];\n        const y0 = faces[index + edge * 2 + 1];\n        const x1 = edge === 2 ? faces[index + f_x0] : faces[index + (edge + 1) * 2];\n        const y1 = edge === 2 ? faces[index + f_y0] : faces[index + (edge + 1) * 2 + 1];\n\n        findOtherEdge(faces, x0, y0, x1, y1, index, out)\n        if (out.index >= 0 && faces[out.index + f_count] === 3)\n        {\n            const {index: otherIndex, edge: otherEdge} = out;\n            const x2 = edge === 0 ? faces[index + f_x2] : faces[index + (edge - 1) * 2];\n            const y2 = edge === 0 ? faces[index + f_y2] : faces[index + (edge - 1) * 2 + 1];\n\n            // check if we're merging with an outmost face\n            const outMostEdge = faces[otherIndex + 9];\n            const otherIsOutmostTri = outMostEdge >= 0;\n\n            //const before = printEdge(faces, otherIndex, outMostEdge)\n            // if (otherIsOutmostTri)\n            // {\n            //     console.log(\"OUTMOST edge before split\", printEdge(faces, otherIndex, outMostEdge),\"EDGE CASE\", otherEdge, \"outMostEdge\", outMostEdge)\n            //     console.log(\"face before\", faces.slice(otherIndex, otherIndex + f_size))\n            // }\n\n            faces[otherIndex + 8] = 4;\n            switch (otherEdge)\n            {\n                case 2:\n                    faces[otherIndex + f_x3] = x2;\n                    faces[otherIndex + f_y3] = y2;\n                    break;\n                case 1:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = x2;\n                    faces[otherIndex + f_y2] = y2;\n                    break;\n                case 0:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = faces[otherIndex + f_x1];\n                    faces[otherIndex + f_y2] = faces[otherIndex + f_y1];\n                    faces[otherIndex + f_x1] = x2\n                    faces[otherIndex + f_y1] = y2;\n\n                    if (otherIsOutmostTri)\n                    {\n                        faces[otherIndex + f_outmostEdge] = 2;\n                    }\n\n                    break;\n\n            }\n            eraseEdgesOfFaceInStack(otherIndex)\n\n            // remove our face\n            faces[index + f_count] = 0;\n\n            success++;\n        }\n        eraseEdgesOfFaceInStack(index)\n\n    }\n\n    config.debug && console.log(\"Successfully removed\", success, \"out of\", count);\n\n    return success;\n}\n\n\nfunction calculateNumNodes(config, faces)\n{\n    let tris = 0;\n    let quads = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        if (count === 3)\n        {\n            tris++;\n        }\n        else if (count === 4)\n        {\n            quads++;\n        }\n    }\n\n    //console.log({quads,tris})\n\n    // we divide each quad in 9 nodes and each tri into 7 nodes\n    return quads * 9 + tris * 7;\n}\n\n\n\nfunction connectTiles(config, tiles)\n{\n    const { length } = tiles;\n\n    for (let i=0; i < length; i += t_size)\n    {\n        let numConnections = 0;\n        for (let j = 0; j < 4; j++)\n        {\n            const n0 = tiles[i + t_n0 + j];\n            const n1 = j === 3 ? tiles[i + t_n0 ] : tiles[i + t_n0 + j + 1];\n\n            let otherIndex = -1;\n            for (let k=0; k < tiles.length; k += t_size)\n            {\n                if (k === i)\n                {\n                    continue;\n                }\n\n                const otherNode0 = tiles[k + t_n0];\n                const otherNode1 = tiles[k + t_n1];\n                const otherNode2 = tiles[k + t_n2];\n                const otherNode3 = tiles[k + t_n3];\n\n                // tile edges are all defined in clockwise order, the opposite edge must necessarily walk the two nodes in\n                // the opposite direction\n\n                if (\n                    otherNode1 === n0 && otherNode0 === n1 ||\n                    otherNode2 === n0 && otherNode1 === n1 ||\n                    otherNode3 === n0 && otherNode2 === n1 ||\n                    otherNode0 === n0 && otherNode3 === n1\n                )\n                {\n\n                    otherIndex = k;\n                    numConnections++;\n                    break;\n                }\n            }\n\n            tiles[i + t_tile0 + j] = otherIndex;\n        }\n        tiles[i + t_isEdge] = numConnections === 4 ? 0 : 1;\n    }\n\n    config.debug && console.log(\"TILE GRAPH\", tiles);\n}\n\n\nfunction subdivide(config, faces)\n{\n    const { firstPassLen } = config;\n\n    const numNodes = calculateNumNodes(config, faces);\n\n    const nodes = new Float64Array(numNodes * g_size);\n\n\n    const tiles = new Int32Array(((numNodes / 2)|0) * t_size);\n\n    let pos = 0;\n    let tilePos = 0;\n\n    const insertNode = (x0, y0, isEdge) => {\n\n        x0 |= 0;\n        y0 |= 0;\n\n        for (let i = 0; i < pos; i += g_size)\n        {\n            if (Math.abs(nodes[i] - x0) < 4 && Math.abs(nodes[i + 1] - y0) < 4)\n            {\n                // if we discover an odd face vertex touching the outmost edge, we will\n                // not register that because the odd tris are not marked as having an outmost edge, because they don't, they\n                // only have one vertex on the edge at most\n                // Later we might however return to that node within an outmost edge and we have to make sure that\n                // we take over the isEdge status from such a node\n                if (isEdge && !nodes[i + 2])\n                {\n                    nodes[i + 2] = 1;\n                }\n\n                return i;\n            }\n        }\n\n        const index = pos;\n\n        nodes[pos + g_x] = x0;\n        nodes[pos + g_y] = y0;\n        nodes[pos + g_isEdge] = isEdge ? 1 : 0;\n        nodes[pos + g_count] = 0;\n\n        pos += g_size;\n\n        return index;\n    }\n\n    const addTile = ((n0,n1,n2,n3) => {\n\n        //console.log(\"addTile\", n0, n1, n2, n3, tilePos)\n\n        tiles[tilePos + t_n0] = n0;\n        tiles[tilePos + t_n1] = n1;\n        tiles[tilePos + t_n2] = n2;\n        tiles[tilePos + t_n3] = n3;\n\n        tilePos += t_size;\n    });\n\n    const insertEdge = (n0, n1) => {\n        let count = nodes[n0 + g_count];\n\n        let found = false;\n        for (let i = 0; i < count; i++)\n        {\n            const other = nodes[n0 + g_edge0 + i];\n            if (other === n1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            if (count >= 6)\n            {\n                throw new Error(\"At most 6 edges per node\")\n            }\n\n            nodes[n0 + g_edge0 + count++] = n1;\n            nodes[n0 + g_count] = count;\n        }\n\n    }\n    const connect = (n0, n1) => {\n\n        insertEdge(n0, n1);\n        insertEdge(n1, n0);\n\n    }\n\n    for (let i = 0; i < firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        const x0 = faces[i + f_x0]\n        const y0 = faces[i + f_y0]\n        const x1 = faces[i + f_x1]\n        const y1 = faces[i + f_y1]\n        const x2 = faces[i + f_x2]\n        const y2 = faces[i + f_y2]\n\n        const outmostEdge = faces[i + f_outmostEdge ];\n\n        const firstEdgeIsOutmost = outmostEdge === 1;\n        const secondEdgeIsOutmost = outmostEdge === 2;\n\n        if (count === 3)\n        {\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x0) / 2;\n            const m2y = (y2 + y0) / 2;\n\n            const cx = (x0 + x1 + x2) / 3\n            const cy = (y0 + y1 + y2) / 3\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y);\n            const n6 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n6);\n            connect(n6, n5);\n            connect(n5, n0);\n\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n6);\n            connect(n6, n1);\n\n            connect(n5, n6);\n            connect(n6, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n\n            addTile(n0,n1,n6,n5);\n            addTile(n1,n2,n3,n6);\n            addTile(n5,n6,n3,n4);\n\n        }\n        else if (count === 4)\n        {\n            const x3 = faces[i + f_x3]\n            const y3 = faces[i + f_y3]\n\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x3) / 2;\n            const m2y = (y2 + y3) / 2;\n            const m3x = (x3 + x0) / 2;\n            const m3y = (y3 + y0) / 2;\n\n            const cx = (x0 + x1 + x2 + x3) / 4\n            const cy = (y0 + y1 + y2 + y3) / 4\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost || secondEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y, secondEdgeIsOutmost);\n            const n6 = insertNode(x3, y3, secondEdgeIsOutmost);\n            const n7 = insertNode(m3x, m3y);\n            const n8 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n            connect(n5, n6);\n            connect(n6, n7);\n            connect(n7, n0);\n\n            connect(n8, n3);\n            connect(n8, n5);\n            connect(n8, n7);\n            connect(n8, n1);\n\n            addTile(n0,n1,n8,n7);\n            addTile(n1,n2,n3,n8);\n            addTile(n8,n3,n4,n5);\n            addTile(n7,n8,n5,n6);\n        }\n    }\n\n    //const fillRate = (pos / g_size) / numNodes;\n    //console.log(\"SUBDIVIDED: limit = \", numNodes, \", fill rate = \", fillRate);\n\n    console.log(\"TILES: buffer = \", tiles.length, \", used = \" + tilePos)\n\n    const newTiles = tiles.slice(0, tilePos);\n\n    connectTiles(config, newTiles);\n\n    return [nodes.slice(0, pos), newTiles];\n}\n\n\nfunction relaxWeighted(config, graph, maxIterations = 1)\n{\n\n    const {length} = graph;\n\n    for (let i = 0; i < maxIterations; i++)\n    {\n        let tension = 0;\n        for (let j = 0; j < length; j += g_size)\n        {\n            if (!graph[j + g_isEdge])\n            {\n                const x0 = graph[j + g_x]\n                const y0 = graph[j + g_y]\n                const edgeCount = graph[j + g_count]\n\n                let centerX = 0;\n                let centerY = 0;\n                let sumWeight = 0;\n\n                for (let k = 0; k < edgeCount; k++)\n                {\n                    const other = graph[j + 4 + k];\n\n                    const x1 = graph[other];\n                    const y1 = graph[other + 1];\n\n                    const weight = config.weightFunction(x0, y0, x1, y1);\n\n                    centerX += x1 * weight;\n                    centerY += y1 * weight;\n                    sumWeight += weight;\n                }\n\n                const x1 = centerX / sumWeight\n                const y1 = centerY / sumWeight;\n\n                const dx = x1 - x0;\n                const dy = y1 - y0;\n\n                graph[j + g_x] = x1;\n                graph[j + g_y] = y1;\n\n                tension += dx * dx + dy * dy;\n\n            }\n        }\n\n        if (tension < config.minTension)\n        {\n            config.debug && console.log(\"Reached minimal tension\", config.minTension, \"after\", config.relaxCount, \"iterations\")\n            return true;\n        }\n        config.relaxCount++;\n    }\n\n    if (!config.animatedEasing)\n    {\n        config.debug && console.log(\"Stopping after max iterations = \" + config.maxIterations)\n    }\n\n    return false;\n}\n\n\n/**\n * A hexagon filled with quads forming organic shapes.\n */\nclass OrganicQuads {\n    constructor(cfg)\n    {\n\n        const config = {\n            ...DEFAULT_CONFIG,\n            ...cfg\n        }\n\n        updateConfig(config)\n\n        this.config = config;\n\n        const faces = createHexagonTriangles(config);\n\n        if (config.renderFirstPassEdges)\n        {\n            this.faces = config.renderFirstPassEdges !== \"merged\" ? faces.slice() : faces;\n        }\n\n        const start = config.debug && now();\n\n        removeRandomEdges(config, faces)\n\n        config.debug && console.log(\"Edge removal in \" , now() - start, \"ms\")\n\n        const [graph, tiles] = subdivide(config, faces);\n        this.tiles = tiles;\n\n        if (!config.animating)\n        {\n            relaxWeighted(config, graph, config.maxIterations);\n        }\n        //console.log(\"GRAPH f_size\", graph.length / g_size, graph);\n        this.graph = graph;\n\n    }\n\n\n    render = ctx =>\n    {\n        const { config, graph, faces } = this;\n\n\n        ctx.save();\n\n        const hw = config.width / 2;\n        const hh = config.height / 2;\n\n        ctx.translate(hw, hh)\n\n        const {length} = graph;\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(-hw, -hh, config.width, config.height)\n\n        if (config.renderFirstPassEdges)\n        {\n\n            // draw original quads and tris\n\n            ctx.strokeStyle = \"#f00\";\n            ctx.lineWidth = 1;\n\n\n            let outerCount = 0;\n            for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n            {\n                const count = faces[pos + f_count];\n\n                if (count >= 3)\n                {\n\n                    ctx.beginPath();\n                    ctx.moveTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n\n                    for (let i = 1; i < count; i++)\n                    {\n                        ctx.lineTo(faces[pos + i*2],faces[pos +  i*2 + 1]);\n                    }\n\n                    ctx.closePath();\n                    ctx.stroke();\n\n                    const outmostEdge = faces[pos + f_outmostEdge];\n                    if (outmostEdge >= 0)\n                    {\n                        ctx.strokeStyle = \"#fe0\";\n                        ctx.beginPath();\n                        ctx.moveTo(faces[pos + outmostEdge * 2  ],faces[pos + outmostEdge * 2 + 1]);\n\n                        if (outmostEdge === count - 1)\n                        {\n                            ctx.lineTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n                        }\n                        else\n                        {\n                            ctx.lineTo(faces[pos + (outmostEdge + 1 ) * 2  ],faces[pos + (outmostEdge + 1 ) * 2 + 1]);\n                        }\n                        ctx.stroke();\n                        ctx.strokeStyle = \"#f00\";\n\n                        outerCount++;\n\n                    }\n\n                }\n            }\n            //    console.log(\"Number of outer edges\", outerCount)\n\n            //console.log(\"DRAW EDGES\")\n        }\n\n        // ctx.strokeStyle = \"#fff\";\n        // ctx.lineWidth = 1;\n        //\n        //\n        // function drawEdge(x0, y0, node)\n        // {\n        //     const x1 = graph[node + g_x];\n        //     const y1 = graph[node + g_y];\n        //\n        //     ctx.beginPath();\n        //     ctx.moveTo(x0, y0);\n        //     ctx.lineTo(x1, y1);\n        //     ctx.stroke();\n        // }\n        //\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const edgeCount = graph[i + g_count];\n        //\n        //     for (let j = 0; j < edgeCount; j++)\n        //     {\n        //         drawEdge(x0, y0, graph[i + g_edge0 + j])\n        //     }\n        // }\n\n        //ctx.fillStyle = \"#f0f\";\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const isEdge = graph[i + g_isEdge];\n        //\n        //     if (isEdge)\n        //     {\n        //         ctx.fillRect(x0 - 4,  y0 - 4, 8, 8)\n        //     }\n        // }\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 4;\n        //\n        // for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n        // {\n        //     const count = faces[pos + f_count];\n        //     const outmostEdge = faces[pos + f_outmostEdge];\n        //\n        //\n        //     const last = count - 1;\n        //     for (let i=0; i < count; i++)\n        //     {\n        //         if (i === outmostEdge)\n        //         {\n        //             ctx.strokeStyle = \"rgba(255,0,0,0.5)\";\n        //         }\n        //         else\n        //         {\n        //             ctx.strokeStyle = \"rgba(0,255,0,0.5)\";\n        //         }\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos + i * 2], faces[pos + i * 2 + 1]);\n        //         ctx.lineTo(\n        //             i === last ? faces[pos + f_x0 ] : faces[pos + (i+1) * 2],\n        //             i === last ? faces[pos + f_y0 ] : faces[pos + (i+1) * 2 + 1]\n        //         );\n        //         ctx.stroke();\n        //     }\n        // }\n\n        ctx.restore();\n\n        if (config.animating)\n        {\n            if (relaxWeighted(config, graph))\n            {\n                config.animating = false;\n            }\n            //            raf(redrawGraph)\n        }\n    }\n}\n\n\nexport {  Vector }\n\nexport default OrganicQuads\n","const sqrt = Math.sqrt;\n\nclass Vector\n{\n    constructor(x,y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns a copy of this vector.\n     *\n     * @returns {Vector} copy\n     */\n    copy()\n    {\n        return new Vector(this.x,this.y);\n    }\n\n    /**\n     * Adds to this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n\n    add(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x += x;\n            this.y += y;\n        }\n        else\n        {\n            this.x += x.x;\n            this.y += x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Subtracts from this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    subtract(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x -= x;\n            this.y -= y;\n        }\n        else\n        {\n            this.x -= x.x;\n            this.y -= x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by a planar number.\n     *\n     * @param n     scale\n     * @returns {Vector} this vector, scaled\n     */\n    scale(n)\n    {\n        this.x *= n;\n        this.y *= n;\n\n        return this;\n    }\n\n    /**\n     * Length of this vector\n     *\n     * @returns {number}    length\n     */\n    length()\n    {\n        const { x, y } = this;\n        return sqrt(x*x+y*y);\n    }\n\n    /**\n     * Scales the vector to normal length or a specified length\n     *\n     * @param targetLength      {number?} target length of the vector (default is 1, the normal vector length)\n     *\n     * @returns {Vector}\n     */\n    norm(targetLength = 1)\n    {\n        return this.scale(targetLength / this.length());\n    }\n\n    /**\n     * Rotate vector 90 degrees clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateClockwise()\n    {\n        const { x, y } = this;\n\n        //noinspection JSSuspiciousNameCombination\n        this.x = y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate vector 90 degrees counter clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateCounterClockwise()\n    {\n        const { x, y } = this;\n\n        this.x = -y;\n        //noinspection JSSuspiciousNameCombination\n        this.y = x;\n\n        return this;\n    }\n\n    /**\n     * Sets the coordinates of this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    set(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x = x;\n            this.y = y;\n        }\n        else\n        {\n            this.x = x.x;\n            this.y = x.y;\n        }\n\n    }\n}\n\nexport default Vector;\n","export const WATER = 0;\nexport const SAND = 1;\nexport const GRASS = 2;\nexport const FOREST = 3;\nexport const STONE = 4;\nexport const ICE = 5;\nexport const DIRT = 6;\nexport const PACKED_ICE = 7;\nexport const UNDEFINED = 8;\n\nexport const MATERIAL_NAMES = [\n    \"Water\", // WATER\n    \"Sand\", // SAND\n    \"Grass\", // GRASS\n    \"Forest\", // FOREST\n    \"Stone\", // STONE\n    \"Ice\", // ICE\n    \"Dirt\", // DIRT\n    \"Packed_Ice\", // PACKED_ICE\n];\nexport const CASE_NAMES = [\n    null,\n    \"case-1\",\n    \"case-2\",\n    \"case-3\",\n    \"case-4\",\n    \"case-5-1\",\n    \"case-6\",\n    \"case-7\",\n    \"case-8\",\n    \"case-9\",\n    \"case-10-1\",\n    \"case-11\",\n    \"case-12\",\n    \"case-13\",\n    \"case-14\",\n    \"case-15\",\n    \"case-m1\",\n    \"case-m2\",\n    \"case-m3\",\n    \"case-m4\",\n    \"case-5-2\",\n    \"case-10-2\"\n];\nexport const GROUND_COLORS = {\n    [WATER]: [0, 0.4, 0.8],\n    [SAND]: [0.8, 0.8, 0],\n    [GRASS]: [0, 0.7, 0],\n    [DIRT]: [0.5, 0.3, 0.1],\n    [FOREST]: [0.2, 0.5, 0.3],\n    [STONE]: [0.5, 0.5, 0.5],\n    [ICE]: [1, 1, 1],\n    [PACKED_ICE]: [1, 1, 1],\n    [UNDEFINED]: [1, 0, 1]\n}\nconst GROUND_ROUGHNESS = {\n    [WATER]: 0,\n    [SAND]: 1,\n    [GRASS]: 1,\n    [DIRT]: 1,\n    [FOREST]: 1,\n    [STONE]: 0.4,\n    [ICE]: 0.9,\n    [PACKED_ICE]: 0.8,\n    [UNDEFINED]: 0\n}\n\n\nexport const TAU = Math.PI * 2;\n\nexport const PHI = (1 + Math.sqrt(5)) / 2;\n","// Instantiate a loader\nimport { TextureLoader } from \"three\";\n\nconst loader = new TextureLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","import raf from \"raf\"\nimport Prando from \"prando\";\nimport SimplexNoise from \"simplex-noise\"\n// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport {\n    BufferAttribute,\n    BufferGeometry,\n    CubeCamera,\n    DirectionalLight,\n    DoubleSide,\n    Float32BufferAttribute,\n    FrontSide,\n    Mesh,\n    MeshStandardMaterial,\n    Object3D,\n    PerspectiveCamera,\n    PlaneBufferGeometry,\n    RepeatWrapping,\n    Scene,\n    Vector3,\n    WebGLRenderer\n} from \"three\"\n\nimport OrganicQuads, {\n    g_size,\n    g_x,\n    g_y,\n    t_isEdge,\n    t_n0,\n    t_n1,\n    t_n2,\n    t_n3,\n    t_size,\n    t_tile0,\n    t_tile1,\n    t_tile2,\n    t_tile3\n} from \"@fforw/organic-quads\";\nimport loadScene from \"./loadScene\";\nimport { Water } from \"three/examples/jsm/objects/Water.js\";\nimport { Sky } from \"three/examples/jsm/objects/Sky.js\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport loadTexture from \"./loadTexture\";\nimport { heightLimit } from \"./heightLimit\";\nimport { CASE_NAMES, FOREST, GRASS, GROUND_COLORS, MATERIAL_NAMES, SAND, STONE, UNDEFINED, WATER } from \"./constants\";\nimport { dump } from \"./util/dump\";\n\n\nconst TAU = Math.PI * 2;\n\nconst EFFECTS = true;\nconst HEIGHT_MAP = false;\n\nconst DETAIL = 15;\nconst MAX_HEIGHT = 300;\nconst QUARTER_HEIGHT = MAX_HEIGHT / 4;\nconst NOISE_SCALE_1 = 0.003;\nconst NOISE_SCALE_2 = 0.07;\nconst NOISE_SCALE_3 = 0.0007;\nconst GROUND_NOISE_SCALE = 0.005;\nconst NOISE_RATIO = 0.99;\nconst CLIFF_THRESHOLD = 10;\n\n// size of the outer square around our big hexagon\nconst SIZE = 1500;\n\n//////////////////////////////////////////////////////////////////////\n\nconst NUM_MATERIALS = 7;\n\nconst WATER_LIMIT = 2;\nconst SAND_LIMIT = 5.7;\nconst FOREST_LIMIT = 60;\n\nlet container, stats;\nlet camera, scene, renderer, light;\nlet controls, water;\n\nconst td_cx = 0;\nconst td_cy = 1;\nconst td_walkable = 2;\nconst td_cut0 = 3;\nconst td_cut1 = 4;\nconst td_cut2 = 5;\nconst td_cut3 = 6;\nconst td_size = 7;\n\nlet tileData;\nlet heightMap;\nlet materials;\n\nfunction updateCentroids()\n{\n    const {graph, tiles} = organicQuads;\n    const {length} = tiles;\n\n    let tileDataPos = 0;\n    for (let i = 0; i < length; i += t_size)\n    {\n        const n0 = tiles[i + t_n0];\n        const n1 = tiles[i + t_n1];\n        const n2 = tiles[i + t_n2];\n        const n3 = tiles[i + t_n3];\n\n        tileData[tileDataPos + td_cx] = (graph[n0 + g_x] + graph[n1 + g_x] + graph[n2 + g_x] + graph[n3 + g_x]) / 4;\n        tileData[tileDataPos + td_cy] = (graph[n0 + g_y] + graph[n1 + g_y] + graph[n2 + g_y] + graph[n3 + g_y]) / 4;\n        tileData[tileDataPos + td_walkable] = 0;\n        tileData[tileDataPos + td_cut0] = -1;\n        tileData[tileDataPos + td_cut1] = -1;\n        tileData[tileDataPos + td_cut2] = -1;\n        tileData[tileDataPos + td_cut3] = -1;\n\n        tileDataPos += td_size;\n    }\n\n}\n\n\nlet organicQuads, envMap;\n\nconst nOffset = Math.random() * 10;\nconst mOffset = Math.random() * 10;\n\nfunction heightFn(x0, z0)\n{\n    const distance = Math.sqrt(x0 * x0 + z0 * z0);\n\n    const w = noise.noise2D(x0 * NOISE_SCALE_3, mOffset + z0 * NOISE_SCALE_3) < 0.1 ? 0 : 0.6\n\n    const limit = heightLimit(1 - distance / (SIZE / 2), w);\n\n    return Math.max(0, (QUARTER_HEIGHT + (noise.noise2D(nOffset + x0 * NOISE_SCALE_1, z0 * NOISE_SCALE_1) * NOISE_RATIO + noise.noise2D(z0 * NOISE_SCALE_2, x0 * NOISE_SCALE_2 ) * (1 - NOISE_RATIO) + w) * QUARTER_HEIGHT) * limit);\n}\n\n\nconst tmpHeight = new Float64Array(5);\n\n\nfunction cutCliffs()\n{\n\n    const {graph, tiles} = organicQuads;\n\n    const {length} = tiles;\n\n    const tileDataFactor = td_size / t_size;\n\n    const tileCuts = [];\n\n    const cutNodes = new Set();\n\n    for (let i = 0; i < length; i += t_size)\n    {\n        // find indizes for connected centroid (values might be -1 if on the edge\n        const tileDataIndex = i * tileDataFactor;\n        const tileDataIndex0 = tiles[i + t_tile0] * tileDataFactor;\n        const tileDataIndex1 = tiles[i + t_tile1] * tileDataFactor;\n        const tileDataIndex2 = tiles[i + t_tile2] * tileDataFactor;\n        const tileDataIndex3 = tiles[i + t_tile3] * tileDataFactor;\n\n        tmpHeight[0] = heightFn(tileData[tileDataIndex], tileData[tileDataIndex + 1])\n\n        tmpHeight[1] =\n            tileDataIndex0 >= 0 ? heightFn(tileData[tileDataIndex0 + td_cx], tileData[tileDataIndex0 + td_cy]) : -1;\n        tmpHeight[2] =\n            tileDataIndex1 >= 0 ? heightFn(tileData[tileDataIndex1 + td_cx], tileData[tileDataIndex1 + td_cy]) : -1;\n        tmpHeight[3] =\n            tileDataIndex2 >= 0 ? heightFn(tileData[tileDataIndex2 + td_cx], tileData[tileDataIndex2 + td_cy]) : -1;\n        tmpHeight[4] =\n            tileDataIndex3 >= 0 ? heightFn(tileData[tileDataIndex3 + td_cx], tileData[tileDataIndex3 + td_cy]) : -1;\n\n        //console.log(\"HEIGHTS\", tmpHeight.slice())\n\n        let cutMask = 0;\n\n        if (tileDataIndex0 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[1]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 1;\n        }\n\n        if (tileDataIndex1 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[2]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 2;\n        }\n        if (tileDataIndex2 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[3]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 4;\n        }\n        if (tileDataIndex3 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[4]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 8;\n        }\n\n        if (cutMask !== 0)\n        {\n            for (let j = 0; j < 4; j++)\n            {\n                if (cutMask & (1 << j))\n                {\n                    const cut0 = j;\n                    const cut1 = j === 3 ? 0 : j + 1;\n\n                    const heightMapIndex0 = tiles[i + t_n0 + cut0] * heightIndexFactor;\n                    const heightMapIndex1 = tiles[i + t_n0 + cut1] * heightIndexFactor;\n\n                    const height = tmpHeight[0];\n\n                    const node0 = tiles[i + t_n0 + cut0];\n                    const node1 = tiles[i + t_n0 + cut1];\n\n                    cutNodes.add(node0)\n                    cutNodes.add(node1)\n\n                    tileData[tileDataIndex + td_cut0 + cut0] = height;\n                    tileData[tileDataIndex + td_cut0 + cut1] = height;\n\n                    const rnd = Math.random();\n                    if (rnd < 0.2)\n                    {\n                        heightMap[heightMapIndex0 + h_ground] = STONE;\n                    }\n                    else if (rnd < 0.4)\n                    {\n                        heightMap[heightMapIndex1 + h_ground] = STONE;\n                    }\n\n\n                    const other = tiles[i + t_tile0 + j];\n                    // mark our connection to the other tile as cut\n                    tiles[i + t_tile0 + j] = -1;\n\n                    let usInOther = -1;\n                    for (let k = 0; k < 4; k++)\n                    {\n                        if (\n                            tiles[other + t_tile0 + k] === i &&\n                            tileData[other * tileDataFactor + td_cut0 + k] === -1)\n                        {\n                            usInOther = i;\n                            break;\n                        }\n                    }\n                    if (usInOther !== -1)\n                    {\n                        tileCuts.push(0, i, other, cut0, cut1);\n                    }\n                }\n            }\n\n\n            for (let j = 0; j < 4; j++)\n            {\n                if (!(cutMask & (1 << j)))\n                {\n                    const prev = j === 0 ? 3 : j - 1;\n                    const next = j === 3 ? 0 : j + 1;\n\n                    const prevIsCut = cutMask & (1 << prev);\n                    const nextIsCut = cutMask & (1 << next);\n\n                    const other = tiles[i + t_tile0 + j];\n\n                    if (prevIsCut || nextIsCut)\n                    {\n                        if (prevIsCut && nextIsCut)\n                        {\n                            // full cut\n                            tileCuts.push(0, i, other, j, next);\n                        }\n                        else if (prevIsCut)\n                        {\n                            // triangle with two points on prev\n                            tileCuts.push(2, i, other, j, next);\n                        }\n                        else\n                        {\n                            // triangle with two points on next\n                            tileCuts.push(1, i, other, j, next);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (let cut of cutNodes)\n    {\n\n        for (let i = 0; i < length; i += t_size)\n        {\n            for (let j = 0; j < 4 ; j++)\n            {\n                const node = tiles[i + t_n0 + j];\n                if (node === cut)\n                {\n                    const tileDataIndex = i * tileDataFactor;\n\n                    if (tileData[tileDataIndex + td_cut0 + j] === -1)\n                    {\n                        tileData[tileDataIndex + td_cut0 + j] = heightFn(tileData[tileDataIndex + td_cx], tileData[tileDataIndex + td_cy])\n                    }\n                }\n            }\n        }\n    }\n\n\n    return tileCuts;\n}\n\nconst tc_case = 0;\nconst tc_tile0 = 1;\nconst tc_tile1 = 2;\nconst tc_cut0 = 3;\nconst tc_cut1 = 4;\nconst tc_size = 5;\n\nconst h_height = 0;\nconst h_ground = 1;\nconst h_cuts = 2;\nconst h_size = 3;\n\nlet tileCuts;\n\nfunction createScene()\n{\n\n    organicQuads = new OrganicQuads({\n        numberOfRings: DETAIL,\n        width: SIZE,\n        height: SIZE,\n        graphUserData: 1,\n        // weightFunction: (x0,y0,x1,y1) => {\n        //\n        //     const dx = x1 - x0;\n        //     const dy = y1 - y0;\n        //     const dz = heightFn(x0,y0) - heightFn(x1,y1);\n        //\n        //     return Math.sqrt(dx * dx + dy * dy + dz * dz);\n        //\n        // }\n    });\n\n    const {graph, tiles, config} = organicQuads;\n    const {length} = graph;\n\n    const heightMapFactor = h_size / g_size;\n\n    heightMap = new Float64Array(length * heightMapFactor);\n    let pos = 0;\n    for (let i = 0; i < length; i += g_size)\n    {\n        heightMap[pos + h_height] = heightFn(graph[i + g_x], graph[i + g_y]);\n        heightMap[pos + h_ground] = UNDEFINED;\n\n        pos += h_size;\n    }\n\n    tileData = new Float64Array((organicQuads.tiles.length / t_size) * td_size);\n    updateCentroids()\n    tileCuts = cutCliffs()\n\n    console.log({tileCuts: group(tileCuts, tc_size)})\n\n    testWalkability();\n    generateGround();\n\n}\n\n\nfunction generateGround()\n{\n\n    const {graph} = organicQuads;\n    const {length} = graph;\n\n    let heightMapPos = 0;\n    let nodePos = 0;\n    for (let i = 0; i < length; i += g_size)\n    {\n\n        const x0 = graph[nodePos + g_x];\n        const y0 = heightMap[heightMapPos + h_height];\n        //const y0 = heightMap[heightIndex0 + h_height];\n        const z0 = graph[nodePos + g_y];\n\n        const ground = heightMap[heightMapPos + h_ground];\n\n        if (ground === UNDEFINED)\n        {\n            if (y0 < WATER_LIMIT)\n            {\n                heightMap[heightMapPos + h_ground] = WATER;\n            }\n            else if (y0 < SAND_LIMIT)\n            {\n                heightMap[heightMapPos + h_ground] = SAND;\n            }\n            else\n            {\n                const n = noise.noise2D(x0 * GROUND_NOISE_SCALE, z0 * GROUND_NOISE_SCALE);\n\n                if (y0 < FOREST_LIMIT)\n                {\n                    heightMap[heightMapPos + h_ground] = n < 0.2 ? GRASS : FOREST;\n                }\n                else\n                {\n                    heightMap[heightMapPos + h_ground] = n < 0.2 ? FOREST : GRASS;\n                }\n            }\n        }\n\n        heightMapPos += h_size;\n        nodePos += g_size;\n    }\n\n}\n\n\nfunction testWalkability()\n{\n    const tileIndex = findEdgeTile();\n\n    console.log(\"Starting to walk at #\", tileIndex / t_size)\n\n    const visited = new Set();\n    walkRecursive(tileIndex, visited);\n}\n\n\nfunction findEdgeTile()\n{\n    const {tiles} = organicQuads;\n\n    const {length} = tiles;\n\n    for (let i = 0; i < length; i += t_size)\n    {\n        if (tiles[i + t_isEdge])\n        {\n            return i;\n        }\n    }\n    throw new Error(\"No edge!?\")\n}\n\n\nconst tileDataFactor = td_size / t_size;\n\n\nfunction walkRecursive(tileIndex, visited)\n{\n    if (tileIndex >= 0 && !visited.has(tileIndex))\n    {\n        visited.add(tileIndex);\n\n        const {tiles} = organicQuads;\n\n        tileData[tileIndex * tileDataFactor + td_walkable] = 1;\n\n        walkRecursive(tiles[tileIndex + t_tile0], visited);\n        walkRecursive(tiles[tileIndex + t_tile1], visited);\n        walkRecursive(tiles[tileIndex + t_tile2], visited);\n        walkRecursive(tiles[tileIndex + t_tile3], visited);\n\n    }\n}\n\n\nconst rng = new Prando(\"TEST\")\n\nconst noise = new SimplexNoise(() => rng.next());\n\n\nfunction checkNaN(value, msg)\n{\n    if (isNaN(value))\n    {\n        debugger;\n        throw new Error(msg + \": value is NaN\")\n    }\n}\n\n\nfunction addHeightMap()\n{\n    const geometry = new BufferGeometry();\n    geometry.name = \"Landscape-Debug\"\n\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n\n    // generate vertices, normals and color data for a simple grid geometry\n    const { graph, tiles } = organicQuads;\n\n    const { length } = tiles;\n\n    console.log(\"Height map for \", length / t_size, \" tiles\");\n\n    const UNDEFINED_COLOR = [1, 0, 1];\n\n    // const map = {};\n    //\n    // const insert = (a,b) => {\n    //     if (a > b)\n    //     {\n    //         let h = a;\n    //         a=b;\n    //         b=h;\n    //     }\n    //\n    //     const key = a + \":\" + b;\n    //\n    //     const v = map[key];\n    //     map[key] =  v === undefined ? 1 : v + 1;\n    // }\n\n    const getColor = (hIdx) => {\n\n        const tileDataIndex = hIdx * td_size / h_size;\n\n        const ground = heightMap[hIdx + h_ground];\n        const color = GROUND_COLORS[ground];\n        // if (ground !== STONE && ground !== SAND && tileData[tileDataIndex + td_walkable])\n        // {\n        //     return GROUND_COLORS[GRASS];\n        // }\n\n        return color || UNDEFINED_COLOR;\n    };\n\n    let tileDataIndex = 0;\n    for (let i = 0; i < length; i += t_size)\n    {\n        // node indizes for our quad\n        const n0 = tiles[i + t_n0];\n        const n1 = tiles[i + t_n1];\n        const n2 = tiles[i + t_n2];\n        const n3 = tiles[i + t_n3];\n\n        // const e0 = tiles[i + t_tile0]\n        // const e1 = tiles[i + t_tile1]\n        // const e2 = tiles[i + t_tile2]\n        // const e3 = tiles[i + t_tile3]\n        // e0 >= 0 && insert(i * tileFactor, e0 * tileFactor)\n        // e1 >= 0 && insert(i * tileFactor, e1 * tileFactor)\n        // e2 >= 0 && insert(i * tileFactor, e2 * tileFactor)\n        // e3 >= 0 && insert(i * tileFactor, e3 * tileFactor)\n\n        // equivalent height map indizes\n        const heightIndex0 = n0 * heightIndexFactor;\n        const heightIndex1 = n1 * heightIndexFactor;\n        const heightIndex2 = n2 * heightIndexFactor;\n        const heightIndex3 = n3 * heightIndexFactor;\n\n        const x0 = graph[n0 + g_x];\n        const y0 = tileData[tileDataIndex + td_cut0] === -1 ?\n            heightMap[heightIndex0 + h_height] :\n            tileData[tileDataIndex + td_cut0];\n        //const y0 = heightMap[heightIndex0 + h_height];\n        const z0 = graph[n0 + g_y];\n\n        const x1 = graph[n1 + g_x];\n        const y1 = tileData[tileDataIndex + td_cut1] === -1 ?\n            heightMap[heightIndex1 + h_height] :\n            tileData[tileDataIndex + td_cut1];\n        //const y1 = heightMap[heightIndex1 + h_height];\n        const z1 = graph[n1 + g_y];\n\n        const x2 = graph[n2 + g_x];\n        const y2 = tileData[tileDataIndex + td_cut2] === -1 ?\n            heightMap[heightIndex2 + h_height] :\n            tileData[tileDataIndex + td_cut2];\n        //const y2 = heightMap[heightIndex2 + h_height]\n        const z2 = graph[n2 + g_y];\n\n        const x3 = graph[n3 + g_x];\n        const y3 = tileData[tileDataIndex + td_cut3] === -1 ?\n            heightMap[heightIndex3 + h_height] :\n            tileData[tileDataIndex + td_cut3];\n        //const y3 = heightMap[heightIndex3 + h_height];\n        const z3 = graph[n3 + g_y];\n\n        const ax = (x0 - x1);\n        const ay = (y0 - y1);\n        const az = (z0 - z1);\n        const bx = (x2 - x1);\n        const by = (y2 - y1);\n        const bz = (z2 - z1);\n        const cx = (x3 - x1);\n        const cy = (y3 - y1);\n        const cz = (z3 - z1);\n\n        // normal vector based on points 0, 1 and 2\n        const n0x = ay * bz - az * by;\n        const n0y = az * bx - ax * bz;\n        const n0z = ax * by - ay * bx;\n\n        // normal vector based on points 0, 1 and 3\n        const n1x = ay * cz - az * cy;\n        const n1y = az * cx - ax * cz;\n        const n1z = ax * cy - ay * cx;\n\n        // average and renormalize\n        let nx = (n0x + n1x) / 2;\n        let ny = (n0y + n1y) / 2;\n        let nz = (n0z + n1z) / 2;\n\n        const f = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz);\n        nx *= f;\n        ny *= f;\n        nz *= f;\n\n        // const cf = 4 / MAX_HEIGHT;\n        //\n        // colors.push( y3 * cf,1 - y3 * cf, 0);\n        // colors.push( y1 * cf,1 - y1 * cf, 0);\n        // colors.push( y1 * cf,1 - y1 * cf, 0);\n        // colors.push( y3 * cf,1 - y3 * cf, 0);\n        // colors.push( y2 * cf,1 - y2 * cf, 0);\n\n        const col0 = getColor(heightIndex0);\n        const col1 = getColor(heightIndex1);\n        const col2 = getColor(heightIndex2);\n        const col3 = getColor(heightIndex3);\n\n        if (\n            !(col0 === GROUND_COLORS[WATER] &&\n              col1 === GROUND_COLORS[WATER] &&\n              col2 === GROUND_COLORS[WATER] &&\n              col3 === GROUND_COLORS[WATER])\n        )\n        {\n            vertices.push(x0, y0, z0);\n            vertices.push(x3, y3, z3);\n            vertices.push(x1, y1, z1);\n\n            vertices.push(x1, y1, z1);\n            vertices.push(x3, y3, z3);\n            vertices.push(x2, y2, z2);\n\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n\n            colors.push(col0[0], col0[1], col0[2]);\n            colors.push(col3[0], col3[1], col3[2]);\n            colors.push(col1[0], col1[1], col1[2]);\n\n            colors.push(col1[0], col1[1], col1[2]);\n            colors.push(col3[0], col3[1], col3[2]);\n            colors.push(col2[0], col2[1], col2[2]);\n        }\n\n        tileDataIndex += td_size;\n\n    }\n\n    //const values = Object.values(map);\n    //console.log(\"SYMMETRY-CHECK\", map, values.filter(n => n === 1).length, \"of\", values.length);\n\n    //console.log(\"MAX DELTA\", max);\n\n    //\n    console.log({vertices, normals, colors})\n\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n\n    const material = new MeshStandardMaterial({\n        vertexColors: true,\n        side: DoubleSide,\n        roughness: 0.5\n    });\n\n    // material.onBeforeCompile = shader => {\n    //\n    //     const {vertexShader,fragmentShader,uniforms} = shader;\n    //\n    //     console.log(\"--- VERT:\\n\", vertexShader);\n    //     console.log(\"--- FRAG:\\n\", fragmentShader);\n    //     console.log({uniforms})\n    // };\n\n    const mesh = new Mesh(geometry, material);\n\n    mesh.position.set(0, -WATER_LIMIT, 0);\n\n    // var wireframe = new WireframeGeometry( geometry );\n    //\n    // var line = new LineSegments( wireframe );\n    // line.material.depthTest = false;\n    // line.material.opacity = 0.25;\n    // line.material.transparent = true;\n    //\n    //\n    // scene.add( line );\n    scene.add(mesh);\n\n}\n\n\nconst skyParameters = {\n    distance: 1000,\n    inclination: 0.1,\n    azimuth: 0.1\n};\n\n\nfunction updateSun()\n{\n\n    if (!sky)\n    {\n        return;\n    }\n\n    const theta = Math.PI * (skyParameters.inclination - 0.5);\n    const phi = 2 * Math.PI * (skyParameters.azimuth - 0.5);\n\n    light.position.x = skyParameters.distance * Math.cos(phi);\n    light.position.y = skyParameters.distance * Math.sin(phi) * Math.sin(theta);\n    light.position.z = skyParameters.distance * Math.sin(phi) * Math.cos(theta);\n\n    sky.material.uniforms[\"sunPosition\"].value = light.position.copy(light.position);\n    water && water.material.uniforms[\"sunDirection\"].value.copy(light.position).normalize();\n\n    cubeCamera.update(renderer, sky);\n\n}\n\n\nlet cubeCamera, sky;\n\n\nfunction init()\n{\n\n    createScene();\n\n    container = document.getElementById(\"container\");\n\n    //\n\n    renderer = new WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    \n    container.appendChild(renderer.domElement);\n\n    //\n\n    scene = new Scene();\n\n    camera = new PerspectiveCamera(55, window.innerWidth / window.innerHeight, 1, 20000);\n    camera.position.set(250, 250, 1000);\n\n    //\n\n    light = new DirectionalLight(\"#fff8d5\", 0.8);\n    scene.add(light);\n\n    cubeCamera = new CubeCamera(0.2, 1, 512);\n    // cubeCamera.renderTarget.texture.generateMipmaps = true;\n    // cubeCamera.renderTarget.texture.minFilter = LinearMipmapLinearFilter;\n\n    scene.background = cubeCamera.renderTarget;\n\n    // Water\n\n    const waterGeometry = new PlaneBufferGeometry(30000, 30000);\n    if (EFFECTS)\n    {\n        water = new Water(\n            waterGeometry,\n            {\n                textureWidth: 512,\n                textureHeight: 512,\n                waterNormals,\n                alpha: 0.6,\n                sunDirection: light.position.clone().normalize(),\n                sunColor: \"#fff8d5\",\n                waterColor: \"#000e1e\",\n                distortionScale: 2.5,\n                clipBias: 0.0001,\n                fog: true\n            }\n        );\n        water.rotation.x = -Math.PI / 2;\n        scene.add(water);\n    }\n    else\n    {\n        const material = new MeshStandardMaterial({\n            side: FrontSide,\n            color: \"#048\",\n            envMap: cubeCamera.renderTarget.texture,\n            roughness: 0.0\n        });\n\n        const mesh = new Mesh(waterGeometry, material);\n        mesh.rotation.x = -Math.PI / 2;\n        //scene.add(mesh)\n    }\n\n    // Skybox\n\n    if (EFFECTS)\n    {\n        sky = new Sky();\n\n\n        // uniforms[\"turbidity\"].value = 5;\n        // uniforms[\"rayleigh\"].value = 1.2;\n        // uniforms[\"luminance\"].value = 1;\n        // uniforms[\"mieCoefficient\"].value = 0.05;\n        // uniforms[\"mieDirectionalG\"].value = 0.9;\n\n        envMap = cubeCamera.renderTarget.texture\n\n        updateSun();\n    }\n    else\n    {\n        envMap = null;\n    }\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    //controls.maxPolarAngle = Math.PI * 0.45;\n    controls.maxPolarAngle = Math.PI;\n    controls.target.set(0, 0, 0);\n    controls.minDistance = 0.0;\n    controls.maxDistance = 1500.0;\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.02;\n    controls.update();\n\n    // stats = new Stats();\n    // container.appendChild( stats.dom );\n\n    // GUI\n\n    //const gui = new GUI();\n\n    // const folder = gui.addFolder( \"Sky\" );\n    // folder.add( skyParameters, \"inclination\", 0, 0.5, 0.0001 ).onChange( updateSun );\n    // folder.add( skyParameters, \"azimuth\", 0, 1, 0.0001 ).onChange( updateSun );\n    // folder.open();\n    //\n    // const uniforms = water.material.uniforms;\n    //\n    // const folder = gui.addFolder( \"Water\" );\n    // folder.add( uniforms.distortionScale, \"value\", 0, 8, 0.1 ).name( \"distortionScale\" );\n    // folder.add( uniforms.size, \"value\", 0.1, 10, 0.1 ).name( \"size\" );\n    // folder.add( uniforms.alpha, \"value\", 0.9, 1, .001 ).name( \"alpha\" );\n    // folder.open();\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n\n    ////////////////\n\n    if (HEIGHT_MAP)\n    {\n        addHeightMap();\n    }\n    else\n    {\n        addMarchingSquareObjects(marchingSquaresArray);\n    }\n\n}\n\n\nlet materialCompile = 0;\nlet materialGenerate = 0;\n\nconst dummy = new Object3D();\n\nfunction addMarchingSquareObjects(marchingSquaresArray)\n{\n\n    const vertexMap = new Map();\n    let vertexCount = 0;\n\n    const position = [];\n    const uv = [];\n    const normal = [];\n\n    const insert = (x,y,z, nx, ny, nz, u, v) => {\n\n\n        x = Math.round(x*16)/16;\n        y = Math.round(y*16)/16;\n        z = Math.round(z*16)/16;\n\n        nx = Math.round(nx*1024)/1024;\n        ny = Math.round(ny*1024)/1024;\n        nz = Math.round(nz*1024)/1024;\n\n        u = Math.round(u*4096)/4096;\n        v = Math.round( v*4096)/4096;\n\n        // const key = ((x*10)|0) + \",\" + ((y*10)|0) + \",\" + ((z*10)|0) + \"/\" +\n        //             ((nx*e)|0) + \":\" + ((ny*1000)|0) + \":\" + ((nz*1000)|0) + \"/\" +\n        //             ((u*4096)|0) + \":\" + ((v*4096)|0);\n\n        const key = x + \",\" + y + \",\" + z + \"/\" + nx + \",\" + ny + \",\" + nz + \"/\" + u  + \",\" + v;\n\n        const index = vertexMap.get(key);\n        if (index === undefined)\n        {\n            const newIndex = vertexCount++;\n            vertexMap.set(key, newIndex);\n\n            position.push(x,y,z);\n            uv.push(u,v);\n            normal.push(nx,ny,nz);\n\n            return newIndex;\n        }\n        return index;\n    }\n\n\n    const facesByMaterial = new Array(NUM_MATERIALS);\n\n    for (let currGround = WATER + 1; currGround < NUM_MATERIALS; currGround++)\n    {\n        const array = createMarchingSquares(currGround, insert, marchingSquaresArray);\n        if (array.length)\n        {\n            facesByMaterial[currGround] = array;\n        }\n    }\n\n    const { graph, tiles } = organicQuads;\n\n    let faces = facesByMaterial[STONE];\n    if (!faces)\n    {\n        faces = facesByMaterial[STONE] = [];\n    }\n\n    let tileDataIndex = 0;\n    for (let i = 0; i < tileCuts.length; i += tc_size)\n    {\n        const cutCase = tileCuts[i + tc_case];\n        const tileA = tileCuts[i + tc_tile0];\n        const tileB = tileCuts[i + tc_tile1];\n        const cut0 = tileCuts[i + tc_cut0];\n        const cut1 = tileCuts[i + tc_cut1];\n\n        const tileDataIndexA = tileA * tileDataFactor;\n        const tileDataIndexB = tileB * tileDataFactor;\n\n        let otherCut0 = -1, otherCut1 = -1\n\n        let node0 = tiles[tileA + t_n0 + cut0];\n        let node1 = tiles[tileA + t_n0 + cut1];\n\n        for (let k = 0; k < 4; k++)\n        {\n            if (tiles[tileB + t_n0 + k] === node0)\n            {\n                otherCut0 = k;\n                if (otherCut1 !== -1)\n                {\n                    break;\n                }\n            }\n            else if (tiles[tileB + t_n0 + k] === node1)\n            {\n                otherCut1 = k;\n                if (otherCut0 !== -1)\n                {\n                    break;\n                }\n            }\n        }\n\n        if (otherCut0 !== -1 && otherCut1 !== -1)\n        {\n            const x0 = graph[node0 + g_x];\n            const y0 = tileData[tileDataIndexA + td_cut0 + cut0]\n            const z0 = graph[node0 + g_y];\n\n            const x1 = graph[node1 + g_x];\n            const y1 = tileData[tileDataIndexA + td_cut0 + cut1]\n            const z1 = graph[node1 + g_y];\n\n            const x3 = x0;\n            const y3 = tileData[tileDataIndexB + td_cut0 + otherCut0]\n            const z3 = z0;\n\n            const x2 = x1;\n            const y2 = tileData[tileDataIndexB + td_cut0 + otherCut1]\n            const z2 = z1;\n\n\n            switch(cutCase)\n            {\n                case 0:\n                {\n                    const ax = (x0 - x1);\n                    const ay = (y0 - y1);\n                    const az = (z0 - z1);\n                    const bx = (x2 - x1);\n                    const by = (y2 - y1);\n                    const bz = (z2 - z1);\n\n                    // normal vector based on points 0, 1 and 2\n                    const nx = ay * bz - az * by;\n                    const ny = az * bx - ax * bz;\n                    const nz = ax * by - ay * bx;\n\n                    const indexA = insert(x0,y0,z0, nx,ny,nz, 0,0);\n                    const indexB = insert(x1,y1,z1, nx,ny,nz, 0,1);\n                    const indexC = insert(x2,y2,z2, nx,ny,nz, 1,1);\n                    const indexD = insert(x3,y3,z3, nx,ny,nz, 1,0);\n\n\n                    faces.push(indexB, indexA, indexC)\n                    faces.push(indexC, indexA, indexD)\n                    break;\n                }\n                case 1:\n                {\n                    const ax = (x0 - x1);\n                    const ay = (y0 - y1);\n                    const az = (z0 - z1);\n                    const bx = (x2 - x1);\n                    const by = (y2 - y1);\n                    const bz = (z2 - z1);\n\n                    // normal vector based on points 0, 1 and 2\n                    const nx = ay * bz - az * by;\n                    const ny = az * bx - ax * bz;\n                    const nz = ax * by - ay * bx;\n\n                    const indexA = insert(x0,y0,z0, nx,ny,nz, 0,0);\n                    const indexB = insert(x1,y1,z1, nx,ny,nz, 0,1);\n                    const indexC = insert(x2,y2,z2, nx,ny,nz, 1,1);\n\n                    faces.push(indexA, indexB, indexC)\n                    break;\n                }\n                case 2:\n                {\n                    const ax = (x0 - x3);\n                    const ay = (y0 - y3);\n                    const az = (z0 - z3);\n                    const bx = (x2 - x3);\n                    const by = (y2 - y3);\n                    const bz = (z2 - z3);\n\n                    // normal vector based on points 0, 1 and 2\n                    const nx = ay * bz - az * by;\n                    const ny = az * bx - ax * bz;\n                    const nz = ax * by - ay * bx;\n\n                    const indexA = insert(x0,y0,z0, nx,ny,nz, 0,0);\n                    const indexC = insert(x2,y2,z2, nx,ny,nz, 1,1);\n                    const indexD = insert(x3,y3,z3, nx,ny,nz, 1,0);\n\n                    faces.push(indexA, indexC, indexD)\n\n                    break;\n                }\n            }\n\n        }\n        else\n        {\n            console.log(\"No two cuts for\", tileA, tileB, \"=>\", otherCut0, otherCut1)\n        }\n\n\n    }\n\n    //console.log({facesByMaterial, position, normal, uv});\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new BufferAttribute(new Float32Array(position), 3, false));\n    geometry.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normal), 3, false));\n    geometry.setAttribute(\"uv\", new BufferAttribute(new Float32Array(uv), 2, false));\n\n    let start = 0;\n    const meshMaterials = [];\n\n    let index = [];\n\n    for (let i = 0; i < facesByMaterial.length; i++)\n    {\n        const faces = facesByMaterial[i];\n        if (faces)\n        {\n            index = index.concat(faces);\n\n            const numTris = faces.length;\n            //console.log(\"geometry.addGroup(\",start, numTris, meshMaterials.length,\")\");\n            geometry.addGroup(start, numTris, meshMaterials.length);\n\n            meshMaterials.push(\n                materials[i].clone()\n            )\n\n            start += numTris;\n        }\n    }\n\n    geometry.setIndex(index);\n\n    const terrain = new Mesh(geometry, meshMaterials);\n    scene.add(terrain);\n}\n\nconst heightIndexFactor = h_size / g_size;\n\nconst pos = new Vector3();\nconst vX1 = new Vector3();\nconst vX2 = new Vector3();\nconst vY1 = new Vector3();\n\nconst vAxisStart = new Vector3();\nconst vAxisEnd = new Vector3();\nconst transformed = new Vector3();\nconst normal = new Vector3();\nconst vUp = new Vector3();\n\nfunction createMarchingSquares(ground, insert, marchingSquaresArray)\n{\n    const {graph, tiles} = organicQuads;\n\n    const {length} = tiles;\n\n    const faces = [];\n    let tileDataIndex = 0;\n    for (let i = 0; i < length; i += t_size)\n    {\n        // node indizes for our quad\n        const n0 = tiles[i + t_n0];\n        const n1 = tiles[i + t_n1];\n        const n2 = tiles[i + t_n2];\n        const n3 = tiles[i + t_n3];\n\n        // equivalent height map indizes\n        const heightIndex0 = n0 * heightIndexFactor;\n        const heightIndex1 = n1 * heightIndexFactor;\n        const heightIndex2 = n2 * heightIndexFactor;\n        const heightIndex3 = n3 * heightIndexFactor;\n\n        // const centroidX = tileData[tileDataIndex + td_cx];\n        // const centroidY = heightFn(tileData[tileDataIndex + td_cx], tileData[tileDataIndex + td_cy]);\n        // const centroidZ = tileData[tileDataIndex + td_cy];\n\n        const x0 = graph[n0 + g_x];\n        const y0 = tileData[tileDataIndex + td_cut0] === -1 ?\n            heightMap[heightIndex0 + h_height] :\n            tileData[tileDataIndex + td_cut0];\n        const z0 = graph[n0 + g_y];\n\n        const x1 = graph[n1 + g_x];\n        const y1 = tileData[tileDataIndex + td_cut1] === -1 ?\n            heightMap[heightIndex1 + h_height] :\n            tileData[tileDataIndex + td_cut1];\n        const z1 = graph[n1 + g_y];\n\n        const x2 = graph[n2 + g_x];\n        const y2 = tileData[tileDataIndex + td_cut2] === -1 ?\n            heightMap[heightIndex2 + h_height] :\n            tileData[tileDataIndex + td_cut2];\n        const z2 = graph[n2 + g_y];\n\n        const x3 = graph[n3 + g_x];\n        const y3 = tileData[tileDataIndex + td_cut3] === -1 ?\n            heightMap[heightIndex3 + h_height] :\n            tileData[tileDataIndex + td_cut3];\n        const z3 = graph[n3 + g_y];\n\n        const ax = (x0 - x1);\n        const ay = (y0 - y1);\n        const az = (z0 - z1);\n        const bx = (x2 - x1);\n        const by = (y2 - y1);\n        const bz = (z2 - z1);\n        const cx = (x3 - x1);\n        const cy = (y3 - y1);\n        const cz = (z3 - z1);\n\n        // normal vector based on points 0, 1 and 2\n        const n0x = ay * bz - az * by;\n        const n0y = az * bx - ax * bz;\n        const n0z = ax * by - ay * bx;\n\n        // normal vector based on points 0, 1 and 3\n        const n1x = ay * cz - az * cy;\n        const n1y = az * cx - ax * cz;\n        const n1z = ax * cy - ay * cx;\n\n        // average with world up and renormalize\n        let upX = (n0x + n1x) / 3;\n        let upY = (n0y + n1y + 1) / 3;\n        let upZ = (n0z + n1z) / 3;\n\n        const f = 1 / Math.sqrt(upX * upX + upY * upY + upZ * upZ);\n        upX *= f;\n        upY *= f;\n        upZ *= f;\n\n        const g1 = heightMap[heightIndex0 + h_ground];\n        const g2 = heightMap[heightIndex3 + h_ground];\n        const g4 = heightMap[heightIndex2 + h_ground];\n        const g8 = heightMap[heightIndex1 + h_ground];\n\n        let tileCase = (\n            ( g1 === ground ? 1 : 0) +\n            ( g2 === ground ? 2 : 0) +\n            ( g4 === ground ? 4 : 0) +\n            ( g8 === ground ? 8 : 0)\n        );\n\n\n        if (tileCase !== 0)\n        {\n            // fix multi-color gaps\n            if (tileCase === 1 && g2 !== g8)\n            {\n                tileCase = 16;\n            }\n            else if (tileCase === 2 && g4 !== g1)\n            {\n                tileCase = 17;\n            }\n            else if (tileCase === 4 && g8 !== g2)\n            {\n                tileCase = 18;\n            }\n            else if (tileCase === 8 && g1 !== g4)\n            {\n                tileCase = 19;\n            }\n\n            if (tileCase === 5 && (g1 === GRASS || g1 === STONE))\n            {\n                tileCase = 20;\n            }\n\n            if (tileCase === 10 && (g2 === GRASS || g2 === STONE))\n            {\n                tileCase = 21;\n            }\n\n            pos.set(x0, y0, z0);\n            vX1.set(x3 - x0, y3 - y0, z3 - z0);\n            vX2.set(x2 - x1, y2 - y1, z2 - z1);\n            vY1.set(x1 - x0, y1 - y0, z1 - z0);\n\n            const geo = marchingSquaresArray[tileCase];\n\n            const index = geo.getIndex().array;\n            const positions = geo.getAttribute(\"position\").array;\n            const uvs = geo.getAttribute(\"uv\").array;\n            const normals = geo.getAttribute(\"normal\").array;\n\n            //console.log({index, positions, normals, uvs})\n\n            for (let j = 0; j < index.length; j ++)\n            {\n                const k = index[j];\n\n                const idx = k * 3;\n                const uvIdx = k * 2;\n\n                const x = (positions[idx] + 0.5)* 1.01;\n                const y = (positions[idx + 1]+ 0.5)* 1.01;\n                const z = (positions[idx + 2]+ 0.5) * 1.01;\n\n                const nx = normals[idx];\n                const ny = normals[idx + 1];\n                const nz = normals[idx + 2];\n\n                vAxisStart.copy(vX1).multiplyScalar(x).add(pos);\n                vAxisEnd.copy(vX2).multiplyScalar(x).add(pos).add(vY1);\n\n                vUp.set(upX, upY, upZ).multiplyScalar(z)\n                transformed.copy(vAxisEnd).sub(vAxisStart).multiplyScalar(y).add(vAxisStart).add(vUp);\n\n                // so we act for a moment as if our normal vector was an actual position above the face and we transform\n                // that point just like the geometry\n                vAxisStart.copy(vX1).multiplyScalar(x + nx).add(pos);\n                vAxisEnd.copy(vX2).multiplyScalar(x + nx).add(pos).add(vY1);\n\n                vUp.set(upX, upY, upZ).multiplyScalar(z + nz)\n                normal.copy(vAxisEnd).sub(vAxisStart).multiplyScalar(y + ny).add(vAxisStart).add(vUp);\n\n                //  and then we substract the projected vertex and renormalize because our space is warped.\n                normal.sub(transformed).normalize();\n\n                faces.push(\n                    insert(\n                    transformed.x,\n                    transformed.y,\n                    transformed.z,\n                    normal.x,\n                    normal.y,\n                    normal.z,\n                    uvs[uvIdx],\n                    uvs[uvIdx + 1]\n                ))\n            }\n        }\n\n        tileDataIndex += td_size;\n    }\n    return faces;\n}\n\n\nfunction onWindowResize()\n{\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n}\n\n\nlet inclinationCount = 0;\n\n\nfunction mainLoop()\n{\n\n    render();\n    //stats.update();\n\n    //skyParameters.inclination = -0.012 + Math.sin(inclinationCount += 0.01) * 0.524;\n\n    updateSun();\n\n    controls.update()\n    raf(mainLoop);\n\n}\n\n\nlet first = true;\n\nfunction render()\n{\n\n    const time = performance.now() * 0.0001;\n\n    // sphere.position.y = Math.sin( time ) * 5 + 1;\n    // sphere.rotation.x = time * 0.5;\n    // sphere.rotation.z = time * 0.51;\n\n    if (water)\n    {\n        water.position.y = WATER_LIMIT - 0.1 + Math.sin(time) * 0.4;\n        water.material.uniforms[\"time\"].value += 1.0 / 60.0;\n    }\n\n    renderer.render(scene, camera);\n\n    if(first)\n    {\n        //console.log({materialCompile})\n    }\n\n    first = false;\n}\n\n\nlet waterNormals, marchingSquaresArray;\n\n\nfunction extractMarchingSquares(scene)\n{\n    const {children} = scene;\n\n    const array = new Array(CASE_NAMES.length);\n\n    for (let i = 0; i < children.length; i++)\n    {\n        const kid = children[i];\n\n        const index = CASE_NAMES.indexOf(kid.name);\n        if (index >= 0)\n        {\n            array[index] = kid.geometry;\n        }\n    }\n    return array;\n}\n\n\nPromise.all([\n    loadScene(\"assets/tiles.glb\"),\n    loadScene(\"assets/ground.glb\"),\n    loadScene(\"assets/ms.glb\"),\n    //loadScene(\"assets/ms-raised.glb\"),\n    loadTexture(\"assets/waternormals.jpg\")\n])\n    .then(([\n               tiles,\n               ground,\n               marchingSquares,\n               //marchingSquaresRaised,\n               tWaterNormals\n           ]) => {\n\n        //scene.add( tiles.scene );\n\n        dump( ground.scene, \"tiles: \")\n\n        materials = MATERIAL_NAMES.map(n => {\n            return ground.scene.children.find(kid => kid.name === n).material;\n        })\n\n        marchingSquaresArray = extractMarchingSquares(marchingSquares.scene);\n\n        //console.log(\"INDEXED\", marchingSquaresArray.map(ms => ({index:ms.index,attributes: ms.attributes})))\n\n        //const msMapRaised = extractMarchingSquares(marchingSquaresRaised.scene);\n        // console.log({marchingSquaresArray, msMapRaised})\n\n        //dump(marchingSquares.scene, \"ms-normal: \");\n        //dump(marchingSquaresRaised.scene, \"ms-raised: \");\n\n\n        // console.log(\"Scene Objects\", tiles.scene.children.map(kid => kid.name).join(\", \"))\n        //\n        // const obj  = tiles.scene.children.find(\n        //     kid => kid.name === \"tree_default\"\n        // );\n\n        tWaterNormals.wrapS = tWaterNormals.wrapT = RepeatWrapping;\n        waterNormals = tWaterNormals;\n\n        // tiles.animations; // Array<AnimationClip>\n        // tiles.scene; // Group\n        // tiles.scenes; // Array<Group>\n        // tiles.cameras; // Array<Camera>\n        // tiles.asset; // Object\n\n        // ReactDOM.render(\n        //     <Game/>,\n        //     document.getElementById(\"root\")\n        // )\n\n        init();\n        mainLoop();\n    })\n\n\n\nfunction group(array, count)\n{\n    const out = new Array(array.length / count);\n    for (let i = 0; i < out.length; i++)\n    {\n        out[i] = array.slice(i * count, i * count + count );\n    }\n\n    return out;\n}\n\n","export function dump(obj, level = \"\")\n{\n    const {type} = obj;\n    if (type === \"Group\")\n    {\n        console.log(level + \"GROUP\", obj.name)\n\n        const nextLevel = level + \"    \"\n\n        const {children} = obj;\n        for (let i = 0; i < children.length; i++)\n        {\n            dump(children[i], nextLevel);\n        }\n    }\n    else if (type === \"Mesh\")\n    {\n        console.log(level + \"MESH\", obj.name)\n    }\n}\n","\n// Instantiate a loader\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nconst loader = new GLTFLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","export function heightLimit(x, w = 0)\n{\n    const beach = 0.05;\n    const beachSquared = beach * beach;\n\n    const mountain = w ? 0.4 : 0.6;\n    const mountain_mid = w ? 0.75 : 0.5;\n\n    if (x < beach)\n    {\n        x = beach - x;\n\n        return beachSquared - x * x;\n    }\n    else if (x < mountain)\n    {\n        x = x - beach;\n        const delta = mountain - beach;\n        return beachSquared + (x * x * (mountain_mid - beachSquared) / (delta * delta));\n    }\n    else\n    {\n        x = 1 - x;\n\n        const delta = 1 - mountain;\n\n        return 1 - x * x * x * (1 - mountain_mid) / (delta * delta * delta);\n    }\n}\n"],"sourceRoot":""}