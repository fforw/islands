{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/../src/index.js","webpack://Demo/../src/vector.js","webpack://Demo/./src/loadScene.js","webpack://Demo/./src/loadTexture.js","webpack://Demo/./src/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","SIXTH","Math","DEFAULT_CONFIG","width","height","numberOfRings","removeEdges","animatedEasing","renderFirstPassEdges","debug","addQuads","weightFunction","dx","x1","dy","y1","edgeLength","maxIterations","animating","minTension","findOtherEdge","faces","x0","y0","index","out","count","edge","removeRandomEdges","config","stack","Int32Array","pos","scaled","tmp","getEdgeStack","console","stackPos","eraseEdgesOfFaceInStack","success","code","otherIndex","otherEdge","x2","y2","otherIsOutmostTri","relaxWeighted","graph","tension","edgeCount","centerX","centerY","sumWeight","k","other","weight","ctx","hw","hh","outmostEdge","node","drawEdge","limit","updateConfig","this","DIRECTIONS","Vector","Float64Array","off","numTris","v0","v1","v2","isOutmost","createHexagonTriangles","start","firstPassLen","numNodes","tris","quads","calculateNumNodes","nodes","qPos","insertNode","isEdge","addQuad","insertEdge","n0","n1","found","Error","connect","firstEdgeIsOutmost","secondEdgeIsOutmost","m0x","m0y","m1x","m1y","m2x","m2y","cx","cy","n2","n3","n4","n5","n6","x3","y3","m3x","m3y","n7","n8","subdivide","sqrt","x","y","targetLength","scale","loader","GLTFLoader","TextureLoader","Islands","island","useMemo","organicQuads","OrganicQuads","Float32Array","boxes","onEdge","rnd","random","h","shape","Shape","moveTo","lineTo","box","rotateOnWorldAxis","castShadow","receiveShadow","attach","args","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","roughness","color","log","ref","useRef","useFrame","current","rotation","z","normalMap","oceanNormals","Game","shadowMap","camera","position","fov","intensity","angle","penumbra","Promise","all","url","onProgress","resolve","reject","load","loadScene","loadTexture","then","gltf","tOceanNormals","scene","children","map","kid","join","find","material","ReactDOM","render","document","getElementById"],"mappings":"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","file":"bundle-main-c37f524193f9093bafb8.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpDemo\"] = window[\"webpackJsonpDemo\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([30,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import now from \"performance-now\"\nimport Vector from \"./vector\";\n\nconst f_x0 = 0;\nconst f_y0 = 1;\nconst f_x1 = 2;\nconst f_y1 = 3;\nconst f_x2 = 4;\nconst f_y2 = 5;\nconst f_x3 = 6;\nconst f_y3 = 7;\nconst f_count = 8;\nconst f_outmostEdge = 9;\nconst f_size = 10;\n\nconst g_x = 0;\nconst g_y = 1;\nconst g_isEdge = 2;\nconst g_count = 3;\nconst g_edge0 = 4;\nconst g_edge1 = 5;\nconst g_edge2 = 6;\nconst g_edge3 = 7;\nconst g_edge4 = 8;\nconst g_edge5 = 9;\nconst g_size = 10;\n\nconst TAU = Math.PI * 2;\n\nconst SIXTH = TAU / 6;\n\nfunction calculateNumberOfFaces(limit)\n{\n    return 6 * (limit + 1) * (limit + 1);\n}\n\n\nconst DEFAULT_CONFIG = {\n    /** coordinate width */\n    width: 0,\n    /** coordinate height */\n    height: 0,\n    /** number of rings in the hexagon / number of base intersections of hexaxgon */\n    numberOfRings: 5,\n    /** how many percent of the edges shall we attempt to remove? */\n    removeEdges: 50,\n\n    /** if true, the graph will be layouted a bit with every render. If false, the graph relaxation happens at creation */\n    animatedEasing: true,\n\n    /** Set to true to render the original triangles, set to \"merged\" to render the merged triangles before subdivision */\n    renderFirstPassEdges: false,\n\n     /** Set to true to enable some debug logging */\n    debug : false,\n\n    addQuads: false,\n\n    weightFunction : (x0,y0,x1,y1) => {\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n        return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /// MOSTLY INTERNAL CONFIG ////\n    \n    // calculated internally to match the height\n    edgeLength: 80,\n    // number of iterations until we give up (we will drop out due to having reached low energy most likely much sooner)\n    maxIterations: 100,\n    // set to false if the graph is done animated on animatedEasing : true\n    animating: true,\n\n    // Minimum energy at which we stop relaxing the graph\n    minTension: 2\n};\n\nfunction updateConfig(config)\n{\n    config.numFaces = calculateNumberOfFaces(config.numberOfRings)\n    config.firstPassLen = config.numFaces * f_size\n    config.firstPassNumEdges = config.numFaces * 3\n    config.edgeLength = ( Math.min(config.width, config.height) / (config.numberOfRings * 2 + 2)) | 0;\n    config.animating = config.animatedEasing;\n    config.relaxCount = 0;\n}\n\n\nfunction createHexagonTriangles(config)\n{\n\n    const limit = config.numberOfRings;\n\n    //console.log(\"createHexagonTriangles\", limit);\n\n    const DIRECTIONS = [\n        new Vector(\n            Math.cos(0) * config.edgeLength,\n            Math.sin(0) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH) * config.edgeLength,\n            Math.sin(SIXTH) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 2) * config.edgeLength,\n            Math.sin(SIXTH * 2) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 3) * config.edgeLength,\n            Math.sin(SIXTH * 3) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 4) * config.edgeLength,\n            Math.sin(SIXTH * 4) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 5) * config.edgeLength,\n            Math.sin(SIXTH * 5) * config.edgeLength\n        )\n    ];\n\n    const faces = new Float64Array(config.firstPassLen);\n\n    let off = 0;\n\n    let count = 0;\n    let numTris = 1;\n    do\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            const v0 = DIRECTIONS[i];\n            const v1 = DIRECTIONS[(i + 1) % 6];\n            const v2 = DIRECTIONS[(i + 2) % 6];\n\n            let pos = v0.copy().scale(count);\n\n            for (let j = 0; j < numTris; j++)\n            {\n                if (j & 1)\n                {\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v1.x) | 0;\n                    faces[off + f_y1] = (pos.y + v1.y) | 0;\n                    faces[off + f_x2] = (pos.x + v2.x) | 0;\n                    faces[off + f_y2] = (pos.y + v2.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = -1;\n\n                    off += f_size;\n\n                    pos.add(v2);\n                }\n                else\n                {\n\n                    // All tris in the last row all have their edge #1 on the outer edge of the big hexagon\n                    const isOutmost = count === limit;\n\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v0.x) | 0;\n                    faces[off + f_y1] = (pos.y + v0.y) | 0;\n                    faces[off + f_x2] = (pos.x + v1.x) | 0;\n                    faces[off + f_y2] = (pos.y + v1.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = isOutmost ? 1 : -1;\n\n                    off += f_size;\n                }\n            }\n        }\n\n        numTris += 2;\n\n    } while (count++ < limit);\n\n    return faces;\n}\n\n\nfunction findOtherEdge(faces, x0, y0, x1, y1, index, out)\n{\n    for (let i = 0; i < faces.length; i += f_size)\n    {\n        if (i === index)\n        {\n            continue;\n        }\n\n        // console.log(\"find\", x0, y0, x1, y1, \":\",\n        //     faces[i + f_x0], faces[i + f_y0],\n        //     faces[i + f_x1], faces[i + f_y1],\n        //     faces[i + f_x2], faces[i + f_y2],\n        //     faces[i + f_x3], faces[i + f_y3],\n        // );\n\n        const count = faces[i + f_count];\n        if (\n            faces[i + f_x0] === x1 && faces[i + f_y0] === y1 &&\n            faces[i + f_x1] === x0 && faces[i + f_y1] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 0;\n            return;\n        }\n        if (\n            faces[i + f_x1] === x1 && faces[i + f_y1] === y1 &&\n            faces[i + f_x2] === x0 && faces[i + f_y2] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 1;\n            return;\n        }\n\n        if (count === 3)\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n        }\n        else\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x3] === x0 && faces[i + f_y3] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n\n            if (\n                faces[i + f_x3] === x1 && faces[i + f_y3] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 3;\n                return;\n            }\n\n        }\n    }\n\n    out.index = -1;\n}\n\n\nconst out = {index: -1, edge: 0};\n\n\nfunction getEdgeStack(config, faces)\n{\n    const length = config.numFaces * 3;\n    const stack = new Int32Array(length);\n\n    let pos = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const outmostEdge = faces[i + f_outmostEdge];\n\n        const targetIsOutmostFace = outmostEdge >= 0;\n        // we can't remove any of the outmost edges around the big hexagon (and we avoid having an edge triange as\n        // first merged triangle to simplify edge removal\n        if (!targetIsOutmostFace)\n        {\n            const scaled = i << 2;\n            stack[pos++] = scaled ;\n            stack[pos++] = scaled + 1;\n            stack[pos++] = scaled + 2;\n        }\n    }\n\n    // fisher-yates shuffle the stack\n    for (let i  = 0; i < pos - 2; i++)\n    {\n        const j = i + ((Math.random() * pos - i - 1)|0)\n        const tmp = stack[i];\n        stack[i] = stack[j];\n        stack[j] = tmp;\n    }\n    return stack.slice(0, pos);\n}\n\n\nfunction removeRandomEdges(config, faces)\n{\n    const count = (config.firstPassNumEdges * config.removeEdges / 100)|0;\n\n    //console.log(\"remove attempts\", count);\n\n    const stack = getEdgeStack(config, faces);\n\n    if (config.debug)\n    {\n        console.log(\"Shuffled stack\", [ ... stack.slice() ])\n    }\n\n    let stackPos = 0;\n\n\n    const eraseEdgesOfFaceInStack = index => {\n\n        for (let i = stackPos; i < stack.length; i++)\n        {\n            if ((stack[i] >>> 2) === index)\n            {\n                stack[i] = -1;\n            }\n        }\n    }\n\n\n\n    let success = 0;\n\n    // function printEdge(faces, otherIndex, outMostEdge)\n    // {\n    //     const count = faces[otherIndex + f_count];\n    //     const x0 = faces[otherIndex + outMostEdge * 2]\n    //     const y0 = faces[otherIndex + outMostEdge * 2 + 1]\n    //     const x1 = outMostEdge === count -1 ? faces[otherIndex] : faces[otherIndex + (outMostEdge + 1) * 2]\n    //     const y1 = outMostEdge === count -1 ? faces[otherIndex + 1] : faces[otherIndex + (outMostEdge + 1) * 2 + 1]\n    //\n    //\n    //     return x0 + \",\" + y0 + \",\" + x1 + \",\" + y1;\n    // }\n\n    for (let i = 0; i < count; i++)\n    {\n        let code;\n        do\n        {\n            if (stackPos === stack.length)\n            {\n                if (config.debug)\n                {\n                    config.debug && console.log(\"Ran out of removal candidates after successfully removing\", success, \"out of\", count);\n                }\n                // no more valid removals\n                return;\n            }\n            code = stack[stackPos++];\n        } while (code === -1);\n\n\n        const index = code >> 2;\n        const edge = code & 3;\n\n        const x0 = faces[index + edge * 2];\n        const y0 = faces[index + edge * 2 + 1];\n        const x1 = edge === 2 ? faces[index + f_x0] : faces[index + (edge + 1) * 2];\n        const y1 = edge === 2 ? faces[index + f_y0] : faces[index + (edge + 1) * 2 + 1];\n\n        findOtherEdge(faces, x0, y0, x1, y1, index, out)\n        if (out.index >= 0 && faces[out.index + f_count] === 3)\n        {\n            const {index: otherIndex, edge: otherEdge} = out;\n            const x2 = edge === 0 ? faces[index + f_x2] : faces[index + (edge - 1) * 2];\n            const y2 = edge === 0 ? faces[index + f_y2] : faces[index + (edge - 1) * 2 + 1];\n\n            // check if we're merging with an outmost face\n            const outMostEdge = faces[otherIndex + 9];\n            const otherIsOutmostTri = outMostEdge >= 0;\n\n            //const before = printEdge(faces, otherIndex, outMostEdge)\n            // if (otherIsOutmostTri)\n            // {\n            //     console.log(\"OUTMOST edge before split\", printEdge(faces, otherIndex, outMostEdge),\"EDGE CASE\", otherEdge, \"outMostEdge\", outMostEdge)\n            //     console.log(\"face before\", faces.slice(otherIndex, otherIndex + f_size))\n            // }\n\n            faces[otherIndex + 8] = 4;\n            switch (otherEdge)\n            {\n                case 2:\n                    faces[otherIndex + f_x3] = x2;\n                    faces[otherIndex + f_y3] = y2;\n                    break;\n                case 1:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = x2;\n                    faces[otherIndex + f_y2] = y2;\n                    break;\n                case 0:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = faces[otherIndex + f_x1];\n                    faces[otherIndex + f_y2] = faces[otherIndex + f_y1];\n                    faces[otherIndex + f_x1] = x2\n                    faces[otherIndex + f_y1] = y2;\n\n                    if (otherIsOutmostTri)\n                    {\n                        faces[otherIndex + f_outmostEdge] = 2;\n                    }\n\n                    break;\n\n            }\n            eraseEdgesOfFaceInStack(otherIndex)\n\n            // remove our face\n            faces[index + f_count] = 0;\n\n            success++;\n        }\n        eraseEdgesOfFaceInStack(index)\n\n    }\n\n    config.debug && console.log(\"Successfully removed\", success, \"out of\", count);\n\n    return success;\n}\n\n\nfunction calculateNumNodes(config, faces)\n{\n    let tris = 0;\n    let quads = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        if (count === 3)\n        {\n            tris++;\n        }\n        else if (count === 4)\n        {\n            quads++;\n        }\n    }\n\n    //console.log({quads,tris})\n\n    // we divide each quad in 9 nodes and each tri into 7 nodes\n    return quads * 9 + tris * 7;\n}\n\n\nconst QUAD_SIZE = 4;\n\n\nfunction subdivide(config, faces)\n{\n    const { firstPassLen, addQuads } = config;\n\n    const numNodes = calculateNumNodes(config, faces);\n\n    const nodes = new Float64Array(numNodes * g_size);\n\n\n    const quads = addQuads && new Int32Array(numNodes * QUAD_SIZE);\n\n    let pos = 0;\n    let qPos = 0;\n\n    const insertNode = (x0, y0, isEdge) => {\n\n        x0 |= 0;\n        y0 |= 0;\n\n        for (let i = 0; i < pos; i += g_size)\n        {\n            if (Math.abs(nodes[i] - x0) < 2 && Math.abs(nodes[i + 1] - y0) < 2)\n            {\n                // if we discover an odd face vertex touching the outmost edge, we will\n                // not register that because the odd tris are not marked as having an outmost edge, because they don't, they\n                // only have one vertices on the edge at most\n                // Later we might however return to that node within an outmost edge and we have to make sure that\n                // we take over the isEdge status from such a node\n                if (isEdge && !nodes[i + 2])\n                {\n                    nodes[i + 2] = 1;\n                }\n\n                return i;\n            }\n        }\n\n        const index = pos;\n\n        nodes[pos] = x0;\n        nodes[pos + 1] = y0;\n        nodes[pos + 2] = isEdge ? 1 : 0;\n        nodes[pos + 3] = 0;\n\n        nodes[pos + 4] = -1;\n        nodes[pos + 5] = -1;\n        nodes[pos + 6] = -1;\n        nodes[pos + 7] = -1;\n\n        pos += g_size;\n\n        return index;\n    }\n\n    const addQuad = addQuads && ((n0,n1,n2,n3) => {\n\n        quads[qPos++] = n0;\n        quads[qPos++] = n1;\n        quads[qPos++] = n2;\n        quads[qPos++] = n3;\n\n    });\n\n    const insertEdge = (n0, n1) => {\n        let count = nodes[n0 + 3];\n\n        let found = false;\n        for (let i = 0; i < count; i++)\n        {\n            const other = nodes[n0 + 4 + i];\n            if (other === n1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            if (count >= 10)\n            {\n                throw new Error(\"At most 10 edges per node\")\n            }\n\n            nodes[n0 + 4 + count++] = n1;\n            nodes[n0 + 3] = count;\n        }\n\n    }\n    const connect = (n0, n1) => {\n\n        insertEdge(n0, n1);\n        insertEdge(n1, n0);\n\n    }\n\n    for (let i = 0; i < firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n        if (count === 0)\n        {\n            continue;\n        }\n\n        const x0 = faces[i + f_x0]\n        const y0 = faces[i + f_y0]\n        const x1 = faces[i + f_x1]\n        const y1 = faces[i + f_y1]\n        const x2 = faces[i + f_x2]\n        const y2 = faces[i + f_y2]\n\n        const outmostEdge = faces[i + f_outmostEdge ];\n\n        const firstEdgeIsOutmost = outmostEdge === 1;\n        const secondEdgeIsOutmost = outmostEdge === 2;\n\n        if (count === 3)\n        {\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x0) / 2;\n            const m2y = (y2 + y0) / 2;\n\n            const cx = (x0 + x1 + x2) / 3\n            const cy = (y0 + y1 + y2) / 3\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y);\n            const n6 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n6);\n            connect(n6, n5);\n            connect(n5, n0);\n\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n6);\n            connect(n6, n1);\n\n            connect(n5, n6);\n            connect(n6, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n\n            if (addQuads)\n            {\n                addQuad(n0,n1,n6,n5);\n                addQuad(n1,n2,n3,n6);\n                addQuad(n5,n6,n3,n4);\n            }\n\n        }\n        else\n        {\n            const x3 = faces[i + f_x3]\n            const y3 = faces[i + f_y3]\n\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x3) / 2;\n            const m2y = (y2 + y3) / 2;\n            const m3x = (x3 + x0) / 2;\n            const m3y = (y3 + y0) / 2;\n\n            const cx = (x0 + x1 + x2 + x3) / 4\n            const cy = (y0 + y1 + y2 + y3) / 4\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost || secondEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y, secondEdgeIsOutmost);\n            const n6 = insertNode(x3, y3, secondEdgeIsOutmost);\n            const n7 = insertNode(m3x, m3y);\n            const n8 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n            connect(n5, n6);\n            connect(n6, n7);\n            connect(n7, n0);\n\n            connect(n8, n3);\n            connect(n8, n5);\n            connect(n8, n7);\n            connect(n8, n1);\n\n            if (addQuads)\n            {\n                addQuad(n0,n1,n8,n7);\n                addQuad(n1,n2,n3,n8);\n                addQuad(n8,n3,n4,n5);\n                addQuad(n7,n8,n5,n6);\n            }\n        }\n    }\n\n    //const fillRate = (pos / g_size) / numNodes;\n    //console.log(\"SUBDIVIDED: limit = \", numNodes, \", fill rate = \", fillRate);\n\n    return [nodes.slice(0, pos), quads && quads.slice(0, qPos)];\n}\n\n\nfunction relaxWeighted(config, graph, maxIterations = 1)\n{\n\n    const {length} = graph;\n\n    for (let i = 0; i < maxIterations; i++)\n    {\n        let tension = 0;\n        for (let j = 0; j < length; j += g_size)\n        {\n            if (!graph[j + g_isEdge])\n            {\n                const x0 = graph[j + g_x]\n                const y0 = graph[j + g_y]\n                const edgeCount = graph[j + g_count]\n\n                let centerX = 0;\n                let centerY = 0;\n                let sumWeight = 0;\n\n                for (let k = 0; k < edgeCount; k++)\n                {\n                    const other = graph[j + 4 + k];\n\n                    const x1 = graph[other];\n                    const y1 = graph[other + 1];\n\n                    const weight = config.weightFunction(x0, y0, x1, y1);\n\n                    centerX += x1 * weight;\n                    centerY += y1 * weight;\n                    sumWeight += weight;\n                }\n\n                const x1 = centerX / sumWeight\n                const y1 = centerY / sumWeight;\n\n                const dx = x1 - x0;\n                const dy = y1 - y0;\n\n                graph[j + g_x] = x1;\n                graph[j + g_y] = y1;\n\n                tension += dx * dx + dy * dy;\n\n            }\n        }\n\n        if (tension < config.minTension)\n        {\n            config.debug && console.log(\"Reached minimal tension\", config.minTension, \"after\", config.relaxCount, \"iterations\")\n            return true;\n        }\n        config.relaxCount++;\n    }\n\n    if (!config.animatedEasing)\n    {\n        config.debug && console.log(\"Stopping after max iterations = \" + config.maxIterations)\n    }\n\n    return false;\n}\n\n\n/**\n * A hexagon filled with quads forming organic shapes.\n */\nclass OrganicQuads {\n    constructor(cfg)\n    {\n\n        const config = {\n            ...DEFAULT_CONFIG,\n            ...cfg\n        }\n\n        updateConfig(config)\n\n        this.config = config;\n\n        const faces = createHexagonTriangles(config);\n\n        if (config.renderFirstPassEdges)\n        {\n            this.faces = config.renderFirstPassEdges !== \"merged\" ? faces.slice() : faces;\n        }\n\n        const start = config.debug && now();\n\n        removeRandomEdges(config, faces)\n\n        config.debug && console.log(\"Edge removal in \" , now() - start, \"ms\")\n\n        const [graph, quads] = subdivide(config, faces);\n        this.quads = quads;\n\n        if (!config.animating)\n        {\n            relaxWeighted(config, graph, config.maxIterations);\n        }\n        //console.log(\"GRAPH f_size\", graph.length / g_size, graph);\n        this.graph = graph;\n\n    }\n\n\n    render = ctx =>\n    {\n        const { config, graph, faces } = this;\n\n\n        ctx.save();\n\n        const hw = config.width / 2;\n        const hh = config.height / 2;\n\n        ctx.translate(hw, hh)\n\n        const {length} = graph;\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(-hw, -hh, config.width, config.height)\n\n        if (config.renderFirstPassEdges)\n        {\n\n            // draw original quads and tris\n\n            ctx.strokeStyle = \"#f00\";\n            ctx.lineWidth = 1;\n\n\n            let outerCount = 0;\n            for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n            {\n                const count = faces[pos + f_count];\n\n                if (count >= 3)\n                {\n\n                    ctx.beginPath();\n                    ctx.moveTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n\n                    for (let i = 1; i < count; i++)\n                    {\n                        ctx.lineTo(faces[pos + i*2],faces[pos +  i*2 + 1]);\n                    }\n\n                    ctx.closePath();\n                    ctx.stroke();\n\n                    const outmostEdge = faces[pos + f_outmostEdge];\n                    if (outmostEdge >= 0)\n                    {\n                        ctx.strokeStyle = \"#fe0\";\n                        ctx.beginPath();\n                        ctx.moveTo(faces[pos + outmostEdge * 2  ],faces[pos + outmostEdge * 2 + 1]);\n\n                        if (outmostEdge === count - 1)\n                        {\n                            ctx.lineTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n                        }\n                        else\n                        {\n                            ctx.lineTo(faces[pos + (outmostEdge + 1 ) * 2  ],faces[pos + (outmostEdge + 1 ) * 2 + 1]);\n                        }\n                        ctx.stroke();\n                        ctx.strokeStyle = \"#f00\";\n\n                        outerCount++;\n\n                    }\n\n                }\n            }\n            //    console.log(\"Number of outer edges\", outerCount)\n\n            //console.log(\"DRAW EDGES\")\n        }\n\n        ctx.strokeStyle = \"#fff\";\n        ctx.lineWidth = 1;\n\n\n        function drawEdge(x0, y0, node)\n        {\n            const x1 = graph[node + g_x];\n            const y1 = graph[node + g_y];\n\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n        }\n\n\n        for (let i = 0; i < length; i += g_size)\n        {\n            const x0 = graph[i + g_x];\n            const y0 = graph[i + g_y];\n            const edgeCount = graph[i + g_count];\n\n            for (let j = 0; j < edgeCount; j++)\n            {\n                drawEdge(x0, y0, graph[i + g_edge0 + j])\n            }\n        }\n\n        //ctx.fillStyle = \"#f0f\";\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const isEdge = graph[i + g_isEdge];\n        //\n        //     if (isEdge)\n        //     {\n        //         ctx.fillRect(x0 - 4,  y0 - 4, 8, 8)\n        //     }\n        // }\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 4;\n        //\n        // for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n        // {\n        //     const count = faces[pos + f_count];\n        //     const outmostEdge = faces[pos + f_outmostEdge];\n        //\n        //\n        //     const last = count - 1;\n        //     for (let i=0; i < count; i++)\n        //     {\n        //         if (i === outmostEdge)\n        //         {\n        //             ctx.strokeStyle = \"rgba(255,0,0,0.5)\";\n        //         }\n        //         else\n        //         {\n        //             ctx.strokeStyle = \"rgba(0,255,0,0.5)\";\n        //         }\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos + i * 2], faces[pos + i * 2 + 1]);\n        //         ctx.lineTo(\n        //             i === last ? faces[pos + f_x0 ] : faces[pos + (i+1) * 2],\n        //             i === last ? faces[pos + f_y0 ] : faces[pos + (i+1) * 2 + 1]\n        //         );\n        //         ctx.stroke();\n        //     }\n        // }\n\n        ctx.restore();\n\n        if (config.animating)\n        {\n            if (relaxWeighted(config, graph))\n            {\n                config.animating = false;\n            }\n            //            raf(redrawGraph)\n        }\n    }\n\n    get nodeSize()\n    {\n        return f_size;\n    }\n}\n\n\nexport {  Vector }\n\nexport default OrganicQuads\n","const sqrt = Math.sqrt;\n\nclass Vector\n{\n    constructor(x,y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns a copy of this vector.\n     *\n     * @returns {Vector} copy\n     */\n    copy()\n    {\n        return new Vector(this.x,this.y);\n    }\n\n    /**\n     * Adds to this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n\n    add(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x += x;\n            this.y += y;\n        }\n        else\n        {\n            this.x += x.x;\n            this.y += x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Subtracts from this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    subtract(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x -= x;\n            this.y -= y;\n        }\n        else\n        {\n            this.x -= x.x;\n            this.y -= x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by a planar number.\n     *\n     * @param n     scale\n     * @returns {Vector} this vector, scaled\n     */\n    scale(n)\n    {\n        this.x *= n;\n        this.y *= n;\n\n        return this;\n    }\n\n    /**\n     * Length of this vector\n     *\n     * @returns {number}    length\n     */\n    length()\n    {\n        const { x, y } = this;\n        return sqrt(x*x+y*y);\n    }\n\n    /**\n     * Scales the vector to normal length or a specified length\n     *\n     * @param targetLength      {number?} target length of the vector (default is 1, the normal vector length)\n     *\n     * @returns {Vector}\n     */\n    norm(targetLength = 1)\n    {\n        return this.scale(targetLength / this.length());\n    }\n\n    /**\n     * Rotate vector 90 degrees clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateClockwise()\n    {\n        const { x, y } = this;\n\n        //noinspection JSSuspiciousNameCombination\n        this.x = y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate vector 90 degrees counter clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateCounterClockwise()\n    {\n        const { x, y } = this;\n\n        this.x = -y;\n        //noinspection JSSuspiciousNameCombination\n        this.y = x;\n\n        return this;\n    }\n\n    /**\n     * Sets the coordinates of this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    set(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x = x;\n            this.y = y;\n        }\n        else\n        {\n            this.x = x.x;\n            this.y = x.y;\n        }\n\n    }\n}\n\nexport default Vector;\n","\n// Instantiate a loader\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nconst loader = new GLTFLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","// Instantiate a loader\nimport { TextureLoader } from \"three\";\n\nconst loader = new TextureLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","import React, { useMemo, useRef, useState } from \"react\"\nimport ReactDOM from 'react-dom'\nimport domready from 'domready'\nimport { Canvas, useFrame } from \"react-three-fiber\"\nimport { ExtrudeBufferGeometry, DirectionalLight, Plane, MeshStandardMaterial, HemisphereLight  } from \"react-three-fiber/components\"\n// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport { ACESFilmicToneMapping, Color, sRGBEncoding } from \"three\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport OrganicQuads from \"@fforw/organic-quads\";\n\n\nimport {Shape} from \"three\"\nimport loadScene from \"./loadScene\";\nimport loadTexture from \"./loadTexture\";\n\nfunction Islands()\n{\n\n    const island = useMemo(() => {\n\n        const organicQuads = new OrganicQuads({\n            numberOfRings: 4,\n            width: 100,\n            height: 100,\n            addQuads: true\n        });\n\n        const {quads, graph} = organicQuads;\n\n        const {length} = quads;\n\n        const height = new Float32Array(length / 4);\n\n        const boxes = [];\n        for (let i = 0; i < height.length; i++)\n        {\n\n            const n0 = quads[i * 4];\n            const n1 = quads[i * 4 + 1];\n            const n2 = quads[i * 4 + 2];\n            const n3 = quads[i * 4 + 3];\n\n            const onEdge = (graph[n0 + 2] || graph[n1 + 2] || graph[n2 + 2] || graph[n3 + 2])\n\n            const cx = (graph[n0] + graph[n1] + graph[n2] + graph[n3]) / 4;\n            const cy = (graph[n0 + 1] + graph[n1 + 1] + graph[n2 + 1] + graph[n3 + 1]) / 4;\n\n            const rnd = Math.random();\n            const h = onEdge ? 0.5  : rnd < 0.7 ? 2 : rnd < 0.98 ? 10 + Math.random() : 15;\n            height[i] = h;\n\n            const shape = new Shape();\n\n            shape.moveTo(graph[n0], graph[n0 + 1]);\n            shape.lineTo(graph[n1], graph[n1 + 1]);\n            shape.lineTo(graph[n2], graph[n2 + 1]);\n            shape.lineTo(graph[n3], graph[n3 + 1]);\n            shape.lineTo(graph[n0], graph[n0 + 1]);\n\n            const box = (\n                <mesh\n                    key={i}\n                    rotateOnWorldAxis={true}\n                    castShadow\n                    receiveShadow\n                >\n                    <ExtrudeBufferGeometry\n                        attach=\"geometry\"\n                        args={[\n                            shape,\n                            {\n                                steps: 2,\n                                depth: h,\n                                bevelEnabled: true,\n                                bevelThickness: 0.5,\n                                bevelSize: 0.5,\n                                bevelOffset: 0,\n                                bevelSegments: 2\n                            }\n                        ]}\n\n                    />\n                    <MeshStandardMaterial attach=\"material\" roughness={0.9} color=\"#ffe6ee\"/>\n                </mesh>\n            );\n\n            //console.log(\"BOX\", h, box);\n\n            boxes.push(\n                box\n            )\n        }\n\n        console.log(\"INIT\", {quads, height})\n\n        return {\n            organicQuads,\n            height,\n            boxes\n        }\n    }, [])\n\n    const ref = useRef();\n    useFrame(() => (ref.current.rotation.z += 0.01));\n\n    return (\n        <mesh\n            ref={ref}\n            castShadow\n            receiveShadow\n        >\n            {\n                island.boxes\n            }\n            <planeBufferGeometry attach=\"geometry\" args={[1000, 1000, 10, 100, 100, 10]} />\n            <MeshStandardMaterial attach=\"material\" roughness={0.33} color=\"#6687e8\" normalMap={ oceanNormals }/>\n        </mesh>\n\n    )\n}\n\nconst Game = () => {\n\n    return (\n        <Canvas\n            shadowMap\n            camera={{\n                position: [0, -50, 75],\n                fov: 60\n            }}\n        >\n            <Islands />\n            <directionalLight position={[0,0,1]} intensity={0.4} color=\"#e6e8ff\"/>\n            <spotLight intensity={1} position={[30, 30, 50]} angle={0.7} penumbra={1} castShadow color=\"#fff9e6\"/>\n        </Canvas>\n    )\n}\n\nlet waterMaterial;\nlet oceanNormals;\n\nPromise.all([\n    loadScene(\n        \"assets/tiles.glb\",\n    ),\n    loadTexture(\n        \"assets/ocean-normals.png\"\n    )\n])\n.then(([gltf, tOceanNormals]) => {\n\n    //scene.add( gltf.scene );\n\n    console.log(\"Scene Objects\", gltf.scene.children.map(kid => kid.name).join(\", \"))\n\n    waterMaterial = gltf.scene.children.find(\n        kid => kid.name === \"Water\"\n    ).material;\n\n    oceanNormals = tOceanNormals;\n\n    // gltf.animations; // Array<THREE.AnimationClip>\n    // gltf.scene; // THREE.Group\n    // gltf.scenes; // Array<THREE.Group>\n    // gltf.cameras; // Array<THREE.Camera>\n    // gltf.asset; // Object\n\n    ReactDOM.render(\n        <Game/>,\n        document.getElementById(\"root\")\n    )\n\n})\n"],"sourceRoot":""}