{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/./src/index.js","webpack://Demo/../src/vector.js","webpack://Demo/../src/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Islands","island","useMemo","organicQuads","OrganicQuads","numberOfRings","width","height","addQuads","quads","graph","Float32Array","boxes","n0","n1","n2","n3","onEdge","rnd","Math","random","h","shape","Shape","moveTo","lineTo","box","rotateOnWorldAxis","castShadow","receiveShadow","attach","args","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","roughness","color","console","log","ref","useRef","useFrame","current","rotation","z","ReactDOM","render","shadowMap","camera","position","fov","intensity","angle","penumbra","document","getElementById","sqrt","this","Vector","x","y","targetLength","scale","SIXTH","DEFAULT_CONFIG","removeEdges","animatedEasing","edgeLength","maxIterations","animating","minTension","findOtherEdge","faces","x0","y0","x1","y1","index","out","count","edge","relaxWeighted","config","tension","edgeCount","centerX","centerY","sumWeight","k","other","dx","dy","weight","ctx","hw","hh","node","drawEdge","limit","updateConfig","DIRECTIONS","Float64Array","off","numTris","v0","v1","v2","pos","isOutmost","createHexagonTriangles","success","targetIsOutmostFace","otherIndex","otherEdge","x2","y2","otherIsOutmostTri","removeRandomEdges","firstPassLen","numNodes","tris","calculateNumNodes","nodes","Int32Array","qPos","insertNode","isEdge","addQuad","insertEdge","found","Error","connect","outmostEdge","firstEdgeIsOutmost","secondEdgeIsOutmost","m0x","m0y","m1x","m1y","m2x","m2y","cx","cy","n4","n5","n6","x3","y3","m3x","m3y","n7","n8","subdivide"],"mappings":"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","file":"bundle-main-5b9e6c3ece3e49ef6ce6.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpDemo\"] = window[\"webpackJsonpDemo\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([14,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import React, { useMemo, useRef, useState } from \"react\"\nimport ReactDOM from 'react-dom'\nimport { Canvas, useFrame } from \"react-three-fiber\"\nimport { ExtrudeBufferGeometry, DirectionalLight, Plane, MeshStandardMaterial } from \"react-three-fiber/components\"\n// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport { ACESFilmicToneMapping, Color, sRGBEncoding } from \"three\";\nimport OrganicQuads from \"@fforw/organic-quads\";\n\n\nimport {Shape} from \"three\"\n\nfunction Islands()\n{\n\n    const island = useMemo(() => {\n\n        const organicQuads = new OrganicQuads({\n            numberOfRings: 3,\n            width: 100,\n            height: 100,\n            addQuads: true\n        });\n\n        const {quads, graph} = organicQuads;\n\n        const {length} = quads;\n\n        const height = new Float32Array(length / 4);\n\n        const boxes = [];\n        for (let i = 0; i < height.length; i++)\n        {\n\n            const n0 = quads[i * 4];\n            const n1 = quads[i * 4 + 1];\n            const n2 = quads[i * 4 + 2];\n            const n3 = quads[i * 4 + 3];\n\n            const onEdge = (graph[n0 + 2] || graph[n1 + 2] || graph[n2 + 2] || graph[n3 + 2])\n\n            const cx = (graph[n0] + graph[n1] + graph[n2] + graph[n3]) / 4;\n            const cy = (graph[n0 + 1] + graph[n1 + 1] + graph[n2 + 1] + graph[n3 + 1]) / 4;\n\n            const rnd = Math.random();\n            const h = onEdge ? 0.5  : rnd < 0.7 ? 2 : rnd < 0.98 ? 10 : 15;\n            height[i] = h;\n\n            const shape = new Shape();\n\n            shape.moveTo(graph[n0], graph[n0 + 1]);\n            shape.lineTo(graph[n1], graph[n1 + 1]);\n            shape.lineTo(graph[n2], graph[n2 + 1]);\n            shape.lineTo(graph[n3], graph[n3 + 1]);\n            shape.lineTo(graph[n0], graph[n0 + 1]);\n\n            const box = (\n                <mesh\n                    key={i}\n                    rotateOnWorldAxis={true}\n                    castShadow\n                    receiveShadow\n                >\n                    <ExtrudeBufferGeometry\n                        attach=\"geometry\"\n                        args={[\n                            shape,\n                            {\n                                steps: 2,\n                                depth: h,\n                                bevelEnabled: true,\n                                bevelThickness: 0.5,\n                                bevelSize: 0.5,\n                                bevelOffset: 0,\n                                bevelSegments: 2\n                            }\n                        ]}\n\n                    />\n                    <MeshStandardMaterial attach=\"material\" roughness={0.1} color=\"#ffebc2\"/>\n                </mesh>\n            );\n\n            //console.log(\"BOX\", h, box);\n\n            boxes.push(\n                box\n            )\n        }\n\n        console.log(\"INIT\", {quads, height})\n\n        return {\n            organicQuads,\n            height,\n            boxes\n        }\n    }, [])\n\n    const ref = useRef();\n    useFrame(() => (ref.current.rotation.z += 0.01));\n\n    return (\n        <mesh\n            ref={ref}\n            castShadow\n            receiveShadow\n        >\n            {\n                island.boxes\n            }\n        </mesh>\n\n    )\n}\n\nReactDOM.render(\n    <Canvas\n        shadowMap\n        camera={{\n            position: [0, -75, 100],\n            fov: 60\n        }}\n    >\n        <Islands />\n        <mesh\n            receiveShadow\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\n            <MeshStandardMaterial attach=\"material\" roughness={0.9} color=\"#6687e8\"/>\n        </mesh>\n        <directionalLight position={[-10, -10, 30]} intensity={0.5} />\n        <spotLight intensity={1} position={[30, 30, 50]} angle={0.7} penumbra={0.5} castShadow />\n    </Canvas>,\n    document.getElementById('root')\n)\n","const sqrt = Math.sqrt;\n\nclass Vector\n{\n    constructor(x,y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns a copy of this vector.\n     *\n     * @returns {Vector} copy\n     */\n    copy()\n    {\n        return new Vector(this.x,this.y);\n    }\n\n    /**\n     * Adds to this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n\n    add(x,y)\n    {\n        if (x instanceof Vector)\n        {\n            this.x += x.x;\n            this.y += x.y;\n        }\n        else\n        {\n            this.x += x;\n            this.y += y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Subtracts from this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    subtract(x,y)\n    {\n        if (x instanceof Vector)\n        {\n            this.x -= x.x;\n            this.y -= x.y;\n        }\n        else\n        {\n            this.x -= x;\n            this.y -= y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by a planar number.\n     *\n     * @param n     scale\n     * @returns {Vector} this vector, scaled\n     */\n    scale(n)\n    {\n        this.x *= n;\n        this.y *= n;\n\n        return this;\n    }\n\n    /**\n     * Length of this vector\n     *\n     * @returns {number}    length\n     */\n    length()\n    {\n        const { x, y } = this;\n        return sqrt(x*x+y*y);\n    }\n\n    /**\n     * Scales the vector to normal length or a specified length\n     *\n     * @param targetLength      {number?} target length of the vector (default is 1, the normal vector length)\n     *\n     * @returns {Vector}\n     */\n    norm(targetLength = 1)\n    {\n        return this.scale(targetLength / this.length());\n    }\n\n    /**\n     * Rotate vector 90 degrees clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateClockwise()\n    {\n        const { x, y } = this;\n\n        //noinspection JSSuspiciousNameCombination\n        this.x = y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate vector 90 degrees counter clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateCounterClockwise()\n    {\n        const { x, y } = this;\n\n        this.x = -y;\n        //noinspection JSSuspiciousNameCombination\n        this.y = x;\n\n        return this;\n    }\n}\n\nexport default Vector;\n","import Vector from \"./vector\";\n    \nconst SIZE = 10; // count + case(1=odd face 2=outmost tri) + 4 * x/y\nconst TAU = Math.PI * 2;\n\nconst SIXTH = TAU / 6;\n\nfunction calculateNumberOfFaces(limit)\n{\n    return 6 * (limit + 1) * (limit + 1);\n}\n\n\nconst DEFAULT_CONFIG = {\n    // coordinate width\n    width: 0,\n    // coordinate height\n    height: 0,\n    // number of rings in the hexagon / number of base intersections of hexaxgon\n    numberOfRings: 5,\n    // how many percent of the edges shall we attempt to remove?\n    removeEdges: 50,\n    // if true, the graph will be layouted a bit with every render. If false, the graph relaxation happens at creation\n    animatedEasing: true,\n\n    /// MOSTLY INTERNAL CONFIG ////\n    \n    // calculated internally to match the height\n    edgeLength: 80,\n    // number of iterations until we give up (we will drop out due to having reached low energy most likely much sooner)\n    maxIterations: 100,\n    // set to false if the graph is done animated on animatedEasing : true\n    animating: true,\n\n    // Minimum energy at which we stop relaxing the graph\n    minTension: 2,\n\n    addQuads: false\n};\n\n\n\nfunction updateConfig(config)\n{\n    config.numFaces = calculateNumberOfFaces(config.numberOfRings)\n    config.firstPassLen = config.numFaces * SIZE\n    config.firstPassNumEdges = config.numFaces * 3\n    config.edgeLength = ( Math.min(config.width, config.height) / (config.numberOfRings * 2 + 2)) | 0;\n    config.animating = config.animatedEasing;\n    config.relaxCount = 0;\n}\n\n\nfunction createHexagonTriangles(config)\n{\n\n    const limit = config.numberOfRings;\n\n    //console.log(\"createHexagonTriangles\", limit);\n\n    const DIRECTIONS = [\n        new Vector(\n            Math.cos(0) * config.edgeLength,\n            Math.sin(0) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH) * config.edgeLength,\n            Math.sin(SIXTH) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 2) * config.edgeLength,\n            Math.sin(SIXTH * 2) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 3) * config.edgeLength,\n            Math.sin(SIXTH * 3) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 4) * config.edgeLength,\n            Math.sin(SIXTH * 4) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 5) * config.edgeLength,\n            Math.sin(SIXTH * 5) * config.edgeLength\n        )\n    ];\n\n    const faces = new Float64Array(config.firstPassLen);\n\n    let off = 0;\n\n    let count = 0;\n    let numTris = 1;\n    do\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            const v0 = DIRECTIONS[i];\n            const v1 = DIRECTIONS[(i + 1) % 6];\n            const v2 = DIRECTIONS[(i + 2) % 6];\n\n            let pos = v0.copy().scale(count);\n\n            for (let j = 0; j < numTris; j++)\n            {\n                if (j & 1)\n                {\n                    faces[off++] = (pos.x) | 0;\n                    faces[off++] = (pos.y) | 0;\n                    faces[off++] = (pos.x + v1.x) | 0;\n                    faces[off++] = (pos.y + v1.y) | 0;\n                    faces[off++] = (pos.x + v2.x) | 0;\n                    faces[off++] = (pos.y + v2.y) | 0;\n                    off += 2;\n                    faces[off++] = 3;\n                    faces[off++] = -1;\n\n                    pos.add(v2);\n                }\n                else\n                {\n\n                    faces[off++] = (pos.x) | 0;\n                    faces[off++] = (pos.y) | 0;\n                    faces[off++] = (pos.x + v0.x) | 0;\n                    faces[off++] = (pos.y + v0.y) | 0;\n                    faces[off++] = (pos.x + v1.x) | 0;\n                    faces[off++] = (pos.y + v1.y) | 0;\n                    off += 2;\n                    faces[off++] = 3;\n\n                    // All tris in the last row all have their edge #1 on the outer edge of the big hexagon\n                    const isOutmost = count === limit;\n                    faces[off++] = isOutmost ? 1 : -1;\n                }\n            }\n        }\n\n        numTris += 2;\n\n    } while (count++ < limit);\n\n    return faces;\n}\n\n\nfunction findOtherEdge(faces, x0, y0, x1, y1, index, out)\n{\n    for (let i = 0; i < faces.length; i += SIZE)\n    {\n        if (i === index)\n        {\n            continue;\n        }\n\n        // console.log(\"find\", x0, y0, x1, y1, \":\",\n        //     faces[i    ], faces[i + 1],\n        //     faces[i + 2], faces[i + 3],\n        //     faces[i + 4], faces[i + 5],\n        //     faces[i + 6], faces[i + 7],\n        // );\n\n        const count = faces[i + 8];\n        if (\n            faces[i] === x1 && faces[i + 1] === y1 &&\n            faces[i + 2] === x0 && faces[i + 3] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 0;\n            return;\n        }\n        if (\n            faces[i + 2] === x1 && faces[i + 3] === y1 &&\n            faces[i + 4] === x0 && faces[i + 5] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 1;\n            return;\n        }\n\n        if (count === 3)\n        {\n            if (\n                faces[i + 4] === x1 && faces[i + 5] === y1 &&\n                faces[i] === x0 && faces[i + 1] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n        }\n        else\n        {\n            if (\n                faces[i + 4] === x1 && faces[i + 5] === y1 &&\n                faces[i + 6] === x0 && faces[i + 7] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n\n            if (\n                faces[i + 6] === x1 && faces[i + 7] === y1 &&\n                faces[i] === x0 && faces[i] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 3;\n                return;\n            }\n\n        }\n    }\n\n    out.index = -1;\n}\n\n\nconst out = {index: -1, edge: 0};\n\n\nfunction removeRandomEdges(config, faces)\n{\n    const count = config.firstPassNumEdges * config.removeEdges / 100;\n\n    //console.log(\"remove attempts\", count);\n\n    let success = 0;\n\n    // function printEdge(faces, otherIndex, outMostEdge)\n    // {\n    //     const count = faces[otherIndex + 8];\n    //     const x0 = faces[otherIndex + outMostEdge * 2]\n    //     const y0 = faces[otherIndex + outMostEdge * 2 + 1]\n    //     const x1 = outMostEdge === count -1 ? faces[otherIndex] : faces[otherIndex + (outMostEdge + 1) * 2]\n    //     const y1 = outMostEdge === count -1 ? faces[otherIndex + 1] : faces[otherIndex + (outMostEdge + 1) * 2 + 1]\n    //\n    //\n    //     return x0 + \",\" + y0 + \",\" + x1 + \",\" + y1;\n    // }\n\n    for (let i = 0; i < count; i++)\n    {\n        const index = ((Math.random() * config.numFaces) | 0) * SIZE;\n        if (faces[index + 8] === 3)\n        {\n            const outmostEdge = faces[index + 9];\n            const targetIsOutmostFace = outmostEdge >= 0;\n\n            const edge = (Math.random() * 3) | 0;\n\n            // we can't remove any of the outmost edges around the big hexagon\n            if (!(targetIsOutmostFace))//&& edge === outmostEdge))\n            {\n\n                const x0 = faces[index + edge * 2];\n                const y0 = faces[index + edge * 2 + 1];\n                const x1 = edge === 2 ? faces[index] : faces[index + (edge + 1) * 2];\n                const y1 = edge === 2 ? faces[index + 1] : faces[index + (edge + 1) * 2 + 1];\n\n                findOtherEdge(faces, x0, y0, x1, y1, index, out)\n                if (out.index >= 0 && faces[out.index + 8] === 3)\n                {\n                    const {index: otherIndex, edge: otherEdge} = out;\n                    const x2 = edge === 0 ? faces[index + 2 * 2] : faces[index + (edge - 1) * 2];\n                    const y2 = edge === 0 ? faces[index + 2 * 2 + 1] : faces[index + (edge - 1) * 2 + 1];\n\n                    // check if we're merging with an outmost face\n                    const outMostEdge = faces[otherIndex + 9];\n                    const otherIsOutmostTri = outMostEdge >= 0;\n\n                    //const before = printEdge(faces, otherIndex, outMostEdge)\n                    // if (otherIsOutmostTri)\n                    // {\n                    //     console.log(\"OUTMOST edge before split\", printEdge(faces, otherIndex, outMostEdge),\"EDGE CASE\", otherEdge, \"outMostEdge\", outMostEdge)\n                    //     console.log(\"face before\", faces.slice(otherIndex, otherIndex + SIZE))\n                    // }\n\n                    faces[otherIndex + 8] = 4;\n                    switch (otherEdge)\n                    {\n                        case 2:\n                            faces[otherIndex + 6] = x2;\n                            faces[otherIndex + 7] = y2;\n                            break;\n                        case 1:\n                            faces[otherIndex + 6] = faces[otherIndex + 4];\n                            faces[otherIndex + 7] = faces[otherIndex + 5];\n                            faces[otherIndex + 4] = x2;\n                            faces[otherIndex + 5] = y2;\n                            break;\n                        case 0:\n                            faces[otherIndex + 6] = faces[otherIndex + 4];\n                            faces[otherIndex + 7] = faces[otherIndex + 5];\n                            faces[otherIndex + 4] = faces[otherIndex + 2];\n                            faces[otherIndex + 5] = faces[otherIndex + 3];\n                            faces[otherIndex + 2] = x2\n                            faces[otherIndex + 3] = y2;\n\n                            if (otherIsOutmostTri)\n                            {\n                                faces[otherIndex + 9] = 2;\n                            }\n\n                            break;\n                    }\n\n                    // remove our face\n                    faces[index + 8] = 0;\n\n                    success++;\n                }\n            }\n        }\n    }\n\n    console.log(\"Successfully removed\", success, \"out of\", count);\n\n    return success;\n}\n\n\nfunction calculateNumNodes(config, faces)\n{\n    let tris = 0;\n    let quads = 0;\n    for (let i = 0; i < config.firstPassLen; i += SIZE)\n    {\n        const count = faces[i + 8];\n\n        if (count === 3)\n        {\n            tris++;\n        }\n        else if (count === 4)\n        {\n            quads++;\n        }\n    }\n\n    //console.log({quads,tris})\n\n    // we divide each quad in 9 nodes and each tri into 7 nodes\n    return quads * 9 + tris * 7;\n}\n\n\nconst NODE_SIZE = 10;\n\nconst QUAD_SIZE = 4;\n\n\nfunction subdivide(config, faces)\n{\n    const { firstPassLen, addQuads } = config;\n\n    const numNodes = calculateNumNodes(config, faces);\n\n    const nodes = new Float64Array(numNodes * NODE_SIZE);\n\n\n    const quads = addQuads && new Int32Array(numNodes * QUAD_SIZE);\n\n    let pos = 0;\n    let qPos = 0;\n\n    const insertNode = (x0, y0, isEdge) => {\n\n        x0 |= 0;\n        y0 |= 0;\n\n        for (let i = 0; i < pos; i += NODE_SIZE)\n        {\n            if (Math.abs(nodes[i] - x0) < 2 && Math.abs(nodes[i + 1] - y0) < 2)\n            {\n                // if we discover an odd face vertex touching the outmost edge, we will\n                // not register that because the odd tris are not marked as having an outmost edge, because they don't, they\n                // only have one vertices on the edge at most\n                // Later we might however return to that node within an outmost edge and we have to make sure that\n                // we take over the isEdge status from such a node\n                if (isEdge && !nodes[i + 2])\n                {\n                    nodes[i + 2] = 1;\n                }\n\n                return i;\n            }\n        }\n\n        const index = pos;\n\n        nodes[pos] = x0;\n        nodes[pos + 1] = y0;\n        nodes[pos + 2] = isEdge ? 1 : 0;\n        nodes[pos + 3] = 0;\n\n        nodes[pos + 4] = -1;\n        nodes[pos + 5] = -1;\n        nodes[pos + 6] = -1;\n        nodes[pos + 7] = -1;\n\n        pos += NODE_SIZE;\n\n        return index;\n    }\n\n    const addQuad = addQuads && ((n0,n1,n2,n3) => {\n\n        quads[qPos++] = n0;\n        quads[qPos++] = n1;\n        quads[qPos++] = n2;\n        quads[qPos++] = n3;\n\n    });\n\n    const insertEdge = (n0, n1) => {\n        let count = nodes[n0 + 3];\n\n        let found = false;\n        for (let i = 0; i < count; i++)\n        {\n            const other = nodes[n0 + 4 + i];\n            if (other === n1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            if (count >= 6)\n            {\n                throw new Error(\"At most 6 edges per node\")\n            }\n\n            nodes[n0 + 4 + count++] = n1;\n            nodes[n0 + 3] = count;\n        }\n\n    }\n    const connect = (n0, n1) => {\n\n        insertEdge(n0, n1);\n        insertEdge(n1, n0);\n\n    }\n\n    for (let i = 0; i < firstPassLen; i += SIZE)\n    {\n        const count = faces[i + 8];\n        if (count === 0)\n        {\n            continue;\n        }\n\n        const x0 = faces[i]\n        const y0 = faces[i + 1]\n        const x1 = faces[i + 2]\n        const y1 = faces[i + 3]\n        const x2 = faces[i + 4]\n        const y2 = faces[i + 5]\n\n        const outmostEdge = faces[i + 9];\n\n        const firstEdgeIsOutmost = outmostEdge === 1;\n        const secondEdgeIsOutmost = outmostEdge === 2;\n\n        if (count === 3)\n        {\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x0) / 2;\n            const m2y = (y2 + y0) / 2;\n\n            const cx = (x0 + x1 + x2) / 3\n            const cy = (y0 + y1 + y2) / 3\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y);\n            const n6 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n6);\n            connect(n6, n5);\n            connect(n5, n0);\n\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n6);\n            connect(n6, n1);\n\n            connect(n5, n6);\n            connect(n6, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n\n            if (addQuads)\n            {\n                addQuad(n0,n1,n6,n5);\n                addQuad(n1,n2,n3,n6);\n                addQuad(n5,n6,n3,n4);\n            }\n\n        }\n        else\n        {\n            const x3 = faces[i + 6]\n            const y3 = faces[i + 7]\n\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x3) / 2;\n            const m2y = (y2 + y3) / 2;\n            const m3x = (x3 + x0) / 2;\n            const m3y = (y3 + y0) / 2;\n\n            const cx = (x0 + x1 + x2 + x3) / 4\n            const cy = (y0 + y1 + y2 + y3) / 4\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost || secondEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y, secondEdgeIsOutmost);\n            const n6 = insertNode(x3, y3, secondEdgeIsOutmost);\n            const n7 = insertNode(m3x, m3y);\n            const n8 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n            connect(n5, n6);\n            connect(n6, n7);\n            connect(n7, n0);\n\n            connect(n8, n3);\n            connect(n8, n5);\n            connect(n8, n7);\n            connect(n8, n1);\n\n            if (addQuads)\n            {\n                addQuad(n0,n1,n8,n7);\n                addQuad(n1,n2,n3,n8);\n                addQuad(n8,n3,n4,n5);\n                addQuad(n7,n8,n5,n6);\n            }\n        }\n    }\n\n    const fillRate = (pos / NODE_SIZE) / numNodes;\n    //console.log(\"SUBDIVIDED: limit = \", numNodes, \", fill rate = \", fillRate);\n\n    return [nodes.slice(0, pos), quads && quads.slice(0, qPos)];\n}\n\n\nfunction relaxWeighted(config, graph, maxIterations = 1)\n{\n\n    const {length} = graph;\n\n    for (let i = 0; i < maxIterations; i++)\n    {\n        let tension = 0;\n        for (let j = 0; j < length; j += NODE_SIZE)\n        {\n            if (!graph[j + 2])\n            {\n                const x0 = graph[j]\n                const y0 = graph[j + 1]\n                const edgeCount = graph[j + 3]\n\n                let centerX = 0;\n                let centerY = 0;\n                let sumWeight = 0;\n\n                for (let k = 0; k < edgeCount; k++)\n                {\n                    const other = graph[j + 4 + k];\n\n                    const x1 = graph[other];\n                    const y1 = graph[other + 1];\n\n                    const dx = x1 - x0;\n                    const dy = y1 - y0;\n\n                    let weight = Math.sqrt(dx * dx + dy * dy);\n\n                    centerX += x1 * weight;\n                    centerY += y1 * weight;\n                    sumWeight += weight;\n                }\n\n                const x1 = centerX / sumWeight\n                const y1 = centerY / sumWeight;\n\n                const dx = x1 - x0;\n                const dy = y1 - y0;\n\n                graph[j] = x1;\n                graph[j + 1] = y1;\n\n                tension += dx * dx + dy * dy;\n\n            }\n        }\n\n        if (tension < config.minTension)\n        {\n            console.log(\"Reached minimal tension\", config.minTension, \"after\", config.relaxCount, \"iterations\")\n            return true;\n        }\n        config.relaxCount++;\n    }\n\n    if (!config.animatedEasing)\n    {\n        console.log(\"Stopping after max iterations = \" + config.maxIterations)\n    }\n\n    return false;\n}\n\n\n/**\n * A hexagon filled with quads forming organic shapes.\n */\nclass OrganicQuads {\n    constructor(cfg)\n    {\n\n        const config = {\n            ...DEFAULT_CONFIG,\n            ...cfg\n        }\n\n        updateConfig(config)\n\n        this.config = config;\n\n        const faces = createHexagonTriangles(config);\n        removeRandomEdges(config, faces)\n\n        const [graph, quads] = subdivide(config, faces);\n        this.quads = quads;\n\n        if (!config.animating)\n        {\n            relaxWeighted(config, graph, config.maxIterations);\n        }\n        //console.log(\"GRAPH SIZE\", graph.length / NODE_SIZE, graph);\n        this.graph = graph;\n\n    }\n\n\n    render = ctx =>\n    {\n        const { config, graph } = this;\n\n\n        ctx.save();\n\n        const hw = config.width / 2;\n        const hh = config.height / 2;\n\n        ctx.translate(hw, hh)\n\n        const {length} = graph;\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(-hw, -hh, config.width, config.height)\n\n        // draw original quads and tris\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 1;\n        //\n        //\n        // let outerCount = 0;\n        // for (let pos = 0; pos < config.firstPassLen; pos += SIZE)\n        // {\n        //     const count = faces[pos + 8];\n        //\n        //     if (count >= 3)\n        //     {\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos ],faces[pos + 1]);\n        //\n        //         for (let i = 1; i < count; i++)\n        //         {\n        //             ctx.lineTo(faces[pos + i*2],faces[pos +  i*2 + 1]);\n        //         }\n        //\n        //         ctx.closePath();\n        //         ctx.stroke();\n        //\n        //         // const outmostEdge = faces[pos + 9];\n        //         // if (outmostEdge >= 0)\n        //         // {\n        //         //     ctx.strokeStyle = \"#fe0\";\n        //         //     ctx.beginPath();\n        //         //     ctx.moveTo(faces[pos + outmostEdge * 2  ],faces[pos + outmostEdge * 2 + 1]);\n        //         //\n        //         //     if (outmostEdge === count - 1)\n        //         //     {\n        //         //         ctx.lineTo(faces[pos  ],faces[pos + 1]);\n        //         //     }\n        //         //     else\n        //         //     {\n        //         //         ctx.lineTo(faces[pos + (outmostEdge + 1 ) * 2  ],faces[pos + (outmostEdge + 1 ) * 2 + 1]);\n        //         //     }\n        //         //     ctx.stroke();\n        //         //     ctx.strokeStyle = \"#f00\";\n        //         //\n        //         //     outerCount++;\n        //         //\n        //         // }\n        //\n        //     }\n        // }\n        ///    console.log(\"Number of outer edges\", outerCount)\n\n        //console.log(\"DRAW EDGES\")\n\n        ctx.strokeStyle = \"#fff\";\n        ctx.fillStyle = \"#f0f\";\n        ctx.lineWidth = 1;\n\n\n        function drawEdge(x0, y0, node)\n        {\n            const x1 = graph[node];\n            const y1 = graph[node + 1];\n\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n        }\n\n\n        for (let i = 0; i < length; i += NODE_SIZE)\n        {\n            const x0 = graph[i];\n            const y0 = graph[i + 1];\n            const edgeCount = graph[i + 3];\n\n            for (let j = 0; j < edgeCount; j++)\n            {\n                drawEdge(x0, y0, graph[i + 4 + j])\n            }\n        }\n        //\n        // for (let i = 0; i < length; i += NODE_SIZE)\n        // {\n        //     const x0 = graph[i];\n        //     const y0 = graph[i + 1];\n        //     const isEdge = graph[i + 2];\n        //\n        //     if (isEdge)\n        //     {\n        //         ctx.fillRect(x0 - 4,  y0 - 4, 8, 8)\n        //     }\n        // }\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 4;\n        //\n        // for (let pos = 0; pos < config.firstPassLen; pos += SIZE)\n        // {\n        //     const count = faces[pos + 8];\n        //     const outmostEdge = faces[pos + 9];\n        //\n        //\n        //     const last = count - 1;\n        //     for (let i=0; i < count; i++)\n        //     {\n        //         if (i === outmostEdge)\n        //         {\n        //             ctx.strokeStyle = \"rgba(255,0,0,0.5)\";\n        //         }\n        //         else\n        //         {\n        //             ctx.strokeStyle = \"rgba(0,255,0,0.5)\";\n        //         }\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos + i * 2], faces[pos + i * 2 + 1]);\n        //         ctx.lineTo(\n        //             i === last ? faces[pos    ] : faces[pos + (i+1) * 2],\n        //             i === last ? faces[pos + 1] : faces[pos + (i+1) * 2 + 1]\n        //         );\n        //         ctx.stroke();\n        //     }\n        // }\n\n        ctx.restore();\n\n        if (config.animating)\n        {\n            if (relaxWeighted(config, graph))\n            {\n                config.animating = false;\n            }\n            //            raf(redrawGraph)\n        }\n    }\n\n    get nodeSize()\n    {\n        return SIZE;\n    }\n}\n\n\nexport default OrganicQuads\n"],"sourceRoot":""}