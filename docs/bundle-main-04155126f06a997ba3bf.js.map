{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/../src/index.js","webpack://Demo/./src/loadScene.js","webpack://Demo/./src/loadTexture.js","webpack://Demo/./src/index.js","webpack://Demo/./src/heightLimit.js","webpack://Demo/../src/vector.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","SIXTH","Math","DEFAULT_CONFIG","width","height","numberOfRings","removeEdges","animatedEasing","renderFirstPassEdges","debug","weightFunction","dx","x1","dy","y1","edgeLength","maxIterations","animating","minTension","findOtherEdge","faces","x0","y0","index","out","count","edge","removeRandomEdges","config","stack","Int32Array","pos","scaled","tmp","getEdgeStack","console","stackPos","eraseEdgesOfFaceInStack","success","code","otherIndex","otherEdge","x2","y2","otherIsOutmostTri","subdivide","firstPassLen","numNodes","tris","quads","calculateNumNodes","nodes","Float64Array","tiles","tilePos","insertNode","isEdge","addTile","n0","insertEdge","n1","found","Error","connect","outmostEdge","firstEdgeIsOutmost","secondEdgeIsOutmost","m0x","m0y","m1x","m1y","m2x","m2y","cx","cy","n2","n3","n4","n5","n6","x3","y3","m3x","m3y","n7","n8","newTiles","numConnections","k","otherNode0","otherNode1","otherNode2","otherNode3","connectTiles","relaxWeighted","graph","tension","edgeCount","centerX","centerY","sumWeight","other","weight","ctx","hw","hh","limit","updateConfig","this","DIRECTIONS","Vector","off","numTris","v0","v1","v2","isOutmost","createHexagonTriangles","start","loader","GLTFLoader","url","onProgress","Promise","resolve","reject","load","TextureLoader","PI","container","camera","scene","renderer","light","controls","water","tileData","heightMap","materials","organicQuads","MATERIAL_NAMES","CASE_NAMES","GROUND_COLORS","GROUND_ROUGHNESS","heightFn","z0","distance","sqrt","heightLimit","max","MAX_HEIGHT","noise","noise2D","tmpHeight","h_ground","createScene","OrganicQuads","graphUserData","heightMapFactor","g_size","g_x","g_y","t_size","tileDataPos","t_n0","t_n1","t_n2","t_n3","updateCentroids","tileDataFactor","tileDataIndex","tileDataIndex0","t_tile0","tileDataIndex1","t_tile1","tileDataIndex2","t_tile2","tileDataIndex3","t_tile3","cutMask","abs","heightMapIndex0","heightIndexFactor","heightMapIndex1","cut0","cut1","edgeAfter","heightOnQuadBefore","heightOnQuadAfter","height0","height1","cutCliffs","tileIndex","t_isEdge","findEdgeTile","log","visited","Set","walkRecursive","has","add","testWalkability","heightMapPos","nodePos","generateGround","SimplexNoise","cubeCamera","sky","skyParameters","updateSun","theta","phi","position","x","cos","y","sin","z","material","uniforms","copy","normalize","update","init","document","getElementById","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","Scene","PerspectiveCamera","set","DirectionalLight","CubeCamera","renderTarget","texture","generateMipmaps","minFilter","LinearMipmapLinearFilter","background","waterGeometry","PlaneBufferGeometry","Water","textureWidth","textureHeight","waterNormals","alpha","sunDirection","clone","sunColor","waterColor","distortionScale","clipBias","fog","side","DoubleSide","rotation","Sky","OrbitControls","maxPolarAngle","target","minDistance","maxDistance","enableDamping","dampingFactor","addEventListener","onWindowResize","marchingSquaresArray","WATER","createMarchingSquares","attrsArray","positionsArray","attrs","positions","MeshStandardMaterial","color","Color","roughness","onBeforeCompile","shader","vertexShader","replace","ms_attrs_size","geo","positionBuffer","InterleavedBuffer","Float32Array","geometry","InstancedBufferGeometry","BufferGeometry","setAttribute","InterleavedBufferAttribute","mesh","InstancedMesh","idx","dummy","updateMatrix","setMatrixAt","matrix","needsUpdate","addMarchingSquareObjects","Object3D","ground","Array","heightIndex0","heightIndex1","heightIndex2","heightIndex3","centroidX","centroidY","centroidZ","z1","z2","z3","ax","ay","az","bx","by","bz","cz","nx","ny","nz","f","g1","g2","g4","g8","tileCase","aspect","updateProjectionMatrix","mainLoop","time","performance","now","WATER_LIMIT","render","raf","all","loadScene","loadTexture","then","marchingSquares","tWaterNormals","map","children","find","kid","array","indexOf","extractMarchingSquares","wrapS","wrapT","RepeatWrapping","targetLength","scale"],"mappings":"qBACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,GAExB,IAAIC,EAAaC,OAAyB,iBAAIA,OAAyB,kBAAK,GACxEC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAM1B,OAFA1C,EAAgBJ,KAAK,CAAC,GAAG,IAElBM,I,+cCvJT,cACA,U,sgEAEO,E,OACA,E,OACA,E,OACA,E,OACA,E,OACA,E,OACA,E,OACA,E,UACA,E,gBACA,E,SACA,G,MAEA,E,MACA,E,WACA,E,UACA,E,UACA,E,UACA,E,UACA,E,UACA,E,UACA,E,UACA,E,SACA,G,OAGA,E,OACA,E,OACA,E,OACA,E,WACA,E,UACA,E,UACA,E,UACA,E,UACA,E,SACA,EAEP,IAEM0C,EAFN,EAAYC,QAEZ,EAQA,IAAMC,EAAiB,CAEnBC,MAFmB,EAInBC,OAJmB,EAMnBC,cANmB,EAQnBC,YARmB,GAWnBC,gBAXmB,EAcnBC,sBAdmB,EAiBnBC,OAjBmB,EAmBnBC,eAAiB,kBACb,IAAMC,EAAKC,EAAX,EACMC,EAAKC,EAAX,EACA,OAAOb,UAAUU,IAAUE,EAA3B,IAMJE,WA5BmB,GA8BnBC,cA9BmB,IAgCnBC,WAhCmB,EAmCnBC,WAAY,GA6GhB,SAASC,EAAcC,EAAOC,EAAIC,EAAIV,EAAIE,EAAIS,EAAOC,GAEjD,IAAK,IAAIhF,EAAT,EAAgBA,EAAI4E,EAApB,OAAkC5E,GAtL/B,GAwLC,GAAIA,IAAJ,GAYA,IAAMiF,EAAQL,EAAM5E,EAtMrB,GAuMC,GACI4E,EAAM5E,EAhNX,KAgNK4E,GAA0BA,EAAM5E,EA/MrC,KA+MK4E,GACAA,EAAM5E,EA/MX,KA8MK4E,GAC0BA,EAAM5E,EA9MrC,KA4MC,EAOI,OAFAgF,eACAA,UAGJ,GACIJ,EAAM5E,EAvNX,KAuNK4E,GAA0BA,EAAM5E,EAtNrC,KAsNK4E,GACAA,EAAM5E,EAtNX,KAqNK4E,GAC0BA,EAAM5E,EArNrC,KAmNC,EAOI,OAFAgF,eACAA,UAIJ,OAAIC,GAEA,GACIL,EAAM5E,EAjOf,KAiOS4E,GAA0BA,EAAM5E,EAhOzC,KAgOS4E,GACAA,EAAM5E,EAtOf,KAqOS4E,GAC0BA,EAAM5E,EArOzC,KAmOK,EAOI,OAFAgF,eACAA,cAKR,CACI,GACIJ,EAAM5E,EA7Of,KA6OS4E,GAA0BA,EAAM5E,EA5OzC,KA4OS4E,GACAA,EAAM5E,EA5Of,KA2OS4E,GAC0BA,EAAM5E,EA3OzC,KAyOK,EAOI,OAFAgF,eACAA,UAIJ,GACIJ,EAAM5E,EArPf,KAqPS4E,GAA0BA,EAAM5E,EApPzC,KAoPS4E,GACAA,EAAM5E,EA5Pf,KA2PS4E,GAC0BA,EAAM5E,EA3PzC,KAyPK,EAOI,OAFAgF,eACAA,WAOZA,WAIJ,IAAMA,EAAM,CAACD,OAAD,EAAYG,KAAM,GAqC9B,SAASC,EAAkBC,EAAQR,GAE/B,IAAMK,EAASG,oBAA2BA,EAA3BA,YAAD,IADlB,EAKUC,EAxCV,SAAsBD,EAAQR,GAM1B,IAJA,IAAM1E,EAAN,EAAekF,WACTC,EAAQ,IAAIC,WAAlB,GAEIC,EAAJ,EACSvF,EAAT,EAAgBA,EAAIoF,EAApB,aAAyCpF,GA1QtC,GA2QH,CAMI,KALoB4E,EAAM5E,EA7Q3B,IA4QH,GAOI,CACI,IAAMwF,EAASxF,GAAf,EACAqF,EAAME,KAANF,EACAA,EAAME,KAASC,EAAfH,EACAA,EAAME,KAASC,EAAfH,GAKR,IAAK,IAAIrF,EAAT,EAAiBA,EAAIuF,EAArB,EAA8BvF,IAC9B,CACI,IAAMkB,EAAIlB,GAAMyD,kBAAD,EAAf,GACMgC,EAAMJ,EAAZ,GACAA,KAAWA,EAAXA,GACAA,OAEJ,OAAOA,UAAP,GAUcK,CAAaN,EAA3B,GAEIA,EAAJ,OAEIO,+BAAoCN,EAApCM,UAiCJ,IA9BA,IAAIC,EAAJ,EAGMC,EAA0B,SAAAd,GAE5B,IAAK,IAAI/E,EAAT,EAAuBA,EAAIqF,EAA3B,OAAyCrF,IAEhCqF,OAAD,IAAJ,IAEIA,UAORS,EA5BR,EA0Ca9F,EAAT,EAAgBA,EAAhB,EAA2BA,IAC3B,CACI,IAAI+F,OAAI,EACR,EACA,CACI,GAAIH,IAAaP,EAAjB,OAOI,YALID,EAAJ,OAEIA,SAAgBO,mFAAhBP,IAKRW,EAAOV,EAAMO,YAXjB,IAYSG,GAGT,IAAMhB,EAAQgB,GAAd,EACMb,EAAN,EAAaa,EAQb,GADApB,EAAcC,EALHA,EAAMG,EAAjB,EAAyBG,GACdN,EAAMG,IAAQG,EAAzB,GACWA,MAAaN,EAAMG,EAlX/B,GAkX+CH,EAAMG,EAApD,GAA6DG,EAAD,IACjDA,MAAaN,EAAMG,EAlX/B,GAkX+CH,EAAMG,KAASG,EAAD,GAA5D,GAEqCH,EAArCJ,GACIK,YAAJ,IAAsBJ,EAAMI,QA9W7B,GA+WC,KACkBgB,EAA+BhB,EADjD,MACoCiB,EAAajB,EADjD,KAEUkB,EAAKhB,MAAaN,EAAMG,EArXnC,GAqXmDH,EAAMG,EAApD,GAA6DG,EAAD,IACtDiB,EAAKjB,MAAaN,EAAMG,EArXnC,GAqXmDH,EAAMG,KAASG,EAAD,GAHhE,GAOUkB,EADcxB,EAAMoB,EAA1B,IANJ,EAiBI,OADApB,EAAMoB,EAANpB,KACA,GAEI,OACIA,EAAMoB,EArYnB,GAqYapB,EACAA,EAAMoB,EArYnB,GAqYapB,EACA,MACJ,OACIA,EAAMoB,EAzYnB,GAyYwCpB,EAAMoB,EA3Y9C,GA4YapB,EAAMoB,EAzYnB,GAyYwCpB,EAAMoB,EA3Y9C,GA4YapB,EAAMoB,EA7YnB,GA6YapB,EACAA,EAAMoB,EA7YnB,GA6YapB,EACA,MACJ,OACIA,EAAMoB,EA/YnB,GA+YwCpB,EAAMoB,EAjZ9C,GAkZapB,EAAMoB,EA/YnB,GA+YwCpB,EAAMoB,EAjZ9C,GAkZapB,EAAMoB,EAnZnB,GAmZwCpB,EAAMoB,EArZ9C,GAsZapB,EAAMoB,EAnZnB,GAmZwCpB,EAAMoB,EArZ9C,GAsZapB,EAAMoB,EAvZnB,GAuZapB,EACAA,EAAMoB,EAvZnB,GAuZapB,EAEA,IAEIA,EAAMoB,EArZvB,GAqZiBpB,GAMZiB,EA7CJ,GAgDIjB,EAAMG,EA/ZX,GA+ZKH,EAEAkB,IAEJD,KAMJ,OAFAT,SAAgBO,8CAAhBP,GAEA,EAiFJ,SAASiB,EAAUjB,EAAQR,GA6FvB,IA5FJ,IACY0B,EAAiBlB,EAD7B,aAGUmB,EAjFV,SAA2BnB,EAAQR,GAI/B,IAFA,IAAI4B,EAAJ,EACIC,EAAJ,EACSzG,EAAT,EAAgBA,EAAIoF,EAApB,aAAyCpF,GA/atC,GAgbH,CACI,IAAMiF,EAAQL,EAAM5E,EAnbrB,GAqbC,IAAIiF,EAEAuB,IAEC,IAAIvB,GAELwB,IAOR,OAAOA,IAAP,EAAmBD,EA4DFE,CAAkBtB,EAAnC,GAEMuB,EAAQ,IAAIC,aAlff,GAkf4BL,GAGzBM,EAAQ,IAAIvB,WAzef,GAye4BiB,EAAD,EAAD,IAEzBhB,EAAJ,EACIuB,EAAJ,EAEMC,EAAa,SAAClC,EAAIC,EAAIkC,GAExBnC,KACAC,KAEA,IAAK,IAAI9E,EAAT,EAAgBA,EAAhB,EAAyBA,GA/f1B,GAigBK,GAAIyD,SAASkD,KAATlD,MAA+BA,SAASkD,EAAM3G,EAAN2G,GAATlD,GAAnC,EAYI,OALIuD,IAAWL,EAAM3G,EAArB,KAEI2G,EAAM3G,EAAN2G,MAGJ,EAIR,IAAM5B,EAAN,EASA,OAPA4B,EAAMpB,EA7hBP,GA6hBCoB,EACAA,EAAMpB,EA7hBP,GA6hBCoB,EACAA,EAAMpB,EA7hBP,GA6hByByB,EAAS,EAAjCL,EACAA,EAAMpB,EA7hBP,GA6hBCoB,EAEApB,GAxhBD,GA0hBC,GAGE0B,EAAW,SAACC,EAAD,OAIbL,EAAMC,EA9hBP,GA8hBCD,EACAA,EAAMC,EA9hBP,GA8hBCD,EACAA,EAAMC,EA9hBP,GA8hBCD,EACAA,EAAMC,EA9hBP,GA8hBCD,EAEAC,GA1hBD,GA6hBGK,EAAa,SAACD,EAAIE,GAIpB,IAHA,IAAInC,EAAQ0B,EAAMO,EAjjBnB,GAmjBKG,GAAJ,EACSrH,EAAT,EAAgBA,EAAhB,EAA2BA,IAC3B,CAEI,GADc2G,EAAMO,EArjBzB,EAqjBK,KACA,EACA,CACIG,KACA,OAGR,MACA,CACI,GAAIpC,GAAJ,EAEI,MAAM,IAAIqC,MAAV,4BAGJX,EAAMO,EAnkBX,EAmkB0BjC,KAArB0B,EACAA,EAAMO,EArkBX,GAqkBKP,IAIFY,EAAU,SAACL,EAAIE,GAEjBD,EAAWD,EAAXC,GACAA,EAAWC,EAAXD,IAIKnH,EAAT,EAAgBA,EAAhB,EAAkCA,GArlB/B,GAslBH,CACI,IAAMiF,EAAQL,EAAM5E,EAzlBrB,GA2lBO6E,EAAKD,EAAM5E,EAnmBlB,GAomBO8E,EAAKF,EAAM5E,EAnmBlB,GAomBOoE,EAAKQ,EAAM5E,EAnmBlB,GAomBOsE,EAAKM,EAAM5E,EAnmBlB,GAomBOkG,EAAKtB,EAAM5E,EAnmBlB,GAomBOmG,EAAKvB,EAAM5E,EAnmBlB,GAqmBOwH,EAAc5C,EAAM5E,EAjmB3B,GAmmBOyH,EAAN,IAA2BD,EACrBE,EAAN,IAA4BF,EAE5B,OAAIvC,EACJ,CACI,IAAM0C,GAAO9C,EAAD,GAAZ,EACM+C,GAAO9C,EAAD,GAAZ,EACM+C,GAAOzD,EAAD,GAAZ,EACM0D,GAAOxD,EAAD,GAAZ,EACMyD,GAAO7B,EAAD,GAAZ,EACM8B,GAAO7B,EAAD,GAAZ,EAEM8B,GAAMpD,IAAD,GAAX,EACMqD,GAAMpD,IAAD,GAAX,EAEMoC,EAAKH,EAAWlC,EAAtB,GACMuC,EAAKL,EAAWY,EAAtB,GACMQ,EAAKpB,EAAW3C,EAAIE,EAA1B,GACM8D,EAAKrB,EAAWc,EAAKC,EAA3B,GACMO,EAAKtB,EAAWb,EAAIC,EAA1B,GACMmC,EAAKvB,EAAWgB,EAAtB,GACMQ,EAAKxB,EAAWkB,EAAtB,GAEAV,EAAQL,EAARK,GACAA,EAAQH,EAARG,GACAA,EAAQgB,EAARhB,GACAA,EAAQe,EAARf,GAEAA,EAAQH,EAARG,GACAA,EAAQY,EAARZ,GACAA,EAAQa,EAARb,GACAA,EAAQgB,EAARhB,GAEAA,EAAQe,EAARf,GACAA,EAAQgB,EAARhB,GACAA,EAAQa,EAARb,GACAA,EAAQc,EAARd,GAEAN,EAAQC,EAAD,IAAPD,GACAA,EAAQG,EAAD,IAAPH,GACAA,EAAQqB,EAAD,IAAPrB,QAGC,OAAIhC,EACT,CACI,IAAMuD,EAAK5D,EAAM5E,EAnpBtB,GAopBWyI,EAAK7D,EAAM5E,EAnpBtB,GAqpBW2H,GAAO9C,EAAD,GAAZ,EACM+C,GAAO9C,EAAD,GAAZ,EACM+C,GAAOzD,EAAD,GAAZ,EACM0D,GAAOxD,EAAD,GAAZ,EACMyD,GAAO7B,EAAD,GAAZ,EACM8B,GAAO7B,EAAD,GAAZ,EACMuC,GAAOF,EAAD,GAAZ,EACMG,GAAOF,EAAD,GAAZ,EAEMR,GAAMpD,MAAD,GAAX,EACMqD,GAAMpD,MAAD,GAAX,EAEMoC,EAAKH,EAAWlC,EAAtB,GACMuC,EAAKL,EAAW,EAAtB,GACMoB,EAAKpB,EAAW3C,EAAIE,EAA1B,GACM8D,EAAKrB,EAAW,EAAD,EAArB,GACMsB,GAAKtB,EAAWb,EAAIC,EAAIsB,GAA9B,GACMa,GAAKvB,EAAW,EAAD,EAArB,GACMwB,GAAKxB,EAAWyB,EAAIC,EAA1B,GACMG,GAAK7B,EAAW2B,EAAtB,GACMG,GAAK9B,EAAW,EAAtB,GAEAQ,EAAQ,EAARA,GACAA,EAAQ,EAARA,GACAA,EAAQ,EAARA,GACAA,EAAQ,EAARA,IACAA,EAAQ,GAARA,IACAA,EAAQ,GAARA,IACAA,EAAQ,GAARA,IACAA,EAAQqB,GAARrB,GAEAA,EAAQsB,GAARtB,GACAA,EAAQsB,GAARtB,IACAA,EAAQsB,GAARtB,IACAA,EAAQsB,GAARtB,GAEAN,EAAQ,EAAD,KAAPA,IACAA,EAAQ,EAAD,IAAPA,IACAA,EAAQ4B,GAAD,KAAP5B,IACAA,EAAQ2B,GAAD,MAAP3B,KAORtB,+BAAgCkB,EAAhClB,OAA8C,YAA9CA,GAEA,IAAMmD,GAAWjC,UAAjB,GAIA,OAjQJ,SAAsBzB,EAAQyB,GAI1B,IAHJ,IACY3G,EAAW2G,EADvB,OAGa7G,EAAT,EAAcA,EAAd,EAA0BA,GAjbvB,EAkbH,CAEI,IADA,IAAI+I,EAAJ,EACS7H,EAAT,EAAgBA,EAAhB,EAAuBA,IACvB,CAKI,IAJA,IAAMgG,EAAKL,EAAM7G,EA/btB,EA+bK,GACMoH,EAAKlG,MAAU2F,EAAM7G,EAhchC,GAgc6C6G,EAAM7G,EAhcnD,EAgcmDA,EAA9C,GAEIgG,GAAJ,EACSgD,EAAT,EAAcA,EAAInC,EAAlB,OAAgCmC,GA1brC,EA4bS,GAAIA,IAAJhJ,EAAA,CAKA,IAAMiJ,EAAapC,EAAMmC,EA1clC,GA2ceE,EAAarC,EAAMmC,EA1clC,GA2ceG,EAAatC,EAAMmC,EA1clC,GA2ceI,EAAavC,EAAMmC,EA1clC,GA+cS,GACIE,OAAqBD,IAArBC,GACAC,OAAqBD,IADrBA,GAEAE,OAAqBD,IAFrBD,GAGAD,OAAqBG,IAJzB,EAMA,CAEIpD,IACA+C,IACA,OAIRlC,EAAM7G,EA3dX,EA2dK6G,KAEJA,EAAM7G,EA9dP,GA8duB+I,QAAtBlC,EAGJzB,SAAgBO,yBAAhBP,GAgNAiE,CAAajE,EAAbiE,IAEO,CAAC1C,UAAD,GAAP,IAIJ,SAAS2C,EAAclE,EAAQmE,GAK3B,IAJJ,IADsC/E,EACtC,uDADsD,EAG3CtE,EAAUqJ,EAFrB,OAIavJ,EAAT,EAAgBA,EAAhB,EAAmCA,IACnC,CAEI,IADA,IAAIwJ,EAAJ,EACStI,EAAT,EAAgBA,EAAhB,EAA4BA,GAtsB7B,GAwsBK,IAAKqI,EAAMrI,EAhtBhB,GAitBK,CASI,IARA,IAAM2D,EAAK0E,EAAMrI,EAptB1B,GAqtBe4D,EAAKyE,EAAMrI,EAptB1B,GAqtBeuI,EAAYF,EAAMrI,EAntBjC,GAqtBawI,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EAESZ,EAAT,EAAgBA,EAAhB,EAA+BA,IAC/B,CACI,IAAMa,EAAQN,EAAMrI,IAApB,GAEMkD,EAAKmF,EAAX,GACMjF,EAAKiF,EAAMM,EAAjB,GAEMC,EAAS1E,uBAAf,GAEAsE,GAAWtF,EAAXsF,EACAC,GAAWrF,EAAXqF,EACAC,KAGJ,IAAMxF,EAAKsF,EAAX,EACMpF,EAAKqF,EAAX,EAEMxF,EAAKC,EAAX,EACMC,EAAKC,EAAX,EAEAiF,EAAMrI,EAhvBf,GAgvBSqI,EACAA,EAAMrI,EAhvBf,GAgvBSqI,EAEAC,GAAWrF,IAAUE,EAArBmF,EAKR,GAAIA,EAAUpE,EAAd,WAGI,OADAA,SAAgBO,sCAAuCP,EAAvCO,mBAAmEP,EAAnEO,WAAhBP,eACA,EAEJA,eAQJ,OALKA,EAAL,gBAEIA,SAAgBO,YAAY,mCAAqCP,EAAjEA,gBAGJ,E,MAQA,cACA,Y,4FAAA,qBAqCS,SAAA2E,GACT,IACY3E,EAAyB,EADrC,OACoBmE,EAAiB,EADrC,MAC2B3E,EAAU,EADrC,MAIImF,SAEA,IAAMC,EAAK5E,QAAX,EACM6E,EAAK7E,SAAX,EAEA2E,iBAEiBR,EAXrB,OAgBI,GAHAQ,mBACAA,iBAAuB3E,EAAvB2E,MAAqC3E,EAArC2E,QAEI3E,EAAJ,qBACA,CAII2E,qBACAA,cAIA,IADA,IACSxE,EAAT,EAAkBA,EAAMH,EAAxB,aAA6CG,GAh1BlD,GAi1BK,CACI,IAAMN,EAAQL,EAAMW,EAp1B7B,GAs1BS,GAAIN,GAAJ,EACA,CAEI8E,cACAA,SAAWnF,EAAMW,EAl2B9B,GAk2B2CX,EAAMW,EAj2BjD,IAm2Ba,IAAK,IAAIvF,EAAT,EAAgBA,EAAhB,EAA2BA,IAEvB+J,SAAWnF,EAAMW,EAAjBwE,EAAuB/J,GAAK4E,EAAMW,IAAOvF,EAAzC+J,IAGJA,cACAA,WAEA,IAAMvC,EAAc5C,EAAMW,EAn2BvC,GAo2BiBiC,GAAJ,IAEIuC,qBACAA,cACAA,SAAWnF,EAAMW,EAAjBwE,EAAuBvC,GAAmB5C,EAAMW,IAAMiC,EAAtDuC,IAEIvC,IAAgBvC,EAApB,EAEI8E,SAAWnF,EAAMW,EAr3BtC,GAq3BmDX,EAAMW,EAp3BzD,IAw3BqBwE,SAAWnF,EAAMW,EAAjBwE,GAAwBvC,EAAD,IAA0B5C,EAAMW,KAAOiC,EAAD,GAA7DuC,IAEJA,WACAA,wBAsFhBA,YAEI3E,EAAJ,WAEQkE,EAAclE,EAAlB,KAEIA,iBA5LR,IAxsBcA,EA5CU8E,EAovBlB9E,EAAS,EAAH,QAAZ,IAxsBcA,EA6sBd+E,GA3sBJ/E,SA5CO,IAFqB8E,EA8Ca9E,EAAzCA,eA5CO,IAAmB8E,EAA1B,GA6CA9E,eA7EG,GA6EmBA,WACtBA,sBAA2BA,WAC3BA,aAAsB3B,SAAS2B,EAAT3B,MAAuB2B,EAAvB3B,SAAyC2B,kBAA3C,GAApBA,EACAA,YAAmBA,EAAnBA,eACAA,eAwsBIgF,KAAA,SAEA,IAAMxF,EAtsBd,SAAgCQ,GAG5B,IAAM8E,EAAQ9E,EAFlB,cAMUiF,EAAa,CACf,IAAIC,EAAJ,QACI7G,YAAc2B,EADlB,WAEI3B,YAAc2B,EAHH,YAKf,IAAIkF,EAAJ,QACI7G,YAAkB2B,EADtB,WAEI3B,YAAkB2B,EAPP,YASf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAXX,YAaf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAfX,YAiBf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAnBX,YAqBf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAvB9B,aA2BMR,EAAQ,IAAIgC,aAAaxB,EAA/B,cAEImF,EAAJ,EAEItF,EAAJ,EACIuF,EAAJ,EACA,EACA,CACI,IAAK,IAAIxK,EAAT,EAAgBA,EAAhB,EAAuBA,IAQnB,IANA,IAAMyK,EAAKJ,EAAX,GACMK,EAAKL,GAAYrK,EAAD,GAAtB,GACM2K,EAAKN,GAAYrK,EAAD,GAAtB,GAEIuF,EAAMkF,eAAV,GAESvJ,EAAT,EAAgBA,EAAhB,EAA6BA,IAEzB,KAAIA,EAEA0D,EAAM2F,EArJnB,GAqJa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EArJnB,GAqJa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EArJnB,GAqJkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EArJnB,GAqJkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EArJnB,GAqJkChF,IAAQoF,EAAT,EAApB/F,EACAA,EAAM2F,EArJnB,GAqJkChF,IAAQoF,EAAT,EAApB/F,EACAA,EAAM2F,EAnJnB,GAmJa3F,EACAA,EAAM2F,EAnJnB,IAmJa3F,EAEA2F,GApJb,GAsJahF,aAGJ,CAGI,IAAMqF,EAAY3F,IAAlB,EAEAL,EAAM2F,EAxKnB,GAwKa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EAxKnB,GAwKa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EAxKnB,GAwKkChF,IAAQkF,EAAT,EAApB7F,EACAA,EAAM2F,EAxKnB,GAwKkChF,IAAQkF,EAAT,EAApB7F,EACAA,EAAM2F,EAxKnB,GAwKkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EAxKnB,GAwKkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EAtKnB,GAsKa3F,EACAA,EAAM2F,EAtKnB,GAsK0CK,EAAY,GAAzChG,EAEA2F,GAvKb,GA4KCC,WAEKvF,IAjDT,GAmDA,SA2mBkB4F,CAAd,GAEIzF,EAAJ,uBAEIgF,KAAA,MAAahF,kCAA2CR,EAA3CQ,QAAb,GAGJ,IAAM0F,EAAQ1F,UAAgB,IAA9B,WAEAD,EAAkB,EAAlBA,GAEAC,SAAgBO,gCAAiC,eAAjCA,EAAhBP,MAtBJ,QAwB2BiB,EAAU,EAxBrC,MAwBWkD,EAxBX,KAwBkB1C,EAxBlB,KAyBIuD,KAAA,QAEKhF,EAAL,WAEIkE,EAAc,EAAD,EAAgBlE,EAA7BkE,eAGJc,KAAA,S,0HCzzBFW,EAAS,I,MAAIC,GAEJ,WAASC,GACxB,IAD6BC,EAC7B,uDAD0C,KAEtC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAE1BN,EAAOO,KAEHL,EAEAG,EAEAF,EAEAG,O,wBCfNN,EAAS,IAAIQ,K,m6DCgDP9H,KAAK+H,GAAjB,IAsFIC,EACAC,EAAQC,EAAOC,EAAUC,EACzBC,EAAUC,EAWVC,EACAC,EACAC,EA8BAC,EArGEC,EAAiB,CACnB,QACA,OACA,QACA,OACA,SACA,SAGEC,EAAa,CACf,KACA,SACA,SACA,SACA,SACA,WACA,SACA,SACA,SACA,SACA,YACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGEC,GAAa,OAzCL,EA0CD,CAAC,EAAG,GAAK,KADH,IAxCN,EA0CD,CAAC,GAAK,GAAK,IAFJ,IAvCL,EA0CD,CAAC,EAAG,GAAK,IAHH,IAtCN,EA0CD,CAAC,GAAK,GAAK,KAJJ,IArCJ,EA0CD,CAAC,GAAK,GAAK,KALN,IApCL,EA0CD,CAAC,GAAK,GAAK,KANL,IAnCD,EA0CD,CAAC,EAAG,EAAG,IAPL,GAUbC,GAAgB,OAnDR,EAoDD,GADS,IAlDT,EAoDD,GAFU,IAjDR,EAoDD,GAHS,IAhDT,EAoDD,GAJU,IA/CP,EAoDD,GALQ,IA9CR,EAoDD,IANS,IA7CJ,EAoDD,GAPK,GA8DtB,SAASC,EAAS3H,EAAI4H,GAElB,IAAMC,EAAWjJ,KAAKkJ,KAAK9H,EAAKA,EAAK4H,EAAKA,GACpCvC,EAAQ0C,YAAY,EAAIF,EAAW,KAEzC,OAAOjJ,KAAKoJ,IAAI,GAlIGC,WAIH,IA8HsBC,EAAMC,QAjI1B,KAiIkCnI,EAjIlC,KAiIsD4H,GAAoCM,EAAMC,QAhIhG,IAgIwGP,EAhIxG,IAgI4H5H,IAAuB,EA9HrJ,OA8H2LqF,GAI/M,IAAM+C,EAAY,IAAIrG,aAAa,GAwFnC,IACMsG,EAAW,EAIjB,SAASC,IACT,MAEIhB,EAAe,IAAIiB,IAAa,CAC5BvJ,cAzOO,EA0OPF,MAhOK,KAiOLC,OAjOK,KAkOLyJ,cAAe,IAYZ9D,EAlBX,EAkBWA,MACArJ,GAnBX,EAkBkB2G,MAlBlB,EAkByBzB,OACJmE,EAAVrJ,QAEDoN,EAzBK,EAyBsBC,SAEjCtB,EAAY,IAAIrF,aAAa1G,EAASoN,GAEtC,IADA,IAAI/H,EAAM,EACDvF,EAAI,EAAGA,EAAIE,EAAQF,GAAKuN,SAE7BtB,EAAU1G,EAjCD,GAiCmBiH,EAASjD,EAAMvJ,EAAIwN,OAAMjE,EAAMvJ,EAAIyN,QAC/DxB,EAAU1G,EAAM2H,GA9ON,EAgPV3H,GAlCO,EAqCXyG,EAAW,IAAIpF,aAAcuF,EAAatF,MAAM3G,OAASwN,SA7K7C,GAOhB,WAMI,IALJ,MAC2BvB,EAAhB5C,EADX,EACWA,MAAO1C,EADlB,EACkBA,MACP3G,EAAU2G,EAAV3G,OAEHyN,EAAc,EACT3N,EAAI,EAAGA,EAAIE,EAAQF,GAAK0N,SACjC,CACI,IAAMxG,EAAKL,EAAM7G,EAAI4N,QACfxG,EAAKP,EAAM7G,EAAI6N,QACf1F,EAAKtB,EAAM7G,EAAI8N,QACf1F,EAAKvB,EAAM7G,EAAI+N,QAErB/B,EAAS2B,EA3BH,IA2B2BpE,EAAMrC,EAAKsG,OAAOjE,EAAMnC,EAAKoG,OAAOjE,EAAMpB,EAAKqF,OAAOjE,EAAMnB,EAAKoF,QAAQ,EAC1GxB,EAAS2B,EA3BH,IA2B2BpE,EAAMrC,EAAKuG,OAAOlE,EAAMnC,EAAKqG,OAAOlE,EAAMpB,EAAKsF,OAAOlE,EAAMnB,EAAKqF,QAAQ,EAC1GzB,EAAS2B,EA3BG,GA2B0B,EACtC3B,EAAS2B,EA3BD,IA2B2B,EACnC3B,EAAS2B,EA3BD,IA2B2B,EACnC3B,EAAS2B,EA3BD,IA2B2B,EACnC3B,EAAS2B,EA3BD,IA2B2B,EAEnCA,GA5BQ,GA8KZK,GA7HJ,WASI,IARJ,MAE2B7B,EAATtF,GAFlB,EAEW0C,MAFX,EAEkB1C,OAEP3G,EAAU2G,EAAV3G,OAED+N,EAxDM,EAwDqBP,SAExB1N,EAAI,EAAGA,EAAIE,EAAQF,GAAK0N,SACjC,CAEI,IAAMQ,EAAgBlO,EAAIiO,EACpBE,EAAiBtH,EAAM7G,EAAIoO,WAAWH,EACtCI,EAAiBxH,EAAM7G,EAAIsO,WAAWL,EACtCM,EAAiB1H,EAAM7G,EAAIwO,WAAWP,EACtCQ,EAAiB5H,EAAM7G,EAAI0O,WAAWT,EAE5ChB,EAAU,GAAKT,EAASR,EAASkC,GAAgBlC,EAASkC,EAAgB,IAE1EjB,EAAU,GACNkB,GAAkB,EAAI3B,EAASR,EAASmC,EA7EtC,GA6E+DnC,EAASmC,EA5ExE,KA4EoG,EAC1GlB,EAAU,GACNoB,GAAkB,EAAI7B,EAASR,EAASqC,EA/EtC,GA+E+DrC,EAASqC,EA9ExE,KA8EoG,EAC1GpB,EAAU,GACNsB,GAAkB,EAAI/B,EAASR,EAASuC,EAjFtC,GAiF+DvC,EAASuC,EAhFxE,KAgFoG,EAC1GtB,EAAU,GACNwB,GAAkB,EAAIjC,EAASR,EAASyC,EAnFtC,GAmF+DzC,EAASyC,EAlFxE,KAkFoG,EAI1G,IAAIE,EAAU,EAoBd,GAlBIR,GAAkB,GAAK1K,KAAKmL,IAAI3B,EAAU,GAAKA,EAAU,IArK7C,KAuKZ0B,GAAW,GAGXN,GAAkB,GAAK5K,KAAKmL,IAAI3B,EAAU,GAAKA,EAAU,IA1K7C,KA4KZ0B,GAAW,GAEXJ,GAAkB,GAAK9K,KAAKmL,IAAI3B,EAAU,GAAKA,EAAU,IA9K7C,KAgLZ0B,GAAW,GAEXF,GAAkB,GAAKhL,KAAKmL,IAAI3B,EAAU,GAAKA,EAAU,IAlL7C,KAoLZ0B,GAAW,GAGC,IAAZA,EAEA,IAAK,IAAIzN,EAAI,EAAGA,EAAI,EAAGA,IAEnB,GAAIyN,EAAW,GAAKzN,EACpB,CACI,IAAM2N,EAAkBhI,EAAM7G,EAAI4N,OAAO1M,GAAK4N,GACxCC,GAAyB,IAAN7N,EAAU2F,EAAM7G,EAAI4N,QAAQ/G,EAAM7G,EAAI4N,OAAO1M,EAAI,IAAM4N,GAE1EE,EAjHV,EAiH2B9N,EACjB+N,EAAa,IAAN/N,EAlHjB,IAkH+CA,EAAI,EAGzCgO,EAAkB,IAANhO,EAAU,EAAIA,EAAI,EAE9BiO,EAAqBlC,EAAU,GAHZ,IAAN/L,EAAU,EAAIA,EAAI,IAI/BkO,EAAoBnC,EAAU,EAAIiC,GAClCG,EAAUF,GAAsB,GAAKA,EAAqBlC,EAAU,IAAM,EAAIA,EAAU,GACxFqC,EAAUF,GAAqB,GAAKnC,EAAU,GAAKmC,GAAqB,EAAInC,EAAU,GAE5FjB,EAASkC,EAAgBc,GAAQK,EACjCrD,EAASkC,EAAgBe,GAAQK,EACjCrD,EAAU4C,EAAkB3B,GAjMlC,EAkMMjB,EAAU8C,EAAkB7B,GAlMlC,EAqMMrG,EAAM7G,EAAIoO,UAAUlN,IAAM,IAiD1CqO,GA6DJ,WAEI,IAAMC,EASV,WAMI,IALJ,IACW3I,EAASsF,EAATtF,MAEA3G,EAAU2G,EAAV3G,OAEEF,EAAI,EAAGA,EAAIE,EAAQF,GAAK0N,SAE7B,GAAI7G,EAAM7G,EAAIyP,YAEV,OAAOzP,EAGf,MAAM,IAAIsH,MAAM,aAtBEoI,GAElB/J,QAAQgK,IAAI,wBAAyBH,EAAY9B,UAEjD,IAAMkC,EAAU,IAAIC,KAyBxB,SAASC,EAAcN,EAAWI,GAE9B,GAAIJ,GAAa,IAAMI,EAAQG,IAAIP,GACnC,CACII,EAAQI,IAAIR,GADhB,IAGW3I,EAASsF,EAATtF,MAEPmF,EAASwD,EAAYvB,EAxRT,GAwRyC,EAErD6B,EAAcjJ,EAAM2I,EAAYpB,WAAUwB,GAC1CE,EAAcjJ,EAAM2I,EAAYlB,WAAUsB,GAC1CE,EAAcjJ,EAAM2I,EAAYhB,WAAUoB,GAC1CE,EAAcjJ,EAAM2I,EAAYd,WAAUkB,IArC9CE,CAAcN,EAAWI,GAnEzBK,GAMJ,WAQI,IAPJ,IAEW1G,EAAS4C,EAAT5C,MACArJ,EAAUqJ,EAAVrJ,OAEHgQ,EAAe,EACfC,EAAU,EACLnQ,EAAI,EAAGA,EAAIE,EAAQF,GAAKuN,SACjC,CAEehE,EAAM4G,EAAU3C,OAA3B,IACM1I,EAAKmH,EAAUiE,EA5DZ,GA8DE3G,EAAM4G,EAAU1C,OA1QjB,IA4QKxB,EAAUiE,EAAehD,KAMhCjB,EAAUiE,EAAehD,GAFzBpI,EAzNI,EA7DN,EAEA,GA+SNoL,GA7FO,EA8FPC,GAAW5C,UArDf6C,GAuFJ,IAAMnC,EAxQU,EAwQiBP,SAsBjC,IAAMX,EAAQ,IAAIsD,IA6OlB,IA8BIC,EAAYC,EA9BVC,EACQ,IADRA,EAEW,IAFXA,EAGO,IAIb,SAASC,IAGL,GAAKF,EAAL,CAKA,IAAMG,EAAQjN,KAAK+H,IAAMgF,EAA4B,IAC/CG,EAAM,EAAIlN,KAAK+H,IAAMgF,EAAwB,IAEnD3E,EAAM+E,SAASC,EAAIL,EAAyB/M,KAAKqN,IAAIH,GACrD9E,EAAM+E,SAASG,EAAIP,EAAyB/M,KAAKuN,IAAIL,GAAOlN,KAAKuN,IAAIN,GACrE7E,EAAM+E,SAASK,EAAIT,EAAyB/M,KAAKuN,IAAIL,GAAOlN,KAAKqN,IAAIJ,GAErEH,EAAIW,SAASC,SAAb,YAAqC3O,MAAQqJ,EAAM+E,SAASQ,KAAKvF,EAAM+E,UACvE7E,GAASA,EAAMmF,SAASC,SAAf,aAAwC3O,MAAM4O,KAAKvF,EAAM+E,UAAUS,YAE5Ef,EAAWgB,OAAO1F,EAAU2E,IAQhC,SAASgB,KAGLpE,IAEA1B,EAAY+F,SAASC,eAAe,cAIpC7F,EAAW,IAAI8F,MACNC,cAActO,OAAOuO,kBAC9BhG,EAASiG,QAAQxO,OAAOyO,WAAYzO,OAAO0O,aAC3CtG,EAAUuG,YAAYpG,EAASqG,YAI/BtG,EAAQ,IAAIuG,MAEZxG,EAAS,IAAIyG,IAAkB,GAAI9O,OAAOyO,WAAazO,OAAO0O,YAAa,EAAG,MACvEnB,SAASwB,IAAI,IAAK,IAAK,KAI9BvG,EAAQ,IAAIwG,IAAiB,UAAW,IACxC1G,EAAMqE,IAAInE,IAEVyE,EAAa,IAAIgC,IAAW,GAAK,EAAG,MACzBC,aAAaC,QAAQC,iBAAkB,EAClDnC,EAAWiC,aAAaC,QAAQE,UAAYC,IAE5ChH,EAAMiH,WAAatC,EAAWiC,aAI9B,IAAMM,EAAgB,IAAIC,IAAoB,IAAO,MAGjD/G,EAAQ,IAAIgH,IACRF,EACA,CACIG,aAAc,IACdC,cAAe,IACfC,gBACAC,MAAO,GACPC,aAAcvH,EAAM+E,SAASyC,QAAQhC,YACrCiC,SAAU,UACVC,WAAY,UACZC,gBAAiB,IACjBC,SAAU,KACVC,KAAK,EACLC,KAAMC,OAGRC,SAAShD,GAAKpN,KAAK+H,GAAK,EAuB9B,IAAM2F,GAFNZ,EAAM,IAAIuD,KAEW5C,SAASC,SAE9BA,EAAQ,UAAc3O,MAAQ,EAC9B2O,EAAQ,SAAa3O,MAAQ,IAC7B2O,EAAQ,UAAc3O,MAAQ,EAC9B2O,EAAQ,eAAmB3O,MAAQ,IACnC2O,EAAQ,gBAAoB3O,MAAQ,GAE3B8N,EAAWiC,aAAaC,QAEjC/B,KAOJ3E,EAAW,IAAIiI,IAAcrI,EAAQE,EAASqG,aAErC+B,cAAgBvQ,KAAK+H,GAC9BM,EAASmI,OAAO7B,IAAI,EAAG,EAAG,GAC1BtG,EAASoI,YAAc,EACvBpI,EAASqI,YAAc,KACvBrI,EAASsI,eAAgB,EACzBtI,EAASuI,cAAgB,IACzBvI,EAASwF,SAsBTjO,OAAOiR,iBAAiB,SAAUC,IAAgB,GAqBtD,SAAkCC,GAE9B,IAAK,IAAIxU,EAAIyU,EAAWzU,EAnwBN,EAmwByBA,IAIvC,IAHJ,QAEyC0U,GAAsB1U,GAF/D,GAEW2U,EAFX,KAEuBC,EAFvB,KAGa1T,EAAI,EAAGA,EAAIyT,EAAWzU,OAAQgB,IACvC,CACI,IAAM2T,EAAQF,EAAWzT,GACnB4T,EAAYF,EAAe1T,GAC7B2T,GAASC,GACb,WAEI,IAAM5D,EAAW,IAAI6D,IAAqB,CACtCpB,KAAMC,IACNoB,MAAO,EAAIC,IAAN,EAAgB3I,EAActM,KACnCkV,UAAW3I,EAAiBvM,KA2BhCkR,EAASiE,gBAAkB,SAAAC,GAAU,IAE1BC,EAAgBD,EAAhBC,aAEPD,EAAOC,aAAeA,EACjBC,QAAQ,oBA5BM,yQA6BdA,QAAQ,0BAnBU,6eAuB3B,IAAMrQ,EAAQ4P,EAAM3U,OAASqV,GAAgB,EACvCC,EAAMhB,EAAqBtT,GAEjC,IAAKsU,EAED,MAAM,IAAIlO,MAAM,wBAA0BpG,GAG9C,IAAMuU,EAAiB,IAAIC,IACvB,IAAIC,aAAad,GACjBU,IAGEK,EAAW,IAAIC,IAErBC,IAAe1V,UAAUgR,KAAK9Q,KAAKsV,EAAUJ,GAE7CI,EAASG,aAAa,MAAO,IAAIC,IAA2BP,EAAgB,EAAG,GAAG,IAClFG,EAASG,aAAa,KAAM,IAAIC,IAA2BP,EAAgB,EAAG,GAAG,IACjFG,EAASG,aAAa,MAAO,IAAIC,IAA2BP,EAAgB,EAAG,GAAG,IAClFG,EAASG,aAAa,MAAO,IAAIC,IAA2BP,EAAgB,EAAG,GAAG,IAClFG,EAASG,aAAa,MAAO,IAAIC,IAA2BP,EAAgB,EAAG,IAAI,IAKnF,IADA,IAAMQ,EAAO,IAAIC,IAAcN,EAAU1E,EAAUjM,GAC1CjF,EAAI,EAAGA,EAAIiF,EAAOjF,IAC3B,CACI,IAAMmW,EAAU,EAAJnW,EACN6Q,EAAIiE,EAAUqB,GACdpF,EAAI+D,EAAUqB,EAAM,GACpBlF,EAAI6D,EAAUqB,EAAM,GAE1BC,GAAMxF,SAASwB,IAAIvB,EAAGE,EAAGE,GAEzBmF,GAAMC,eAENJ,EAAKK,YAAYtW,EAAGoW,GAAMG,QAG9BN,EAAKO,aAAc,EAEnB7K,EAAMqE,IAAIiG,GApFd,IAtBJQ,CAAyBjC,IAMjC,IAGM4B,GAAQ,IAAIM,IAwGlB,IAAM5H,GA1pBS,EA0pBoBvB,SAGnC,SAASmH,GAAsBiC,GAY3B,IAVA,IADJ,EAG2BxK,EAAhB5C,EAHX,EAGWA,MAAO1C,EAHlB,EAGkBA,MAEP3G,EAAU2G,EAAV3G,OAEDyU,EAAa,IAAIiC,MAAMpC,GAAqBtU,QAC5C0U,EAAiB,IAAIgC,MAAMpC,GAAqBtU,QAElDgO,EAAgB,EACXlO,EAAI,EAAGA,EAAIE,EAAQF,GAAK0N,SACjC,CAEI,IAAMxG,EAAKL,EAAM7G,EAAI4N,QACfxG,EAAKP,EAAM7G,EAAI6N,QACf1F,EAAKtB,EAAM7G,EAAI8N,QACf1F,EAAKvB,EAAM7G,EAAI+N,QAGf8I,EAAe3P,EAAK4H,GACpBgI,EAAe1P,EAAK0H,GACpBiI,EAAe5O,EAAK2G,GACpBkI,EAAe5O,EAAK0G,GAEpBmI,EAAYjL,EAASkC,EAt0BrB,GAu0BAgJ,EAAY1K,EAASR,EAASkC,EAv0B9B,GAu0BsDlC,EAASkC,EAt0B/D,IAu0BAiJ,EAAYnL,EAASkC,EAv0BrB,GAy0BArJ,EAAK0E,EAAMrC,EAAKsG,OAChB1I,GAA4C,IAAvCkH,EAASkC,EAx0BZ,GAy0BJjC,EAAU4K,EA/rBL,GAgsBL7K,EAASkC,EA10BL,GA40BFzB,EAAKlD,EAAMrC,EAAKuG,OAEhBrJ,EAAKmF,EAAMnC,EAAKoG,OAChBlJ,GAA4C,IAAvC0H,EAASkC,EA90BZ,GA+0BJjC,EAAU6K,EAtsBL,GAusBL9K,EAASkC,EAh1BL,GAk1BFkJ,EAAK7N,EAAMnC,EAAKqG,OAEhBvH,EAAKqD,EAAMpB,EAAKqF,OAChBrH,GAA4C,IAAvC6F,EAASkC,EAp1BZ,GAq1BJjC,EAAU8K,EA7sBL,GA8sBL/K,EAASkC,EAt1BL,GAw1BFmJ,EAAK9N,EAAMpB,EAAKsF,OAEhBjF,EAAKe,EAAMnB,EAAKoF,OAChB/E,GAA4C,IAAvCuD,EAASkC,EA11BZ,GA21BJjC,EAAU+K,EAptBL,GAqtBLhL,EAASkC,EA51BL,GA81BFoJ,EAAK/N,EAAMnB,EAAKqF,OAEhB8J,EAAM1S,EAAKT,EACXoT,EAAM1S,EAAKR,EACXmT,EAAMhL,EAAK2K,EACXM,EAAMxR,EAAK9B,EACXuT,EAAMxR,EAAK7B,EACXsT,EAAMP,EAAKD,EACXnP,EAAMO,EAAKpE,EACX8D,EAAMO,EAAKnE,EACXuT,EAAMP,EAAKF,EAabU,GAVQN,EAAKI,EAAKH,EAAKE,GAKfH,EAAKK,EAAKJ,EAAKvP,IAKJ,EACnB6P,GAVQN,EAAKC,EAAKH,EAAKK,GAKfH,EAAKxP,EAAKsP,EAAKM,IAKJ,EACnBG,GAVQT,EAAKI,EAAKH,EAAKE,GAKfH,EAAKrP,EAAKsP,EAAKvP,IAKJ,EAEjBgQ,EAAI,EAAIxU,KAAKkJ,KAAKmL,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACjDF,GAAMG,EACNF,GAAME,EACND,GAAMC,EAEN,IAAMC,EAAKjM,EAAU4K,EAAe3J,GAC9BiL,EAAKlM,EAAU6K,EAAe5J,GAC9BkL,EAAKnM,EAAU8K,EAAe7J,GAC9BmL,GAAKpM,EAAU+K,EAAe9J,GAEhCoL,IACEJ,IAAOvB,EAAS,EAAI,IACpBwB,IAAOxB,EAAS,EAAI,IACpByB,IAAOzB,EAAS,EAAI,IACpB0B,KAAO1B,EAAS,EAAI,GAG1B,GAAiB,IAAb2B,GACJ,CAIqB,IAAbA,IAAkBH,IAAOE,GAEzBC,GAAW,GAEO,IAAbA,IAAkBF,IAAOF,EAE9BI,GAAW,GAEO,IAAbA,IAAkBD,KAAOF,EAE9BG,GAAW,GAEO,IAAbA,IAAkBJ,IAAOE,IAE9BE,GAAW,IAGf,IAAIzD,GAAQF,EAAW2D,IAClBzD,KAEDA,GAAQ,GACRF,EAAW2D,IAAYzD,IAG3B,IAAIC,GAAYF,EAAe0D,IAC1BxD,KAEDA,GAAY,GACZF,EAAe0D,IAAYxD,IAG/BA,GAAUtU,KAAKyW,EAAUC,EAAUC,GAEnCtC,GAAMrU,KAEFqE,EAAKoS,EAAWnS,EAAKoS,EAAWzK,EAAK0K,EAErCW,EAASC,EAASC,EAElBxP,EAAK3D,EAAI4D,EAAK3D,EAAIwS,EAAK7K,EAEvBvG,EAAK9B,EAAI+B,EAAK7B,EAAI+S,EAAKD,EAEvBhT,EAAKS,EAAIP,EAAKQ,EAAIsS,EAAK3K,GAI/ByB,GA77BQ,EAg8BZ,MAAO,CAACyG,EAAYC,GAIxB,IAAMW,GAAgB,GAGtB,SAAShB,KAGL7I,EAAO6M,OAASlV,OAAOyO,WAAazO,OAAO0O,YAC3CrG,EAAO8M,yBAEP5M,EAASiG,QAAQxO,OAAOyO,WAAYzO,OAAO0O,aAQ/C,SAAS0G,MAkBT,WAGI,IAAMC,EAA2B,KAApBC,YAAYC,MAMrB7M,IAEAA,EAAM6E,SAASG,EAAI8H,IAAqC,GAAjBpV,KAAKuN,IAAI0H,GAChD3M,EAAMmF,SAASC,SAAf,KAAgC3O,OAAS,EAAM,IAGnDoJ,EAASkN,OAAOnN,EAAOD,IAOf,EArCRoN,GAKArI,IAEA3E,EAASwF,SACTyH,IAAIN,IAKR,IA4BIvF,GAAcsB,GAuBlBrJ,QAAQ6N,IAAI,CACR,EACAC,EAAU,qBACVA,EAAU,iBD1qCC,SAAShO,GACxB,IAD6BC,EAC7B,uDAD0C,KAEtC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAE1BN,EAAOO,KAEHL,EAEAG,EAEAF,EAEAG,MCgqCR6N,CAAY,6BAEXC,MAAK,YAMO,aALFtS,EAKE,KAJF8P,EAIE,KAHFyC,EAGE,KADFC,EACE,KA0BTnN,EAAYE,EAAekN,KAAI,SAAAtW,GAC3B,OAAO2T,EAAOhL,MAAM4N,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAI1X,OAASiB,KAAGkO,YAG7DvL,QAAQgK,IAAI,CAACzD,cAEbsI,GAjER,SAAgC7I,GAM5B,IALJ,IACW4N,EAAY5N,EAAZ4N,SAEDG,EAAQ,IAAI9C,MAAMvK,EAAWnM,QAE1BF,EAAI,EAAGA,EAAIuZ,EAASrZ,OAAQF,IACrC,CACI,IAAMyZ,EAAMF,EAASvZ,GAEf+E,EAAQsH,EAAWsN,QAAQF,EAAI1X,MACjCgD,GAAS,IAET2U,EAAM3U,GAAS0U,EAAI7D,UAG3B,OAAO8D,EAiDoBE,CAAuBR,EAAgBzN,OAK9DhG,QAAQgK,IAAI6E,IAKZ7O,QAAQgK,IAAI,OAAQ9I,GAQpBwS,EAAcQ,MAAQR,EAAcS,MAAQC,KAC5C7G,GAAemG,EAaf9H,KACAkH,S,mDC1vCD,SAAS7L,EAAYiE,GAQxB,GAAIA,EANU,IAUV,MAVU,SAQVA,EARU,IAQEA,GAEcA,EAEzB,GAAIA,EATQ,GAUjB,CAGI,MAhBU,SAcVA,GAdU,KAgBiBA,EAAJ,yBAQvB,OAAO,GAJPA,EAAI,EAAIA,GAIOA,EAAIA,EAAR,IAFG,UAxBtB,mC,uQCAA,IAAMlE,EAAOlJ,KAAb,K,aAII,iB,4FACA,SACI2G,KAAA,IACAA,KAAA,I,sDAUA,OAAO,IAAIE,EAAOF,KAAX,EAAkBA,KAAzB,K,0BAWAyG,EAAEE,GAaF,MAXA,iBAAWF,GAEPzG,KAAA,KACAA,KAAA,OAIAA,KAAA,GAAUyG,EAAV,EACAzG,KAAA,GAAUyG,EAAV,GAGJ,O,+BAUKA,EAAEE,GAaP,MAXA,iBAAWF,GAEPzG,KAAA,KACAA,KAAA,OAIAA,KAAA,GAAUyG,EAAV,EACAzG,KAAA,GAAUyG,EAAV,GAGJ,O,4BASE7N,GAKF,OAHAoH,KAAA,KACAA,KAAA,KAEA,O,+BASJ,IACYyG,EADZ,OACeE,EADf,OAEI,OAAOpE,EAAKkE,IAAIE,EAAhB,K,6BAWJ,IADKiJ,EACL,uDADoB,EAEhB,OAAO5P,KAAK6P,MAAMD,EAAe5P,KAAjC,Y,wCASJ,IACYyG,EADZ,OACeE,EADf,OAOI,OAHA3G,KAAA,IACAA,KAAA,KAEA,O,+CASJ,IACYyG,EADZ,OACeE,EADf,OAOI,OAJA3G,KAAA,GAHJ,EAKIA,KAAA,IAEA,O,0BAUAyG,EAAEE,GAEF,iBAAWF,GAEPzG,KAAA,IACAA,KAAA,MAIAA,KAAA,EAASyG,EAAT,EACAzG,KAAA,EAASyG,EAAT,Q","file":"bundle-main-04155126f06a997ba3bf.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpDemo\"] = window[\"webpackJsonpDemo\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([18,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import now from \"performance-now\"\nimport Vector from \"./vector\";\n\nexport const f_x0 = 0;\nexport const f_y0 = 1;\nexport const f_x1 = 2;\nexport const f_y1 = 3;\nexport const f_x2 = 4;\nexport const f_y2 = 5;\nexport const f_x3 = 6;\nexport const f_y3 = 7;\nexport const f_count = 8;\nexport const f_outmostEdge = 9;\nexport const f_size = 10;\n\nexport const g_x = 0;\nexport const g_y = 1;\nexport const g_isEdge = 2;\nexport const g_count = 3;\nexport const g_edge0 = 4;\nexport const g_edge1 = 5;\nexport const g_edge2 = 6;\nexport const g_edge3 = 7;\nexport const g_edge4 = 8;\nexport const g_edge5 = 9;\nexport const g_size = 10;\n\n\nexport const t_n0 = 0;\nexport const t_n1 = 1;\nexport const t_n2 = 2;\nexport const t_n3 = 3;\nexport const t_isEdge = 4;\nexport const t_tile0 = 5;\nexport const t_tile1 = 6;\nexport const t_tile2 = 7;\nexport const t_tile3 = 8;\nexport const t_size = 9;\n\nconst TAU = Math.PI * 2;\n\nconst SIXTH = TAU / 6;\n\nfunction calculateNumberOfFaces(limit)\n{\n    return 6 * (limit + 1) * (limit + 1);\n}\n\n\nconst DEFAULT_CONFIG = {\n    /** coordinate width */\n    width: 0,\n    /** coordinate height */\n    height: 0,\n    /** number of rings in the hexagon / number of base intersections of hexaxgon */\n    numberOfRings: 5,\n    /** how many percent of the edges shall we attempt to remove? */\n    removeEdges: 50,\n\n    /** if true, the graph will be layouted a bit with every render. If false, the graph relaxation happens at creation */\n    animatedEasing: true,\n\n    /** Set to true to render the original triangles, set to \"merged\" to render the merged triangles before subdivision */\n    renderFirstPassEdges: false,\n\n     /** Set to true to enable some debug logging */\n    debug : false,\n\n    weightFunction : (x0,y0,x1,y1) => {\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n        return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /// MOSTLY INTERNAL CONFIG ////\n    \n    // calculated internally to match the height\n    edgeLength: 80,\n    // number of iterations until we give up (we will drop out due to having reached low energy most likely much sooner)\n    maxIterations: 100,\n    // set to false if the graph is done animated on animatedEasing : true\n    animating: true,\n\n    // Minimum energy at which we stop relaxing the graph\n    minTension: 2\n};\n\nfunction updateConfig(config)\n{\n    config.numFaces = calculateNumberOfFaces(config.numberOfRings)\n    config.firstPassLen = config.numFaces * f_size\n    config.firstPassNumEdges = config.numFaces * 3\n    config.edgeLength = ( Math.min(config.width, config.height) / (config.numberOfRings * 2 + 2)) | 0;\n    config.animating = config.animatedEasing;\n    config.relaxCount = 0;\n}\n\n\nfunction createHexagonTriangles(config)\n{\n\n    const limit = config.numberOfRings;\n\n    //console.log(\"createHexagonTriangles\", limit);\n\n    const DIRECTIONS = [\n        new Vector(\n            Math.cos(0) * config.edgeLength,\n            Math.sin(0) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH) * config.edgeLength,\n            Math.sin(SIXTH) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 2) * config.edgeLength,\n            Math.sin(SIXTH * 2) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 3) * config.edgeLength,\n            Math.sin(SIXTH * 3) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 4) * config.edgeLength,\n            Math.sin(SIXTH * 4) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 5) * config.edgeLength,\n            Math.sin(SIXTH * 5) * config.edgeLength\n        )\n    ];\n\n    const faces = new Float64Array(config.firstPassLen);\n\n    let off = 0;\n\n    let count = 0;\n    let numTris = 1;\n    do\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            const v0 = DIRECTIONS[i];\n            const v1 = DIRECTIONS[(i + 1) % 6];\n            const v2 = DIRECTIONS[(i + 2) % 6];\n\n            let pos = v0.copy().scale(count);\n\n            for (let j = 0; j < numTris; j++)\n            {\n                if (j & 1)\n                {\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v1.x) | 0;\n                    faces[off + f_y1] = (pos.y + v1.y) | 0;\n                    faces[off + f_x2] = (pos.x + v2.x) | 0;\n                    faces[off + f_y2] = (pos.y + v2.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = -1;\n\n                    off += f_size;\n\n                    pos.add(v2);\n                }\n                else\n                {\n\n                    // All tris in the last row all have their edge #1 on the outer edge of the big hexagon\n                    const isOutmost = count === limit;\n\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v0.x) | 0;\n                    faces[off + f_y1] = (pos.y + v0.y) | 0;\n                    faces[off + f_x2] = (pos.x + v1.x) | 0;\n                    faces[off + f_y2] = (pos.y + v1.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = isOutmost ? 1 : -1;\n\n                    off += f_size;\n                }\n            }\n        }\n\n        numTris += 2;\n\n    } while (count++ < limit);\n\n    return faces;\n}\n\n\nfunction findOtherEdge(faces, x0, y0, x1, y1, index, out)\n{\n    for (let i = 0; i < faces.length; i += f_size)\n    {\n        if (i === index)\n        {\n            continue;\n        }\n\n        // console.log(\"find\", x0, y0, x1, y1, \":\",\n        //     faces[i + f_x0], faces[i + f_y0],\n        //     faces[i + f_x1], faces[i + f_y1],\n        //     faces[i + f_x2], faces[i + f_y2],\n        //     faces[i + f_x3], faces[i + f_y3],\n        // );\n\n        const count = faces[i + f_count];\n        if (\n            faces[i + f_x0] === x1 && faces[i + f_y0] === y1 &&\n            faces[i + f_x1] === x0 && faces[i + f_y1] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 0;\n            return;\n        }\n        if (\n            faces[i + f_x1] === x1 && faces[i + f_y1] === y1 &&\n            faces[i + f_x2] === x0 && faces[i + f_y2] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 1;\n            return;\n        }\n\n        if (count === 3)\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n        }\n        else\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x3] === x0 && faces[i + f_y3] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n\n            if (\n                faces[i + f_x3] === x1 && faces[i + f_y3] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 3;\n                return;\n            }\n\n        }\n    }\n\n    out.index = -1;\n}\n\n\nconst out = {index: -1, edge: 0};\n\n\nfunction getEdgeStack(config, faces)\n{\n    const length = config.numFaces * 3;\n    const stack = new Int32Array(length);\n\n    let pos = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const outmostEdge = faces[i + f_outmostEdge];\n\n        const targetIsOutmostFace = outmostEdge >= 0;\n        // we can't remove any of the outmost edges around the big hexagon (and we avoid having an edge triange as\n        // first merged triangle to simplify edge removal\n        if (!targetIsOutmostFace)\n        {\n            const scaled = i << 2;\n            stack[pos++] = scaled ;\n            stack[pos++] = scaled + 1;\n            stack[pos++] = scaled + 2;\n        }\n    }\n\n    // fisher-yates shuffle the stack\n    for (let i  = 0; i < pos - 2; i++)\n    {\n        const j = i + ((Math.random() * pos - i - 1)|0)\n        const tmp = stack[i];\n        stack[i] = stack[j];\n        stack[j] = tmp;\n    }\n    return stack.slice(0, pos);\n}\n\n\nfunction removeRandomEdges(config, faces)\n{\n    const count = (config.firstPassNumEdges * config.removeEdges / 100)|0;\n\n    //console.log(\"remove attempts\", count);\n\n    const stack = getEdgeStack(config, faces);\n\n    if (config.debug)\n    {\n        console.log(\"Shuffled stack\", [ ... stack.slice() ])\n    }\n\n    let stackPos = 0;\n\n\n    const eraseEdgesOfFaceInStack = index => {\n\n        for (let i = stackPos; i < stack.length; i++)\n        {\n            if ((stack[i] >>> 2) === index)\n            {\n                stack[i] = -1;\n            }\n        }\n    }\n\n\n\n    let success = 0;\n\n    // function printEdge(faces, otherIndex, outMostEdge)\n    // {\n    //     const count = faces[otherIndex + f_count];\n    //     const x0 = faces[otherIndex + outMostEdge * 2]\n    //     const y0 = faces[otherIndex + outMostEdge * 2 + 1]\n    //     const x1 = outMostEdge === count -1 ? faces[otherIndex] : faces[otherIndex + (outMostEdge + 1) * 2]\n    //     const y1 = outMostEdge === count -1 ? faces[otherIndex + 1] : faces[otherIndex + (outMostEdge + 1) * 2 + 1]\n    //\n    //\n    //     return x0 + \",\" + y0 + \",\" + x1 + \",\" + y1;\n    // }\n\n    for (let i = 0; i < count; i++)\n    {\n        let code;\n        do\n        {\n            if (stackPos === stack.length)\n            {\n                if (config.debug)\n                {\n                    config.debug && console.log(\"Ran out of removal candidates after successfully removing\", success, \"out of\", count);\n                }\n                // no more valid removals\n                return;\n            }\n            code = stack[stackPos++];\n        } while (code === -1);\n\n\n        const index = code >> 2;\n        const edge = code & 3;\n\n        const x0 = faces[index + edge * 2];\n        const y0 = faces[index + edge * 2 + 1];\n        const x1 = edge === 2 ? faces[index + f_x0] : faces[index + (edge + 1) * 2];\n        const y1 = edge === 2 ? faces[index + f_y0] : faces[index + (edge + 1) * 2 + 1];\n\n        findOtherEdge(faces, x0, y0, x1, y1, index, out)\n        if (out.index >= 0 && faces[out.index + f_count] === 3)\n        {\n            const {index: otherIndex, edge: otherEdge} = out;\n            const x2 = edge === 0 ? faces[index + f_x2] : faces[index + (edge - 1) * 2];\n            const y2 = edge === 0 ? faces[index + f_y2] : faces[index + (edge - 1) * 2 + 1];\n\n            // check if we're merging with an outmost face\n            const outMostEdge = faces[otherIndex + 9];\n            const otherIsOutmostTri = outMostEdge >= 0;\n\n            //const before = printEdge(faces, otherIndex, outMostEdge)\n            // if (otherIsOutmostTri)\n            // {\n            //     console.log(\"OUTMOST edge before split\", printEdge(faces, otherIndex, outMostEdge),\"EDGE CASE\", otherEdge, \"outMostEdge\", outMostEdge)\n            //     console.log(\"face before\", faces.slice(otherIndex, otherIndex + f_size))\n            // }\n\n            faces[otherIndex + 8] = 4;\n            switch (otherEdge)\n            {\n                case 2:\n                    faces[otherIndex + f_x3] = x2;\n                    faces[otherIndex + f_y3] = y2;\n                    break;\n                case 1:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = x2;\n                    faces[otherIndex + f_y2] = y2;\n                    break;\n                case 0:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = faces[otherIndex + f_x1];\n                    faces[otherIndex + f_y2] = faces[otherIndex + f_y1];\n                    faces[otherIndex + f_x1] = x2\n                    faces[otherIndex + f_y1] = y2;\n\n                    if (otherIsOutmostTri)\n                    {\n                        faces[otherIndex + f_outmostEdge] = 2;\n                    }\n\n                    break;\n\n            }\n            eraseEdgesOfFaceInStack(otherIndex)\n\n            // remove our face\n            faces[index + f_count] = 0;\n\n            success++;\n        }\n        eraseEdgesOfFaceInStack(index)\n\n    }\n\n    config.debug && console.log(\"Successfully removed\", success, \"out of\", count);\n\n    return success;\n}\n\n\nfunction calculateNumNodes(config, faces)\n{\n    let tris = 0;\n    let quads = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        if (count === 3)\n        {\n            tris++;\n        }\n        else if (count === 4)\n        {\n            quads++;\n        }\n    }\n\n    //console.log({quads,tris})\n\n    // we divide each quad in 9 nodes and each tri into 7 nodes\n    return quads * 9 + tris * 7;\n}\n\n\n\nfunction connectTiles(config, tiles)\n{\n    const { length } = tiles;\n\n    for (let i=0; i < length; i += t_size)\n    {\n        let numConnections = 0;\n        for (let j = 0; j < 4; j++)\n        {\n            const n0 = tiles[i + t_n0 + j];\n            const n1 = j === 3 ? tiles[i + t_n0 ] : tiles[i + t_n0 + j + 1];\n\n            let otherIndex = -1;\n            for (let k=0; k < tiles.length; k += t_size)\n            {\n                if (k === i)\n                {\n                    continue;\n                }\n\n                const otherNode0 = tiles[k + t_n0];\n                const otherNode1 = tiles[k + t_n1];\n                const otherNode2 = tiles[k + t_n2];\n                const otherNode3 = tiles[k + t_n3];\n\n                // tile edges are all defined in clockwise order, the opposite edge must necessarily walk the two nodes in\n                // the opposite direction\n\n                if (\n                    otherNode1 === n0 && otherNode0 === n1 ||\n                    otherNode2 === n0 && otherNode1 === n1 ||\n                    otherNode3 === n0 && otherNode2 === n1 ||\n                    otherNode0 === n0 && otherNode3 === n1\n                )\n                {\n\n                    otherIndex = k;\n                    numConnections++;\n                    break;\n                }\n            }\n\n            tiles[i + t_tile0 + j] = otherIndex;\n        }\n        tiles[i + t_isEdge] = numConnections === 4 ? 0 : 1;\n    }\n\n    config.debug && console.log(\"TILE GRAPH\", tiles);\n}\n\n\nfunction subdivide(config, faces)\n{\n    const { firstPassLen } = config;\n\n    const numNodes = calculateNumNodes(config, faces);\n\n    const nodes = new Float64Array(numNodes * g_size);\n\n\n    const tiles = new Int32Array(((numNodes / 2)|0) * t_size);\n\n    let pos = 0;\n    let tilePos = 0;\n\n    const insertNode = (x0, y0, isEdge) => {\n\n        x0 |= 0;\n        y0 |= 0;\n\n        for (let i = 0; i < pos; i += g_size)\n        {\n            if (Math.abs(nodes[i] - x0) < 4 && Math.abs(nodes[i + 1] - y0) < 4)\n            {\n                // if we discover an odd face vertex touching the outmost edge, we will\n                // not register that because the odd tris are not marked as having an outmost edge, because they don't, they\n                // only have one vertex on the edge at most\n                // Later we might however return to that node within an outmost edge and we have to make sure that\n                // we take over the isEdge status from such a node\n                if (isEdge && !nodes[i + 2])\n                {\n                    nodes[i + 2] = 1;\n                }\n\n                return i;\n            }\n        }\n\n        const index = pos;\n\n        nodes[pos + g_x] = x0;\n        nodes[pos + g_y] = y0;\n        nodes[pos + g_isEdge] = isEdge ? 1 : 0;\n        nodes[pos + g_count] = 0;\n\n        pos += g_size;\n\n        return index;\n    }\n\n    const addTile = ((n0,n1,n2,n3) => {\n\n        //console.log(\"addTile\", n0, n1, n2, n3, tilePos)\n\n        tiles[tilePos + t_n0] = n0;\n        tiles[tilePos + t_n1] = n1;\n        tiles[tilePos + t_n2] = n2;\n        tiles[tilePos + t_n3] = n3;\n\n        tilePos += t_size;\n    });\n\n    const insertEdge = (n0, n1) => {\n        let count = nodes[n0 + g_count];\n\n        let found = false;\n        for (let i = 0; i < count; i++)\n        {\n            const other = nodes[n0 + g_edge0 + i];\n            if (other === n1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            if (count >= 6)\n            {\n                throw new Error(\"At most 6 edges per node\")\n            }\n\n            nodes[n0 + g_edge0 + count++] = n1;\n            nodes[n0 + g_count] = count;\n        }\n\n    }\n    const connect = (n0, n1) => {\n\n        insertEdge(n0, n1);\n        insertEdge(n1, n0);\n\n    }\n\n    for (let i = 0; i < firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        const x0 = faces[i + f_x0]\n        const y0 = faces[i + f_y0]\n        const x1 = faces[i + f_x1]\n        const y1 = faces[i + f_y1]\n        const x2 = faces[i + f_x2]\n        const y2 = faces[i + f_y2]\n\n        const outmostEdge = faces[i + f_outmostEdge ];\n\n        const firstEdgeIsOutmost = outmostEdge === 1;\n        const secondEdgeIsOutmost = outmostEdge === 2;\n\n        if (count === 3)\n        {\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x0) / 2;\n            const m2y = (y2 + y0) / 2;\n\n            const cx = (x0 + x1 + x2) / 3\n            const cy = (y0 + y1 + y2) / 3\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y);\n            const n6 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n6);\n            connect(n6, n5);\n            connect(n5, n0);\n\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n6);\n            connect(n6, n1);\n\n            connect(n5, n6);\n            connect(n6, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n\n            addTile(n0,n1,n6,n5);\n            addTile(n1,n2,n3,n6);\n            addTile(n5,n6,n3,n4);\n\n        }\n        else if (count === 4)\n        {\n            const x3 = faces[i + f_x3]\n            const y3 = faces[i + f_y3]\n\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x3) / 2;\n            const m2y = (y2 + y3) / 2;\n            const m3x = (x3 + x0) / 2;\n            const m3y = (y3 + y0) / 2;\n\n            const cx = (x0 + x1 + x2 + x3) / 4\n            const cy = (y0 + y1 + y2 + y3) / 4\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost || secondEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y, secondEdgeIsOutmost);\n            const n6 = insertNode(x3, y3, secondEdgeIsOutmost);\n            const n7 = insertNode(m3x, m3y);\n            const n8 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n            connect(n5, n6);\n            connect(n6, n7);\n            connect(n7, n0);\n\n            connect(n8, n3);\n            connect(n8, n5);\n            connect(n8, n7);\n            connect(n8, n1);\n\n            addTile(n0,n1,n8,n7);\n            addTile(n1,n2,n3,n8);\n            addTile(n8,n3,n4,n5);\n            addTile(n7,n8,n5,n6);\n        }\n    }\n\n    //const fillRate = (pos / g_size) / numNodes;\n    //console.log(\"SUBDIVIDED: limit = \", numNodes, \", fill rate = \", fillRate);\n\n    console.log(\"TILES: buffer = \", tiles.length, \", used = \" + tilePos)\n\n    const newTiles = tiles.slice(0, tilePos);\n\n    connectTiles(config, newTiles);\n\n    return [nodes.slice(0, pos), newTiles];\n}\n\n\nfunction relaxWeighted(config, graph, maxIterations = 1)\n{\n\n    const {length} = graph;\n\n    for (let i = 0; i < maxIterations; i++)\n    {\n        let tension = 0;\n        for (let j = 0; j < length; j += g_size)\n        {\n            if (!graph[j + g_isEdge])\n            {\n                const x0 = graph[j + g_x]\n                const y0 = graph[j + g_y]\n                const edgeCount = graph[j + g_count]\n\n                let centerX = 0;\n                let centerY = 0;\n                let sumWeight = 0;\n\n                for (let k = 0; k < edgeCount; k++)\n                {\n                    const other = graph[j + 4 + k];\n\n                    const x1 = graph[other];\n                    const y1 = graph[other + 1];\n\n                    const weight = config.weightFunction(x0, y0, x1, y1);\n\n                    centerX += x1 * weight;\n                    centerY += y1 * weight;\n                    sumWeight += weight;\n                }\n\n                const x1 = centerX / sumWeight\n                const y1 = centerY / sumWeight;\n\n                const dx = x1 - x0;\n                const dy = y1 - y0;\n\n                graph[j + g_x] = x1;\n                graph[j + g_y] = y1;\n\n                tension += dx * dx + dy * dy;\n\n            }\n        }\n\n        if (tension < config.minTension)\n        {\n            config.debug && console.log(\"Reached minimal tension\", config.minTension, \"after\", config.relaxCount, \"iterations\")\n            return true;\n        }\n        config.relaxCount++;\n    }\n\n    if (!config.animatedEasing)\n    {\n        config.debug && console.log(\"Stopping after max iterations = \" + config.maxIterations)\n    }\n\n    return false;\n}\n\n\n/**\n * A hexagon filled with quads forming organic shapes.\n */\nclass OrganicQuads {\n    constructor(cfg)\n    {\n\n        const config = {\n            ...DEFAULT_CONFIG,\n            ...cfg\n        }\n\n        updateConfig(config)\n\n        this.config = config;\n\n        const faces = createHexagonTriangles(config);\n\n        if (config.renderFirstPassEdges)\n        {\n            this.faces = config.renderFirstPassEdges !== \"merged\" ? faces.slice() : faces;\n        }\n\n        const start = config.debug && now();\n\n        removeRandomEdges(config, faces)\n\n        config.debug && console.log(\"Edge removal in \" , now() - start, \"ms\")\n\n        const [graph, tiles] = subdivide(config, faces);\n        this.tiles = tiles;\n\n        if (!config.animating)\n        {\n            relaxWeighted(config, graph, config.maxIterations);\n        }\n        //console.log(\"GRAPH f_size\", graph.length / g_size, graph);\n        this.graph = graph;\n\n    }\n\n\n    render = ctx =>\n    {\n        const { config, graph, faces } = this;\n\n\n        ctx.save();\n\n        const hw = config.width / 2;\n        const hh = config.height / 2;\n\n        ctx.translate(hw, hh)\n\n        const {length} = graph;\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(-hw, -hh, config.width, config.height)\n\n        if (config.renderFirstPassEdges)\n        {\n\n            // draw original quads and tris\n\n            ctx.strokeStyle = \"#f00\";\n            ctx.lineWidth = 1;\n\n\n            let outerCount = 0;\n            for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n            {\n                const count = faces[pos + f_count];\n\n                if (count >= 3)\n                {\n\n                    ctx.beginPath();\n                    ctx.moveTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n\n                    for (let i = 1; i < count; i++)\n                    {\n                        ctx.lineTo(faces[pos + i*2],faces[pos +  i*2 + 1]);\n                    }\n\n                    ctx.closePath();\n                    ctx.stroke();\n\n                    const outmostEdge = faces[pos + f_outmostEdge];\n                    if (outmostEdge >= 0)\n                    {\n                        ctx.strokeStyle = \"#fe0\";\n                        ctx.beginPath();\n                        ctx.moveTo(faces[pos + outmostEdge * 2  ],faces[pos + outmostEdge * 2 + 1]);\n\n                        if (outmostEdge === count - 1)\n                        {\n                            ctx.lineTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n                        }\n                        else\n                        {\n                            ctx.lineTo(faces[pos + (outmostEdge + 1 ) * 2  ],faces[pos + (outmostEdge + 1 ) * 2 + 1]);\n                        }\n                        ctx.stroke();\n                        ctx.strokeStyle = \"#f00\";\n\n                        outerCount++;\n\n                    }\n\n                }\n            }\n            //    console.log(\"Number of outer edges\", outerCount)\n\n            //console.log(\"DRAW EDGES\")\n        }\n\n        // ctx.strokeStyle = \"#fff\";\n        // ctx.lineWidth = 1;\n        //\n        //\n        // function drawEdge(x0, y0, node)\n        // {\n        //     const x1 = graph[node + g_x];\n        //     const y1 = graph[node + g_y];\n        //\n        //     ctx.beginPath();\n        //     ctx.moveTo(x0, y0);\n        //     ctx.lineTo(x1, y1);\n        //     ctx.stroke();\n        // }\n        //\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const edgeCount = graph[i + g_count];\n        //\n        //     for (let j = 0; j < edgeCount; j++)\n        //     {\n        //         drawEdge(x0, y0, graph[i + g_edge0 + j])\n        //     }\n        // }\n\n        //ctx.fillStyle = \"#f0f\";\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const isEdge = graph[i + g_isEdge];\n        //\n        //     if (isEdge)\n        //     {\n        //         ctx.fillRect(x0 - 4,  y0 - 4, 8, 8)\n        //     }\n        // }\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 4;\n        //\n        // for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n        // {\n        //     const count = faces[pos + f_count];\n        //     const outmostEdge = faces[pos + f_outmostEdge];\n        //\n        //\n        //     const last = count - 1;\n        //     for (let i=0; i < count; i++)\n        //     {\n        //         if (i === outmostEdge)\n        //         {\n        //             ctx.strokeStyle = \"rgba(255,0,0,0.5)\";\n        //         }\n        //         else\n        //         {\n        //             ctx.strokeStyle = \"rgba(0,255,0,0.5)\";\n        //         }\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos + i * 2], faces[pos + i * 2 + 1]);\n        //         ctx.lineTo(\n        //             i === last ? faces[pos + f_x0 ] : faces[pos + (i+1) * 2],\n        //             i === last ? faces[pos + f_y0 ] : faces[pos + (i+1) * 2 + 1]\n        //         );\n        //         ctx.stroke();\n        //     }\n        // }\n\n        ctx.restore();\n\n        if (config.animating)\n        {\n            if (relaxWeighted(config, graph))\n            {\n                config.animating = false;\n            }\n            //            raf(redrawGraph)\n        }\n    }\n}\n\n\nexport {  Vector }\n\nexport default OrganicQuads\n","\n// Instantiate a loader\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nconst loader = new GLTFLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","// Instantiate a loader\nimport { TextureLoader } from \"three\";\n\nconst loader = new TextureLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n","import raf from \"raf\"\nimport SimplexNoise from \"simplex-noise\"\n// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport {\n    BackSide,\n    BufferGeometry,\n    Color,\n    CubeCamera,\n    DirectionalLight,\n    DoubleSide,\n    Float32BufferAttribute,\n    FrontSide,\n    InstancedMesh,\n    InterleavedBuffer,\n    InterleavedBufferAttribute,\n    LinearMipmapLinearFilter,\n    Mesh,\n    MeshStandardMaterial,\n    PerspectiveCamera,\n    PlaneBufferGeometry,\n    RepeatWrapping,\n    Scene,\n    WebGLRenderer,\n    InstancedBufferGeometry,\n    Object3D\n} from \"three\"\n\nimport OrganicQuads, {\n    g_size,\n    g_x,\n    g_y,\n    t_isEdge,\n    t_n0,\n    t_n1,\n    t_n2,\n    t_n3,\n    t_size,\n    t_tile0,\n    t_tile1,\n    t_tile2,\n    t_tile3\n} from \"@fforw/organic-quads\";\nimport loadScene from \"./loadScene\";\nimport { Water } from \"three/examples/jsm/objects/Water.js\";\nimport { Sky } from \"three/examples/jsm/objects/Sky.js\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport loadTexture from \"./loadTexture\";\nimport { heightLimit } from \"./heightLimit\";\n\nconst TAU = Math.PI * 2;\n\nconst EFFECTS = true;\nconst HEIGHT_MAP = false;\n\n// const DETAIL = 12;\n// const MAX_HEIGHT = 500;\nconst DETAIL = 2;\nconst MAX_HEIGHT = 50;\nconst QUARTER_HEIGHT = MAX_HEIGHT / 4;\nconst NOISE_SCALE_1 = 0.003;\nconst NOISE_SCALE_2 = 0.07;\nconst GROUND_NOISE_SCALE = 0.005;\nconst NOISE_RATIO = 0.99;\nconst CLIFF_THRESHOLD = 20;\n\n// size of the outer square around our big hexagon\nconst SIZE = 1500;\n\n//////////////////////////////////////////////////////////////////////\n\nconst WATER = 0;\nconst SAND = 1;\nconst GRASS = 2;\nconst DIRT = 3;\nconst FOREST = 4;\nconst STONE = 5;\nconst UNDEFINED = 6;\nconst NUM_MATERIALS = 7;\n\nconst MATERIAL_NAMES = [\n    \"Water\", // WATER\n    \"Sand\", // SAND\n    \"Grass\", // GRASS\n    \"Dirt\", // DIRT\n    \"Forest\", // FOREST\n    \"Stone\", // STONE\n];\n\nconst CASE_NAMES = [\n    null,\n    \"case-1\",\n    \"case-2\",\n    \"case-3\",\n    \"case-4\",\n    \"case-5-2\",\n    \"case-6\",\n    \"case-7\",\n    \"case-8\",\n    \"case-9\",\n    \"case-10-2\",\n    \"case-11\",\n    \"case-12\",\n    \"case-13\",\n    \"case-14\",\n    \"case-15\",\n    \"case-m1\",\n    \"case-m2\",\n    \"case-m3\",\n    \"case-m4\"\n];\n\nconst GROUND_COLORS = {\n    [WATER]: [0, 0.4, 0.8],\n    [SAND]: [0.8, 0.8, 0],\n    [GRASS]: [0, 0.7, 0],\n    [DIRT]: [0.5, 0.3, 0.1],\n    [FOREST]: [0.2, 0.5, 0.3],\n    [STONE]: [0.5, 0.5, 0.5],\n    [UNDEFINED]: [1, 0, 1]\n}\n\nconst GROUND_ROUGHNESS = {\n    [WATER]: 0,\n    [SAND]: 1,\n    [GRASS]: 1,\n    [DIRT]: 1,\n    [FOREST]: 1,\n    [STONE]: 0.3,\n    [UNDEFINED]: 0\n}\n\nconst WATER_LIMIT = 2;\nconst SAND_LIMIT = 5.5;\nconst FOREST_LIMIT = 60;\n\nlet container, stats;\nlet camera, scene, renderer, light;\nlet controls, water;\n\nconst td_cx = 0;\nconst td_cy = 1;\nconst td_walkable = 2;\nconst td_cut0 = 3;\nconst td_cut1 = 4;\nconst td_cut2 = 5;\nconst td_cut3 = 6;\nconst td_size = 7;\n\nlet tileData;\nlet heightMap;\nlet materials;\n\n\nfunction updateCentroids()\n{\n    const {graph, tiles} = organicQuads;\n    const {length} = tiles;\n\n    let tileDataPos = 0;\n    for (let i = 0; i < length; i += t_size)\n    {\n        const n0 = tiles[i + t_n0];\n        const n1 = tiles[i + t_n1];\n        const n2 = tiles[i + t_n2];\n        const n3 = tiles[i + t_n3];\n\n        tileData[tileDataPos + td_cx] = (graph[n0 + g_x] + graph[n1 + g_x] + graph[n2 + g_x] + graph[n3 + g_x]) / 4;\n        tileData[tileDataPos + td_cy] = (graph[n0 + g_y] + graph[n1 + g_y] + graph[n2 + g_y] + graph[n3 + g_y]) / 4;\n        tileData[tileDataPos + td_walkable] = 0;\n        tileData[tileDataPos + td_cut0] = -1;\n        tileData[tileDataPos + td_cut1] = -1;\n        tileData[tileDataPos + td_cut2] = -1;\n        tileData[tileDataPos + td_cut3] = -1;\n\n        tileDataPos += td_size;\n    }\n\n}\n\n\nlet organicQuads, envMap;\n\n\nfunction heightFn(x0, z0)\n{\n    const distance = Math.sqrt(x0 * x0 + z0 * z0);\n    const limit = heightLimit(1 - distance / (SIZE / 2));\n\n    return Math.max(0, (QUARTER_HEIGHT + (noise.noise2D(x0 * NOISE_SCALE_1, z0 * NOISE_SCALE_1) * NOISE_RATIO + noise.noise2D(z0 * NOISE_SCALE_2, x0 * NOISE_SCALE_2) * (1 - NOISE_RATIO)) * QUARTER_HEIGHT) * limit);\n}\n\n\nconst tmpHeight = new Float64Array(5);\n\n\nfunction cutCliffs()\n{\n\n    const {graph, tiles} = organicQuads;\n\n    const {length} = tiles;\n\n    const tileDataFactor = td_size / t_size;\n\n    for (let i = 0; i < length; i += t_size)\n    {\n        // find indizes for connected centroid (values might be -1 if on the edge\n        const tileDataIndex = i * tileDataFactor;\n        const tileDataIndex0 = tiles[i + t_tile0] * tileDataFactor;\n        const tileDataIndex1 = tiles[i + t_tile1] * tileDataFactor;\n        const tileDataIndex2 = tiles[i + t_tile2] * tileDataFactor;\n        const tileDataIndex3 = tiles[i + t_tile3] * tileDataFactor;\n\n        tmpHeight[0] = heightFn(tileData[tileDataIndex], tileData[tileDataIndex + 1])\n\n        tmpHeight[1] =\n            tileDataIndex0 >= 0 ? heightFn(tileData[tileDataIndex0 + td_cx], tileData[tileDataIndex0 + td_cy]) : -1;\n        tmpHeight[2] =\n            tileDataIndex1 >= 0 ? heightFn(tileData[tileDataIndex1 + td_cx], tileData[tileDataIndex1 + td_cy]) : -1;\n        tmpHeight[3] =\n            tileDataIndex2 >= 0 ? heightFn(tileData[tileDataIndex2 + td_cx], tileData[tileDataIndex2 + td_cy]) : -1;\n        tmpHeight[4] =\n            tileDataIndex3 >= 0 ? heightFn(tileData[tileDataIndex3 + td_cx], tileData[tileDataIndex3 + td_cy]) : -1;\n\n        //console.log(\"HEIGHTS\", tmpHeight.slice())\n\n        let cutMask = 0;\n\n        if (tileDataIndex0 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[1]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 1;\n        }\n\n        if (tileDataIndex1 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[2]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 2;\n        }\n        if (tileDataIndex2 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[3]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 4;\n        }\n        if (tileDataIndex3 >= 0 && Math.abs(tmpHeight[0] - tmpHeight[4]) > CLIFF_THRESHOLD)\n        {\n            cutMask |= 8;\n        }\n\n        if (cutMask !== 0)\n        {\n            for (let j = 0; j < 4; j++)\n            {\n                if (cutMask & (1 << j))\n                {\n                    const heightMapIndex0 = tiles[i + t_n0 + j] * heightIndexFactor;\n                    const heightMapIndex1 = (j === 3 ? tiles[i + t_n0] : tiles[i + t_n0 + j + 1]) * heightIndexFactor;\n\n                    const cut0 = td_cut0 + j;\n                    const cut1 = j === 3 ? td_cut0 : td_cut0 + j + 1;\n\n                    const edgeBefore = j === 0 ? 3 : j - 1;\n                    const edgeAfter = j === 3 ? 0 : j + 1;\n\n                    const heightOnQuadBefore = tmpHeight[1 + edgeBefore];\n                    const heightOnQuadAfter = tmpHeight[1 + edgeAfter];\n                    const height0 = heightOnQuadBefore >= 0 ? (heightOnQuadBefore + tmpHeight[0]) / 2 : tmpHeight[0];\n                    const height1 = heightOnQuadAfter >= 0 ? (tmpHeight[0] + heightOnQuadAfter) / 2 : tmpHeight[0];\n\n                    tileData[tileDataIndex + cut0] = height0;\n                    tileData[tileDataIndex + cut1] = height1;\n                    heightMap[heightMapIndex0 + h_ground] = STONE;\n                    heightMap[heightMapIndex1 + h_ground] = STONE;\n\n                    // cut our connection to the other tile\n                    tiles[i + t_tile0 + j] = -1;\n                }\n            }\n        }\n    }\n}\n\n\nconst h_height = 0;\nconst h_ground = 1;\nconst h_size = 3;\n\n\nfunction createScene()\n{\n\n    organicQuads = new OrganicQuads({\n        numberOfRings: DETAIL,\n        width: SIZE,\n        height: SIZE,\n        graphUserData: 1,\n        // weightFunction: (x0,y0,x1,y1) => {\n        //\n        //     const dx = x1 - x0;\n        //     const dy = y1 - y0;\n        //     const dz = heightFn(x0,y0) - heightFn(x1,y1);\n        //\n        //     return Math.sqrt(dx * dx + dy * dy + dz * dz);\n        //\n        // }\n    });\n\n    const {graph, tiles, config} = organicQuads;\n    const {length} = graph;\n\n    const heightMapFactor = h_size / g_size;\n\n    heightMap = new Float64Array(length * heightMapFactor);\n    let pos = 0;\n    for (let i = 0; i < length; i += g_size)\n    {\n        heightMap[pos + h_height] = heightFn(graph[i + g_x], graph[i + g_y]);\n        heightMap[pos + h_ground] = UNDEFINED;\n\n        pos += h_size;\n    }\n\n    tileData = new Float64Array((organicQuads.tiles.length / t_size) * td_size);\n    updateCentroids()\n    cutCliffs()\n    testWalkability();\n    generateGround();\n\n}\n\n\nfunction generateGround()\n{\n\n    const {graph} = organicQuads;\n    const {length} = graph;\n\n    let heightMapPos = 0;\n    let nodePos = 0;\n    for (let i = 0; i < length; i += g_size)\n    {\n\n        const x0 = graph[nodePos + g_x];\n        const y0 = heightMap[heightMapPos + h_height];\n        //const y0 = heightMap[heightIndex0 + h_height];\n        const z0 = graph[nodePos + g_y];\n\n        const ground = heightMap[heightMapPos + h_ground];\n\n        if (ground === UNDEFINED)\n        {\n            if (y0 < WATER_LIMIT)\n            {\n                heightMap[heightMapPos + h_ground] = WATER;\n            }\n            // else if (y0 < SAND_LIMIT)\n            // {\n            //     heightMap[heightMapPos + h_ground] = SAND;\n            // }\n            // else\n            // {\n            //     const n = noise.noise2D(x0 * GROUND_NOISE_SCALE, z0 * GROUND_NOISE_SCALE);\n            //\n            //     if (y0 < FOREST_LIMIT)\n            //     {\n            //         heightMap[heightMapPos + h_ground] = n < 0.2 ? GRASS : FOREST;\n            //     }\n            //     else\n            //     {\n            //         heightMap[heightMapPos + h_ground] = n < 0.2 ? FOREST : GRASS;\n            //     }\n            // }\n            else\n            {\n                heightMap[heightMapPos + h_ground] = GRASS;\n            }\n        }\n\n        heightMapPos += h_size;\n        nodePos += g_size;\n    }\n\n}\n\n\nfunction testWalkability()\n{\n    const tileIndex = findEdgeTile();\n\n    console.log(\"Starting to walk at #\", tileIndex / t_size)\n\n    const visited = new Set();\n    walkRecursive(tileIndex, visited);\n}\n\n\nfunction findEdgeTile()\n{\n    const {tiles} = organicQuads;\n\n    const {length} = tiles;\n\n    for (let i = 0; i < length; i += t_size)\n    {\n        if (tiles[i + t_isEdge])\n        {\n            return i;\n        }\n    }\n    throw new Error(\"No edge!?\")\n}\n\n\nconst tileDataFactor = td_size / t_size;\n\n\nfunction walkRecursive(tileIndex, visited)\n{\n    if (tileIndex >= 0 && !visited.has(tileIndex))\n    {\n        visited.add(tileIndex);\n\n        const {tiles} = organicQuads;\n\n        tileData[tileIndex * tileDataFactor + td_walkable] = 1;\n\n        walkRecursive(tiles[tileIndex + t_tile0], visited);\n        walkRecursive(tiles[tileIndex + t_tile1], visited);\n        walkRecursive(tiles[tileIndex + t_tile2], visited);\n        walkRecursive(tiles[tileIndex + t_tile3], visited);\n\n    }\n}\n\n\nconst noise = new SimplexNoise();\n\n\nfunction checkNaN(value, msg)\n{\n    if (isNaN(value))\n    {\n        debugger;\n        throw new Error(msg + \": value is NaN\")\n    }\n}\n\n\nfunction addHeightMap()\n{\n    const geometry = new BufferGeometry();\n    geometry.name = \"Landscape-Debug\"\n\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n\n    // generate vertices, normals and color data for a simple grid geometry\n    const { graph, tiles } = organicQuads;\n\n    const { length } = tiles;\n\n    console.log(\"Height map for \", length / t_size, \" tiles\");\n\n    const UNDEFINED_COLOR = [1, 0, 1];\n\n    // const map = {};\n    //\n    // const insert = (a,b) => {\n    //     if (a > b)\n    //     {\n    //         let h = a;\n    //         a=b;\n    //         b=h;\n    //     }\n    //\n    //     const key = a + \":\" + b;\n    //\n    //     const v = map[key];\n    //     map[key] =  v === undefined ? 1 : v + 1;\n    // }\n\n    const getColor = (hIdx) => {\n\n        const tileDataIndex = hIdx * td_size / h_size;\n\n        const ground = heightMap[hIdx + h_ground];\n        const color = GROUND_COLORS[ground];\n        // if (ground !== STONE && ground !== SAND && tileData[tileDataIndex + td_walkable])\n        // {\n        //     return GROUND_COLORS[GRASS];\n        // }\n\n        return color || UNDEFINED_COLOR;\n    };\n\n    let tileDataIndex = 0;\n    for (let i = 0; i < length; i += t_size)\n    {\n        // node indizes for our quad\n        const n0 = tiles[i + t_n0];\n        const n1 = tiles[i + t_n1];\n        const n2 = tiles[i + t_n2];\n        const n3 = tiles[i + t_n3];\n\n        // const e0 = tiles[i + t_tile0]\n        // const e1 = tiles[i + t_tile1]\n        // const e2 = tiles[i + t_tile2]\n        // const e3 = tiles[i + t_tile3]\n        // e0 >= 0 && insert(i * tileFactor, e0 * tileFactor)\n        // e1 >= 0 && insert(i * tileFactor, e1 * tileFactor)\n        // e2 >= 0 && insert(i * tileFactor, e2 * tileFactor)\n        // e3 >= 0 && insert(i * tileFactor, e3 * tileFactor)\n\n        // equivalent height map indizes\n        const heightIndex0 = n0 * heightIndexFactor;\n        const heightIndex1 = n1 * heightIndexFactor;\n        const heightIndex2 = n2 * heightIndexFactor;\n        const heightIndex3 = n3 * heightIndexFactor;\n\n        const x0 = graph[n0 + g_x];\n        const y0 = tileData[tileDataIndex + td_cut0] === -1 ?\n            heightMap[heightIndex0 + h_height] :\n            tileData[tileDataIndex + td_cut0];\n        //const y0 = heightMap[heightIndex0 + h_height];\n        const z0 = graph[n0 + g_y];\n\n        const x1 = graph[n1 + g_x];\n        const y1 = tileData[tileDataIndex + td_cut1] === -1 ?\n            heightMap[heightIndex1 + h_height] :\n            tileData[tileDataIndex + td_cut1];\n        //const y1 = heightMap[heightIndex1 + h_height];\n        const z1 = graph[n1 + g_y];\n\n        const x2 = graph[n2 + g_x];\n        const y2 = tileData[tileDataIndex + td_cut2] === -1 ?\n            heightMap[heightIndex2 + h_height] :\n            tileData[tileDataIndex + td_cut2];\n        //const y2 = heightMap[heightIndex2 + h_height]\n        const z2 = graph[n2 + g_y];\n\n        const x3 = graph[n3 + g_x];\n        const y3 = tileData[tileDataIndex + td_cut3] === -1 ?\n            heightMap[heightIndex3 + h_height] :\n            tileData[tileDataIndex + td_cut3];\n        //const y3 = heightMap[heightIndex3 + h_height];\n        const z3 = graph[n3 + g_y];\n\n        const ax = (x0 - x1);\n        const ay = (y0 - y1);\n        const az = (z0 - z1);\n        const bx = (x2 - x1);\n        const by = (y2 - y1);\n        const bz = (z2 - z1);\n        const cx = (x3 - x1);\n        const cy = (y3 - y1);\n        const cz = (z3 - z1);\n\n        // normal vector based on points 0, 1 and 2\n        const n0x = ay * bz - az * by;\n        const n0y = az * bx - ax * bz;\n        const n0z = ax * by - ay * bx;\n\n        // normal vector based on points 0, 1 and 3\n        const n1x = ay * cz - az * cy;\n        const n1y = az * cx - ax * cz;\n        const n1z = ax * cy - ay * cx;\n\n        // average and renormalize\n        let nx = (n0x + n1x) / 2;\n        let ny = (n0y + n1y) / 2;\n        let nz = (n0z + n1z) / 2;\n\n        const f = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz);\n        nx *= f;\n        ny *= f;\n        nz *= f;\n\n        // const cf = 4 / MAX_HEIGHT;\n        //\n        // colors.push( y3 * cf,1 - y3 * cf, 0);\n        // colors.push( y1 * cf,1 - y1 * cf, 0);\n        // colors.push( y1 * cf,1 - y1 * cf, 0);\n        // colors.push( y3 * cf,1 - y3 * cf, 0);\n        // colors.push( y2 * cf,1 - y2 * cf, 0);\n\n        const col0 = getColor(heightIndex0);\n        const col1 = getColor(heightIndex1);\n        const col2 = getColor(heightIndex2);\n        const col3 = getColor(heightIndex3);\n\n        if (\n            !(col0 === GROUND_COLORS[WATER] &&\n              col1 === GROUND_COLORS[WATER] &&\n              col2 === GROUND_COLORS[WATER] &&\n              col3 === GROUND_COLORS[WATER])\n        )\n        {\n            vertices.push(x0, y0, z0);\n            vertices.push(x3, y3, z3);\n            vertices.push(x1, y1, z1);\n\n            vertices.push(x1, y1, z1);\n            vertices.push(x3, y3, z3);\n            vertices.push(x2, y2, z2);\n\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n\n            colors.push(col0[0], col0[1], col0[2]);\n            colors.push(col3[0], col3[1], col3[2]);\n            colors.push(col1[0], col1[1], col1[2]);\n\n            colors.push(col1[0], col1[1], col1[2]);\n            colors.push(col3[0], col3[1], col3[2]);\n            colors.push(col2[0], col2[1], col2[2]);\n        }\n\n        tileDataIndex += td_size;\n\n    }\n\n    //const values = Object.values(map);\n    //console.log(\"SYMMETRY-CHECK\", map, values.filter(n => n === 1).length, \"of\", values.length);\n\n    //console.log(\"MAX DELTA\", max);\n\n    //\n    console.log({vertices, normals, colors})\n\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n\n    const material = new MeshStandardMaterial({\n        vertexColors: true,\n        side: DoubleSide,\n        roughness: 0.5\n    });\n\n    // material.onBeforeCompile = shader => {\n    //\n    //     const {vertexShader,fragmentShader,uniforms} = shader;\n    //\n    //     console.log(\"--- VERT:\\n\", vertexShader);\n    //     console.log(\"--- FRAG:\\n\", fragmentShader);\n    //     console.log({uniforms})\n    // };\n\n    const mesh = new Mesh(geometry, material);\n\n    mesh.position.set(0, -WATER_LIMIT, 0);\n\n    // var wireframe = new WireframeGeometry( geometry );\n    //\n    // var line = new LineSegments( wireframe );\n    // line.material.depthTest = false;\n    // line.material.opacity = 0.25;\n    // line.material.transparent = true;\n    //\n    //\n    // scene.add( line );\n    scene.add(mesh);\n\n}\n\n\nconst skyParameters = {\n    distance: 1000,\n    inclination: 0.05,\n    azimuth: 0.25\n};\n\n\nfunction updateSun()\n{\n\n    if (!sky)\n    {\n        return;\n    }\n\n    const theta = Math.PI * (skyParameters.inclination - 0.5);\n    const phi = 2 * Math.PI * (skyParameters.azimuth - 0.5);\n\n    light.position.x = skyParameters.distance * Math.cos(phi);\n    light.position.y = skyParameters.distance * Math.sin(phi) * Math.sin(theta);\n    light.position.z = skyParameters.distance * Math.sin(phi) * Math.cos(theta);\n\n    sky.material.uniforms[\"sunPosition\"].value = light.position.copy(light.position);\n    water && water.material.uniforms[\"sunDirection\"].value.copy(light.position).normalize();\n\n    cubeCamera.update(renderer, sky);\n\n}\n\n\nlet cubeCamera, sky;\n\n\nfunction init()\n{\n\n    createScene();\n\n    container = document.getElementById(\"container\");\n\n    //\n\n    renderer = new WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    container.appendChild(renderer.domElement);\n\n    //\n\n    scene = new Scene();\n\n    camera = new PerspectiveCamera(55, window.innerWidth / window.innerHeight, 1, 20000);\n    camera.position.set(250, 250, 1000);\n\n    //\n\n    light = new DirectionalLight(\"#fff8d5\", 0.8);\n    scene.add(light);\n\n    cubeCamera = new CubeCamera(0.2, 1, 512);\n    cubeCamera.renderTarget.texture.generateMipmaps = true;\n    cubeCamera.renderTarget.texture.minFilter = LinearMipmapLinearFilter;\n\n    scene.background = cubeCamera.renderTarget;\n\n    // Water\n\n    const waterGeometry = new PlaneBufferGeometry(30000, 30000);\n    if (EFFECTS)\n    {\n        water = new Water(\n            waterGeometry,\n            {\n                textureWidth: 512,\n                textureHeight: 512,\n                waterNormals,\n                alpha: 0.6,\n                sunDirection: light.position.clone().normalize(),\n                sunColor: \"#fff8d5\",\n                waterColor: \"#000e1e\",\n                distortionScale: 2.5,\n                clipBias: 0.0001,\n                fog: true,\n                side: DoubleSide\n            }\n        );\n        water.rotation.x = -Math.PI / 2;\n        //scene.add(water);\n    }\n    else\n    {\n        const material = new MeshStandardMaterial({\n            side: FrontSide,\n            color: \"#048\",\n            envMap: cubeCamera.renderTarget.texture,\n            roughness: 0.0\n        });\n\n        const mesh = new Mesh(waterGeometry, material);\n        mesh.rotation.x = -Math.PI / 2;\n        scene.add(mesh)\n    }\n\n    // Skybox\n\n    if (EFFECTS)\n    {\n        sky = new Sky();\n\n        const uniforms = sky.material.uniforms;\n\n        uniforms[\"turbidity\"].value = 5;\n        uniforms[\"rayleigh\"].value = 1.5;\n        uniforms[\"luminance\"].value = 1;\n        uniforms[\"mieCoefficient\"].value = 0.05;\n        uniforms[\"mieDirectionalG\"].value = 0.9;\n\n        envMap = cubeCamera.renderTarget.texture\n\n        updateSun();\n    }\n    else\n    {\n        envMap = null;\n    }\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    //controls.maxPolarAngle = Math.PI * 0.45;\n    controls.maxPolarAngle = Math.PI;\n    controls.target.set(0, 0, 0);\n    controls.minDistance = 0.0;\n    controls.maxDistance = 1500.0;\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.02;\n    controls.update();\n\n    // stats = new Stats();\n    // container.appendChild( stats.dom );\n\n    // GUI\n\n    //const gui = new GUI();\n\n    // const folder = gui.addFolder( \"Sky\" );\n    // folder.add( skyParameters, \"inclination\", 0, 0.5, 0.0001 ).onChange( updateSun );\n    // folder.add( skyParameters, \"azimuth\", 0, 1, 0.0001 ).onChange( updateSun );\n    // folder.open();\n    //\n    // const uniforms = water.material.uniforms;\n    //\n    // const folder = gui.addFolder( \"Water\" );\n    // folder.add( uniforms.distortionScale, \"value\", 0, 8, 0.1 ).name( \"distortionScale\" );\n    // folder.add( uniforms.size, \"value\", 0.1, 10, 0.1 ).name( \"size\" );\n    // folder.add( uniforms.alpha, \"value\", 0.9, 1, .001 ).name( \"alpha\" );\n    // folder.open();\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n\n    ////////////////\n\n    if (HEIGHT_MAP)\n    {\n        addHeightMap();\n    }\n    else\n    {\n        addMarchingSquareObjects(marchingSquaresArray);\n    }\n\n}\n\n\nlet materialCompile = 0;\nlet materialGenerate = 0;\n\nconst dummy = new Object3D();\n\nfunction addMarchingSquareObjects(marchingSquaresArray)\n{\n    for (let i = WATER + 1; i < NUM_MATERIALS; i++)\n    {\n\n        const [attrsArray, positionsArray] = createMarchingSquares(i);\n        for (let j = 1; j < attrsArray.length; j++)\n        {\n            const attrs = attrsArray[j];\n            const positions = positionsArray[j];\n            if (attrs && positions)\n            {\n                //const material = materials[i].clone();\n                const material = new MeshStandardMaterial({\n                    side: DoubleSide,\n                    color: new Color(... GROUND_COLORS[i]),\n                    roughness: GROUND_ROUGHNESS[i]\n                });\n\n                // language=GLSL\n                const colorParsChunk = `\n                    attribute vec3 pos;\n                    attribute vec3 up;\n                    attribute vec3 vX1;\n                    attribute vec3 vX2;\n                    attribute vec3 vY1;\n                    #include <common>\n                `;\n\n                // language=GLSL\n                const instanceColorChunk = `\n\n                    vec3 vAxisStart = pos + position.x * vX1;\n                    vec3 vAxisEnd = pos + vY1 + position.x * vX2;\n\n                    vec3 transformed = vAxisStart + ((vAxisEnd - vAxisStart) * position.z) + (position.y * up);\n\n                    vec3 vNormAxisStart = vNormal.x * vX1;\n                    vec3 vNormAxisEnd = vY1 + vNormal.x * vX2;\n\n                    vNormal = normalize(vX1 * vNormal.x + vY1 * vNormal.y  + vNormal.z * up);\n                `\n\n                material.onBeforeCompile = shader => {\n\n                    const {vertexShader} = shader;\n\n                    shader.vertexShader = vertexShader\n                        .replace(\"#include <common>\", colorParsChunk)\n                        .replace(\"#include <begin_vertex>\", instanceColorChunk);\n\n                };\n\n                const count = attrs.length / ms_attrs_size + 1;\n                const geo = marchingSquaresArray[j];\n\n                if (!geo)\n                {\n                    throw new Error(\"No ms tiles for case \" + j);\n                }\n\n                const positionBuffer = new InterleavedBuffer(\n                    new Float32Array(attrs),\n                    ms_attrs_size\n                );\n\n                const geometry = new InstancedBufferGeometry();\n\n                BufferGeometry.prototype.copy.call(geometry, geo);\n\n                geometry.setAttribute(\"pos\", new InterleavedBufferAttribute(positionBuffer, 3, 0, false));\n                geometry.setAttribute(\"up\", new InterleavedBufferAttribute(positionBuffer, 3, 3, false));\n                geometry.setAttribute(\"vX1\", new InterleavedBufferAttribute(positionBuffer, 3, 6, false));\n                geometry.setAttribute(\"vX2\", new InterleavedBufferAttribute(positionBuffer, 3, 9, false));\n                geometry.setAttribute(\"vY1\", new InterleavedBufferAttribute(positionBuffer, 3, 12, false));\n\n                //console.log(\"Instance count for \", MATERIAL_NAMES[i], \"/\", CASE_NAMES[j], \" = \", count, geometry);\n\n                const mesh = new InstancedMesh(geometry, material, count);\n                for (let i = 0; i < count; i++)\n                {\n                    const idx = i * 3;\n                    const x = positions[idx]\n                    const y = positions[idx + 1]\n                    const z = positions[idx + 2]\n\n                    dummy.position.set(x, y, z);\n                    //dummy.rotation.x = TAU/4;\n                    dummy.updateMatrix();\n\n                    mesh.setMatrixAt(i, dummy.matrix)\n                }\n\n                mesh.needsUpdate = true;\n\n                scene.add(mesh);\n            }\n        }\n    }\n}\n\n\nconst heightIndexFactor = h_size / g_size;\n\n\nfunction createMarchingSquares(ground)\n{\n    let count = 0;\n\n    const {graph, tiles} = organicQuads;\n\n    const {length} = tiles;\n\n    const attrsArray = new Array(marchingSquaresArray.length);\n    const positionsArray = new Array(marchingSquaresArray.length);\n\n    let tileDataIndex = 0;\n    for (let i = 0; i < length; i += t_size)\n    {\n        // node indizes for our quad\n        const n0 = tiles[i + t_n0];\n        const n1 = tiles[i + t_n1];\n        const n2 = tiles[i + t_n2];\n        const n3 = tiles[i + t_n3];\n\n        // equivalent height map indizes\n        const heightIndex0 = n0 * heightIndexFactor;\n        const heightIndex1 = n1 * heightIndexFactor;\n        const heightIndex2 = n2 * heightIndexFactor;\n        const heightIndex3 = n3 * heightIndexFactor;\n\n        const centroidX = tileData[tileDataIndex + td_cx];\n        const centroidY = heightFn(tileData[tileDataIndex + td_cx], tileData[tileDataIndex + td_cy]);\n        const centroidZ = tileData[tileDataIndex + td_cy];\n\n        const x0 = graph[n0 + g_x];\n        const y0 = tileData[tileDataIndex + td_cut0] === -1 ?\n            heightMap[heightIndex0 + h_height] :\n            tileData[tileDataIndex + td_cut0];\n        //const y0 = heightMap[heightIndex0 + h_height];\n        const z0 = graph[n0 + g_y];\n\n        const x1 = graph[n1 + g_x];\n        const y1 = tileData[tileDataIndex + td_cut1] === -1 ?\n            heightMap[heightIndex1 + h_height] :\n            tileData[tileDataIndex + td_cut1];\n        //const y1 = heightMap[heightIndex1 + h_height];\n        const z1 = graph[n1 + g_y];\n\n        const x2 = graph[n2 + g_x];\n        const y2 = tileData[tileDataIndex + td_cut2] === -1 ?\n            heightMap[heightIndex2 + h_height] :\n            tileData[tileDataIndex + td_cut2];\n        //const y2 = heightMap[heightIndex2 + h_height]\n        const z2 = graph[n2 + g_y];\n\n        const x3 = graph[n3 + g_x];\n        const y3 = tileData[tileDataIndex + td_cut3] === -1 ?\n            heightMap[heightIndex3 + h_height] :\n            tileData[tileDataIndex + td_cut3];\n        //const y3 = heightMap[heightIndex3 + h_height];\n        const z3 = graph[n3 + g_y];\n\n        const ax = (x0 - x1);\n        const ay = (y0 - y1);\n        const az = (z0 - z1);\n        const bx = (x2 - x1);\n        const by = (y2 - y1);\n        const bz = (z2 - z1);\n        const cx = (x3 - x1);\n        const cy = (y3 - y1);\n        const cz = (z3 - z1);\n\n        // normal vector based on points 0, 1 and 2\n        const n0x = ay * bz - az * by;\n        const n0y = az * bx - ax * bz;\n        const n0z = ax * by - ay * bx;\n\n        // normal vector based on points 0, 1 and 3\n        const n1x = ay * cz - az * cy;\n        const n1y = az * cx - ax * cz;\n        const n1z = ax * cy - ay * cx;\n\n        // average with world up and renormalize\n        let nx = (n0x + n1x) / 2;\n        let ny = (n0y + n1y) / 2;\n        let nz = (n0z + n1z) / 2;\n\n        const f = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz);\n        nx *= f;\n        ny *= f;\n        nz *= f;\n\n        const g1 = heightMap[heightIndex0 + h_ground];\n        const g2 = heightMap[heightIndex1 + h_ground];\n        const g4 = heightMap[heightIndex2 + h_ground];\n        const g8 = heightMap[heightIndex3 + h_ground];\n\n        let tileCase = (\n            ( g1 === ground ? 1 : 0) +\n            ( g2 === ground ? 2 : 0) +\n            ( g4 === ground ? 4 : 0) +\n            ( g8 === ground ? 8 : 0)\n        );\n\n        if (tileCase !== 0)\n        {\n            //tileCase = 15;\n\n            // fix multi-color gaps\n            if (tileCase === 1 && g2 !== g8)\n            {\n                tileCase = 16;\n            }\n            else if (tileCase === 2 && g4 !== g1)\n            {\n                tileCase = 17;\n            }\n            else if (tileCase === 4 && g8 !== g2)\n            {\n                tileCase = 18;\n            }\n            else if (tileCase === 8 && g1 !== g4)\n            {\n                tileCase = 19;\n            }\n\n            let attrs = attrsArray[tileCase];\n            if (!attrs)\n            {\n                attrs = [];\n                attrsArray[tileCase] = attrs;\n            }\n\n            let positions = positionsArray[tileCase];\n            if (!positions)\n            {\n                positions = [];\n                positionsArray[tileCase] = positions;\n            }\n\n            positions.push(centroidX,centroidY,centroidZ);\n\n            attrs.push(\n                // ~~pos~~\n                x0 - centroidX, y0 - centroidY, z0 - centroidZ,\n                // up\n                nx,      ny,      nz,\n                // vX1\n                x3 - x0, y3 - y0, z3 - z0,\n                // vX2\n                x2 - x1, y2 - y1, z2 - z1,\n                // vY1\n                x1 - x0, y1 - y0, z1 - z0,\n            )\n        }\n\n        tileDataIndex += td_size;\n    }\n\n    return [attrsArray, positionsArray];\n}\n\n\nconst ms_attrs_size = 15;\n\n\nfunction onWindowResize()\n{\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n}\n\n\nlet inclinationCount = 0;\n\n\nfunction mainLoop()\n{\n\n    render();\n    //stats.update();\n\n    //skyParameters.inclination = 0.1 + Math.sin(inclinationCount += 0.001) * 0.3;\n\n    updateSun();\n\n    controls.update()\n    raf(mainLoop);\n\n}\n\n\nlet first = true;\n\nfunction render()\n{\n\n    const time = performance.now() * 0.0001;\n\n    // sphere.position.y = Math.sin( time ) * 5 + 1;\n    // sphere.rotation.x = time * 0.5;\n    // sphere.rotation.z = time * 0.51;\n\n    if (water)\n    {\n        water.position.y = WATER_LIMIT - 0.1 + Math.sin(time) * 0.4;\n        water.material.uniforms[\"time\"].value += 1.0 / 60.0;\n    }\n\n    renderer.render(scene, camera);\n\n    if(first)\n    {\n        //console.log({materialCompile})\n    }\n\n    first = false;\n}\n\n\nlet waterNormals, marchingSquaresArray;\n\n\nfunction extractMarchingSquares(scene)\n{\n    const {children} = scene;\n\n    const array = new Array(CASE_NAMES.length);\n\n    for (let i = 0; i < children.length; i++)\n    {\n        const kid = children[i];\n\n        const index = CASE_NAMES.indexOf(kid.name);\n        if (index >= 0)\n        {\n            array[index] = kid.geometry;\n        }\n    }\n    return array;\n}\n\n\nPromise.all([\n    0,//        loadScene(\"assets/tiles.glb\"),\n    loadScene(\"assets/ground.glb\"),\n    loadScene(\"assets/ms.glb\"),\n    //loadScene(\"assets/ms-raised.glb\"),\n    loadTexture(\"assets/waternormals.jpg\")\n])\n    .then(([\n               tiles,\n               ground,\n               marchingSquares,\n               //marchingSquaresRaised,\n               tWaterNormals\n           ]) => {\n\n        //scene.add( tiles.scene );\n\n        function dump(obj, level = \"\")\n        {\n            const {type} = obj;\n            if (type === \"Group\")\n            {\n                console.log(level + \"GROUP\", obj.name)\n\n                const nextLevel = level + \"    \"\n\n                const {children} = obj;\n                for (let i = 0; i < children.length; i++)\n                {\n                    dump(children[i], nextLevel);\n                }\n            }\n            else if (type === \"Mesh\")\n            {\n                console.log(level + \"MESH\", obj.name)\n            }\n        }\n\n\n        materials = MATERIAL_NAMES.map(n => {\n            return ground.scene.children.find(kid => kid.name === n).material;\n        })\n\n        console.log({materials});\n\n        marchingSquaresArray = extractMarchingSquares(marchingSquares.scene);\n        //const msMapRaised = extractMarchingSquares(marchingSquaresRaised.scene);\n        //\n        // console.log({marchingSquaresArray, msMapRaised})\n\n        console.log(marchingSquaresArray);\n\n        //dump(marchingSquares.scene, \"ms-normal: \");\n        //dump(marchingSquaresRaised.scene, \"ms-raised: \");\n\n        console.log(\"GLTF\", tiles)\n\n        // console.log(\"Scene Objects\", tiles.scene.children.map(kid => kid.name).join(\", \"))\n        //\n        // const obj  = tiles.scene.children.find(\n        //     kid => kid.name === \"tree_default\"\n        // );\n\n        tWaterNormals.wrapS = tWaterNormals.wrapT = RepeatWrapping;\n        waterNormals = tWaterNormals;\n\n        // tiles.animations; // Array<AnimationClip>\n        // tiles.scene; // Group\n        // tiles.scenes; // Array<Group>\n        // tiles.cameras; // Array<Camera>\n        // tiles.asset; // Object\n\n        // ReactDOM.render(\n        //     <Game/>,\n        //     document.getElementById(\"root\")\n        // )\n\n        init();\n        mainLoop();\n    })\n\n\n\n","export function heightLimit(x)\n{\n    const beach = 0.05;\n    const beachSquared = beach * beach;\n\n    const mountain = 0.6;\n    const mountain_mid = 0.5;\n\n    if (x < beach)\n    {\n        x = beach - x;\n\n        return beachSquared - x * x;\n    }\n    else if (x < mountain)\n    {\n        x = x - beach;\n        const delta = mountain - beach;\n        return beachSquared + (x * x * (mountain_mid - beachSquared) / (delta * delta));\n    }\n    else\n    {\n        x = 1 - x;\n\n        const delta = 1 - mountain;\n\n        return 1 - x * x * x * (1 - mountain_mid) / (delta * delta * delta);\n    }\n}\n","const sqrt = Math.sqrt;\n\nclass Vector\n{\n    constructor(x,y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns a copy of this vector.\n     *\n     * @returns {Vector} copy\n     */\n    copy()\n    {\n        return new Vector(this.x,this.y);\n    }\n\n    /**\n     * Adds to this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n\n    add(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x += x;\n            this.y += y;\n        }\n        else\n        {\n            this.x += x.x;\n            this.y += x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Subtracts from this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    subtract(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x -= x;\n            this.y -= y;\n        }\n        else\n        {\n            this.x -= x.x;\n            this.y -= x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by a planar number.\n     *\n     * @param n     scale\n     * @returns {Vector} this vector, scaled\n     */\n    scale(n)\n    {\n        this.x *= n;\n        this.y *= n;\n\n        return this;\n    }\n\n    /**\n     * Length of this vector\n     *\n     * @returns {number}    length\n     */\n    length()\n    {\n        const { x, y } = this;\n        return sqrt(x*x+y*y);\n    }\n\n    /**\n     * Scales the vector to normal length or a specified length\n     *\n     * @param targetLength      {number?} target length of the vector (default is 1, the normal vector length)\n     *\n     * @returns {Vector}\n     */\n    norm(targetLength = 1)\n    {\n        return this.scale(targetLength / this.length());\n    }\n\n    /**\n     * Rotate vector 90 degrees clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateClockwise()\n    {\n        const { x, y } = this;\n\n        //noinspection JSSuspiciousNameCombination\n        this.x = y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate vector 90 degrees counter clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateCounterClockwise()\n    {\n        const { x, y } = this;\n\n        this.x = -y;\n        //noinspection JSSuspiciousNameCombination\n        this.y = x;\n\n        return this;\n    }\n\n    /**\n     * Sets the coordinates of this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    set(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x = x;\n            this.y = y;\n        }\n        else\n        {\n            this.x = x.x;\n            this.y = x.y;\n        }\n\n    }\n}\n\nexport default Vector;\n"],"sourceRoot":""}