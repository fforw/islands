{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/../src/index.js","webpack://Demo/./src/test.js","webpack://Demo/../src/vector.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","3","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","SIXTH","Math","DEFAULT_CONFIG","width","height","numberOfRings","removeEdges","animatedEasing","renderFirstPassEdges","debug","weightFunction","dx","x1","dy","y1","edgeLength","maxIterations","animating","minTension","findOtherEdge","faces","x0","y0","index","out","count","edge","removeRandomEdges","config","stack","Int32Array","pos","scaled","tmp","getEdgeStack","console","stackPos","eraseEdgesOfFaceInStack","success","code","otherIndex","otherEdge","x2","y2","otherIsOutmostTri","subdivide","firstPassLen","numNodes","tris","quads","calculateNumNodes","nodes","Float64Array","tiles","tilePos","insertNode","isEdge","addTile","n0","insertEdge","n1","found","Error","connect","outmostEdge","firstEdgeIsOutmost","secondEdgeIsOutmost","m0x","m0y","m1x","m1y","m2x","m2y","cx","cy","n2","n3","n4","n5","n6","x3","y3","m3x","m3y","n7","n8","newTiles","numConnections","k","otherNode0","otherNode1","otherNode2","otherNode3","connectTiles","relaxWeighted","graph","tension","edgeCount","centerX","centerY","sumWeight","other","weight","ctx","hw","hh","limit","updateConfig","this","DIRECTIONS","Vector","off","numTris","v0","v1","v2","isOutmost","createHexagonTriangles","start","canvas","vX1","vX2","vY1","PHI","sqrt","TAU","PI","mouseX","mouseY","domready","container","document","getElementById","createElement","appendChild","getContext","innerWidth","innerHeight","vertices","boxSize","min","bx","by","translate","randomQuad","angle","random","dist","x","sin","y","cos","interpolate","vAxisStart","copy","scale","add","subtract","updateCoords","ev","rect","getBoundingClientRect","touches","clientX","left","clientY","top","addEventListener","raf","mainLoop","fillStyle","fillRect","strokeStyle","beginPath","moveTo","lineTo","stroke","renderQuads","transformed","targetLength"],"mappings":"qBACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,GAExB,IAAIC,EAAaC,OAAyB,iBAAIA,OAAyB,kBAAK,GACxEC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAM1B,OAFA1C,EAAgBJ,KAAK,CAAC,GAAG,IAElBM,I,+cCvJT,cACA,U,sgEAEO,E,OACA,E,OACA,E,OACA,E,OACA,E,OACA,E,OACA,E,OACA,E,UACA,E,gBACA,E,SACA,G,MAEA,E,MACA,E,WACA,E,UACA,E,UACA,E,UACA,E,UACA,E,UACA,E,UACA,E,UACA,E,SACA,G,OAGA,E,OACA,E,OACA,E,OACA,E,WACA,E,UACA,E,UACA,E,UACA,E,UACA,E,SACA,EAEP,IAEM0C,EAFN,EAAYC,QAEZ,EAQA,IAAMC,EAAiB,CAEnBC,MAFmB,EAInBC,OAJmB,EAMnBC,cANmB,EAQnBC,YARmB,GAWnBC,gBAXmB,EAcnBC,sBAdmB,EAiBnBC,OAjBmB,EAmBnBC,eAAiB,kBACb,IAAMC,EAAKC,EAAX,EACMC,EAAKC,EAAX,EACA,OAAOb,UAAUU,IAAUE,EAA3B,IAMJE,WA5BmB,GA8BnBC,cA9BmB,IAgCnBC,WAhCmB,EAmCnBC,WAAY,GA6GhB,SAASC,EAAcC,EAAOC,EAAIC,EAAIV,EAAIE,EAAIS,EAAOC,GAEjD,IAAK,IAAIhF,EAAT,EAAgBA,EAAI4E,EAApB,OAAkC5E,GAtL/B,GAwLC,GAAIA,IAAJ,GAYA,IAAMiF,EAAQL,EAAM5E,EAtMrB,GAuMC,GACI4E,EAAM5E,EAhNX,KAgNK4E,GAA0BA,EAAM5E,EA/MrC,KA+MK4E,GACAA,EAAM5E,EA/MX,KA8MK4E,GAC0BA,EAAM5E,EA9MrC,KA4MC,EAOI,OAFAgF,eACAA,UAGJ,GACIJ,EAAM5E,EAvNX,KAuNK4E,GAA0BA,EAAM5E,EAtNrC,KAsNK4E,GACAA,EAAM5E,EAtNX,KAqNK4E,GAC0BA,EAAM5E,EArNrC,KAmNC,EAOI,OAFAgF,eACAA,UAIJ,OAAIC,GAEA,GACIL,EAAM5E,EAjOf,KAiOS4E,GAA0BA,EAAM5E,EAhOzC,KAgOS4E,GACAA,EAAM5E,EAtOf,KAqOS4E,GAC0BA,EAAM5E,EArOzC,KAmOK,EAOI,OAFAgF,eACAA,cAKR,CACI,GACIJ,EAAM5E,EA7Of,KA6OS4E,GAA0BA,EAAM5E,EA5OzC,KA4OS4E,GACAA,EAAM5E,EA5Of,KA2OS4E,GAC0BA,EAAM5E,EA3OzC,KAyOK,EAOI,OAFAgF,eACAA,UAIJ,GACIJ,EAAM5E,EArPf,KAqPS4E,GAA0BA,EAAM5E,EApPzC,KAoPS4E,GACAA,EAAM5E,EA5Pf,KA2PS4E,GAC0BA,EAAM5E,EA3PzC,KAyPK,EAOI,OAFAgF,eACAA,WAOZA,WAIJ,IAAMA,EAAM,CAACD,OAAD,EAAYG,KAAM,GAqC9B,SAASC,EAAkBC,EAAQR,GAE/B,IAAMK,EAASG,oBAA2BA,EAA3BA,YAAD,IADlB,EAKUC,EAxCV,SAAsBD,EAAQR,GAM1B,IAJA,IAAM1E,EAAN,EAAekF,WACTC,EAAQ,IAAIC,WAAlB,GAEIC,EAAJ,EACSvF,EAAT,EAAgBA,EAAIoF,EAApB,aAAyCpF,GA1QtC,GA2QH,CAMI,KALoB4E,EAAM5E,EA7Q3B,IA4QH,GAOI,CACI,IAAMwF,EAASxF,GAAf,EACAqF,EAAME,KAANF,EACAA,EAAME,KAASC,EAAfH,EACAA,EAAME,KAASC,EAAfH,GAKR,IAAK,IAAIrF,EAAT,EAAiBA,EAAIuF,EAArB,EAA8BvF,IAC9B,CACI,IAAMkB,EAAIlB,GAAMyD,kBAAD,EAAf,GACMgC,EAAMJ,EAAZ,GACAA,KAAWA,EAAXA,GACAA,OAEJ,OAAOA,UAAP,GAUcK,CAAaN,EAA3B,GAEIA,EAAJ,OAEIO,+BAAoCN,EAApCM,UAiCJ,IA9BA,IAAIC,EAAJ,EAGMC,EAA0B,SAAAd,GAE5B,IAAK,IAAI/E,EAAT,EAAuBA,EAAIqF,EAA3B,OAAyCrF,IAEhCqF,OAAD,IAAJ,IAEIA,UAORS,EA5BR,EA0Ca9F,EAAT,EAAgBA,EAAhB,EAA2BA,IAC3B,CACI,IAAI+F,OAAI,EACR,EACA,CACI,GAAIH,IAAaP,EAAjB,OAOI,YALID,EAAJ,OAEIA,SAAgBO,mFAAhBP,IAKRW,EAAOV,EAAMO,YAXjB,IAYSG,GAGT,IAAMhB,EAAQgB,GAAd,EACMb,EAAN,EAAaa,EAQb,GADApB,EAAcC,EALHA,EAAMG,EAAjB,EAAyBG,GACdN,EAAMG,IAAQG,EAAzB,GACWA,MAAaN,EAAMG,EAlX/B,GAkX+CH,EAAMG,EAApD,GAA6DG,EAAD,IACjDA,MAAaN,EAAMG,EAlX/B,GAkX+CH,EAAMG,KAASG,EAAD,GAA5D,GAEqCH,EAArCJ,GACIK,YAAJ,IAAsBJ,EAAMI,QA9W7B,GA+WC,KACkBgB,EAA+BhB,EADjD,MACoCiB,EAAajB,EADjD,KAEUkB,EAAKhB,MAAaN,EAAMG,EArXnC,GAqXmDH,EAAMG,EAApD,GAA6DG,EAAD,IACtDiB,EAAKjB,MAAaN,EAAMG,EArXnC,GAqXmDH,EAAMG,KAASG,EAAD,GAHhE,GAOUkB,EADcxB,EAAMoB,EAA1B,IANJ,EAiBI,OADApB,EAAMoB,EAANpB,KACA,GAEI,OACIA,EAAMoB,EArYnB,GAqYapB,EACAA,EAAMoB,EArYnB,GAqYapB,EACA,MACJ,OACIA,EAAMoB,EAzYnB,GAyYwCpB,EAAMoB,EA3Y9C,GA4YapB,EAAMoB,EAzYnB,GAyYwCpB,EAAMoB,EA3Y9C,GA4YapB,EAAMoB,EA7YnB,GA6YapB,EACAA,EAAMoB,EA7YnB,GA6YapB,EACA,MACJ,OACIA,EAAMoB,EA/YnB,GA+YwCpB,EAAMoB,EAjZ9C,GAkZapB,EAAMoB,EA/YnB,GA+YwCpB,EAAMoB,EAjZ9C,GAkZapB,EAAMoB,EAnZnB,GAmZwCpB,EAAMoB,EArZ9C,GAsZapB,EAAMoB,EAnZnB,GAmZwCpB,EAAMoB,EArZ9C,GAsZapB,EAAMoB,EAvZnB,GAuZapB,EACAA,EAAMoB,EAvZnB,GAuZapB,EAEA,IAEIA,EAAMoB,EArZvB,GAqZiBpB,GAMZiB,EA7CJ,GAgDIjB,EAAMG,EA/ZX,GA+ZKH,EAEAkB,IAEJD,KAMJ,OAFAT,SAAgBO,8CAAhBP,GAEA,EAiFJ,SAASiB,EAAUjB,EAAQR,GA6FvB,IA5FJ,IACY0B,EAAiBlB,EAD7B,aAGUmB,EAjFV,SAA2BnB,EAAQR,GAI/B,IAFA,IAAI4B,EAAJ,EACIC,EAAJ,EACSzG,EAAT,EAAgBA,EAAIoF,EAApB,aAAyCpF,GA/atC,GAgbH,CACI,IAAMiF,EAAQL,EAAM5E,EAnbrB,GAqbC,IAAIiF,EAEAuB,IAEC,IAAIvB,GAELwB,IAOR,OAAOA,IAAP,EAAmBD,EA4DFE,CAAkBtB,EAAnC,GAEMuB,EAAQ,IAAIC,aAlff,GAkf4BL,GAGzBM,EAAQ,IAAIvB,WAzef,GAye4BiB,EAAD,EAAD,IAEzBhB,EAAJ,EACIuB,EAAJ,EAEMC,EAAa,SAAClC,EAAIC,EAAIkC,GAExBnC,KACAC,KAEA,IAAK,IAAI9E,EAAT,EAAgBA,EAAhB,EAAyBA,GA/f1B,GAigBK,GAAIyD,SAASkD,KAATlD,MAA+BA,SAASkD,EAAM3G,EAAN2G,GAATlD,GAAnC,EAYI,OALIuD,IAAWL,EAAM3G,EAArB,KAEI2G,EAAM3G,EAAN2G,MAGJ,EAIR,IAAM5B,EAAN,EASA,OAPA4B,EAAMpB,EA7hBP,GA6hBCoB,EACAA,EAAMpB,EA7hBP,GA6hBCoB,EACAA,EAAMpB,EA7hBP,GA6hByByB,EAAS,EAAjCL,EACAA,EAAMpB,EA7hBP,GA6hBCoB,EAEApB,GAxhBD,GA0hBC,GAGE0B,EAAW,SAACC,EAAD,OAIbL,EAAMC,EA9hBP,GA8hBCD,EACAA,EAAMC,EA9hBP,GA8hBCD,EACAA,EAAMC,EA9hBP,GA8hBCD,EACAA,EAAMC,EA9hBP,GA8hBCD,EAEAC,GA1hBD,GA6hBGK,EAAa,SAACD,EAAIE,GAIpB,IAHA,IAAInC,EAAQ0B,EAAMO,EAjjBnB,GAmjBKG,GAAJ,EACSrH,EAAT,EAAgBA,EAAhB,EAA2BA,IAC3B,CAEI,GADc2G,EAAMO,EArjBzB,EAqjBK,KACA,EACA,CACIG,KACA,OAGR,MACA,CACI,GAAIpC,GAAJ,EAEI,MAAM,IAAIqC,MAAV,4BAGJX,EAAMO,EAnkBX,EAmkB0BjC,KAArB0B,EACAA,EAAMO,EArkBX,GAqkBKP,IAIFY,EAAU,SAACL,EAAIE,GAEjBD,EAAWD,EAAXC,GACAA,EAAWC,EAAXD,IAIKnH,EAAT,EAAgBA,EAAhB,EAAkCA,GArlB/B,GAslBH,CACI,IAAMiF,EAAQL,EAAM5E,EAzlBrB,GA2lBO6E,EAAKD,EAAM5E,EAnmBlB,GAomBO8E,EAAKF,EAAM5E,EAnmBlB,GAomBOoE,EAAKQ,EAAM5E,EAnmBlB,GAomBOsE,EAAKM,EAAM5E,EAnmBlB,GAomBOkG,EAAKtB,EAAM5E,EAnmBlB,GAomBOmG,EAAKvB,EAAM5E,EAnmBlB,GAqmBOwH,EAAc5C,EAAM5E,EAjmB3B,GAmmBOyH,EAAN,IAA2BD,EACrBE,EAAN,IAA4BF,EAE5B,OAAIvC,EACJ,CACI,IAAM0C,GAAO9C,EAAD,GAAZ,EACM+C,GAAO9C,EAAD,GAAZ,EACM+C,GAAOzD,EAAD,GAAZ,EACM0D,GAAOxD,EAAD,GAAZ,EACMyD,GAAO7B,EAAD,GAAZ,EACM8B,GAAO7B,EAAD,GAAZ,EAEM8B,GAAMpD,IAAD,GAAX,EACMqD,GAAMpD,IAAD,GAAX,EAEMoC,EAAKH,EAAWlC,EAAtB,GACMuC,EAAKL,EAAWY,EAAtB,GACMQ,EAAKpB,EAAW3C,EAAIE,EAA1B,GACM8D,EAAKrB,EAAWc,EAAKC,EAA3B,GACMO,EAAKtB,EAAWb,EAAIC,EAA1B,GACMmC,EAAKvB,EAAWgB,EAAtB,GACMQ,EAAKxB,EAAWkB,EAAtB,GAEAV,EAAQL,EAARK,GACAA,EAAQH,EAARG,GACAA,EAAQgB,EAARhB,GACAA,EAAQe,EAARf,GAEAA,EAAQH,EAARG,GACAA,EAAQY,EAARZ,GACAA,EAAQa,EAARb,GACAA,EAAQgB,EAARhB,GAEAA,EAAQe,EAARf,GACAA,EAAQgB,EAARhB,GACAA,EAAQa,EAARb,GACAA,EAAQc,EAARd,GAEAN,EAAQC,EAAD,IAAPD,GACAA,EAAQG,EAAD,IAAPH,GACAA,EAAQqB,EAAD,IAAPrB,QAGC,OAAIhC,EACT,CACI,IAAMuD,EAAK5D,EAAM5E,EAnpBtB,GAopBWyI,EAAK7D,EAAM5E,EAnpBtB,GAqpBW2H,GAAO9C,EAAD,GAAZ,EACM+C,GAAO9C,EAAD,GAAZ,EACM+C,GAAOzD,EAAD,GAAZ,EACM0D,GAAOxD,EAAD,GAAZ,EACMyD,GAAO7B,EAAD,GAAZ,EACM8B,GAAO7B,EAAD,GAAZ,EACMuC,GAAOF,EAAD,GAAZ,EACMG,GAAOF,EAAD,GAAZ,EAEMR,GAAMpD,MAAD,GAAX,EACMqD,GAAMpD,MAAD,GAAX,EAEMoC,EAAKH,EAAWlC,EAAtB,GACMuC,EAAKL,EAAW,EAAtB,GACMoB,EAAKpB,EAAW3C,EAAIE,EAA1B,GACM8D,EAAKrB,EAAW,EAAD,EAArB,GACMsB,GAAKtB,EAAWb,EAAIC,EAAIsB,GAA9B,GACMa,GAAKvB,EAAW,EAAD,EAArB,GACMwB,GAAKxB,EAAWyB,EAAIC,EAA1B,GACMG,GAAK7B,EAAW2B,EAAtB,GACMG,GAAK9B,EAAW,EAAtB,GAEAQ,EAAQ,EAARA,GACAA,EAAQ,EAARA,GACAA,EAAQ,EAARA,GACAA,EAAQ,EAARA,IACAA,EAAQ,GAARA,IACAA,EAAQ,GAARA,IACAA,EAAQ,GAARA,IACAA,EAAQqB,GAARrB,GAEAA,EAAQsB,GAARtB,GACAA,EAAQsB,GAARtB,IACAA,EAAQsB,GAARtB,IACAA,EAAQsB,GAARtB,GAEAN,EAAQ,EAAD,KAAPA,IACAA,EAAQ,EAAD,IAAPA,IACAA,EAAQ4B,GAAD,KAAP5B,IACAA,EAAQ2B,GAAD,MAAP3B,KAORtB,+BAAgCkB,EAAhClB,OAA8C,YAA9CA,GAEA,IAAMmD,GAAWjC,UAAjB,GAIA,OAjQJ,SAAsBzB,EAAQyB,GAI1B,IAHJ,IACY3G,EAAW2G,EADvB,OAGa7G,EAAT,EAAcA,EAAd,EAA0BA,GAjbvB,EAkbH,CAEI,IADA,IAAI+I,EAAJ,EACS7H,EAAT,EAAgBA,EAAhB,EAAuBA,IACvB,CAKI,IAJA,IAAMgG,EAAKL,EAAM7G,EA/btB,EA+bK,GACMoH,EAAKlG,MAAU2F,EAAM7G,EAhchC,GAgc6C6G,EAAM7G,EAhcnD,EAgcmDA,EAA9C,GAEIgG,GAAJ,EACSgD,EAAT,EAAcA,EAAInC,EAAlB,OAAgCmC,GA1brC,EA4bS,GAAIA,IAAJhJ,EAAA,CAKA,IAAMiJ,EAAapC,EAAMmC,EA1clC,GA2ceE,EAAarC,EAAMmC,EA1clC,GA2ceG,EAAatC,EAAMmC,EA1clC,GA2ceI,EAAavC,EAAMmC,EA1clC,GA+cS,GACIE,OAAqBD,IAArBC,GACAC,OAAqBD,IADrBA,GAEAE,OAAqBD,IAFrBD,GAGAD,OAAqBG,IAJzB,EAMA,CAEIpD,IACA+C,IACA,OAIRlC,EAAM7G,EA3dX,EA2dK6G,KAEJA,EAAM7G,EA9dP,GA8duB+I,QAAtBlC,EAGJzB,SAAgBO,yBAAhBP,GAgNAiE,CAAajE,EAAbiE,IAEO,CAAC1C,UAAD,GAAP,IAIJ,SAAS2C,EAAclE,EAAQmE,GAK3B,IAJJ,IADsC/E,EACtC,uDADsD,EAG3CtE,EAAUqJ,EAFrB,OAIavJ,EAAT,EAAgBA,EAAhB,EAAmCA,IACnC,CAEI,IADA,IAAIwJ,EAAJ,EACStI,EAAT,EAAgBA,EAAhB,EAA4BA,GAtsB7B,GAwsBK,IAAKqI,EAAMrI,EAhtBhB,GAitBK,CASI,IARA,IAAM2D,EAAK0E,EAAMrI,EAptB1B,GAqtBe4D,EAAKyE,EAAMrI,EAptB1B,GAqtBeuI,EAAYF,EAAMrI,EAntBjC,GAqtBawI,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EAESZ,EAAT,EAAgBA,EAAhB,EAA+BA,IAC/B,CACI,IAAMa,EAAQN,EAAMrI,IAApB,GAEMkD,EAAKmF,EAAX,GACMjF,EAAKiF,EAAMM,EAAjB,GAEMC,EAAS1E,uBAAf,GAEAsE,GAAWtF,EAAXsF,EACAC,GAAWrF,EAAXqF,EACAC,KAGJ,IAAMxF,EAAKsF,EAAX,EACMpF,EAAKqF,EAAX,EAEMxF,EAAKC,EAAX,EACMC,EAAKC,EAAX,EAEAiF,EAAMrI,EAhvBf,GAgvBSqI,EACAA,EAAMrI,EAhvBf,GAgvBSqI,EAEAC,GAAWrF,IAAUE,EAArBmF,EAKR,GAAIA,EAAUpE,EAAd,WAGI,OADAA,SAAgBO,sCAAuCP,EAAvCO,mBAAmEP,EAAnEO,WAAhBP,eACA,EAEJA,eAQJ,OALKA,EAAL,gBAEIA,SAAgBO,YAAY,mCAAqCP,EAAjEA,gBAGJ,E,MAQA,cACA,Y,4FAAA,qBAqCS,SAAA2E,GACT,IACY3E,EAAyB,EADrC,OACoBmE,EAAiB,EADrC,MAC2B3E,EAAU,EADrC,MAIImF,SAEA,IAAMC,EAAK5E,QAAX,EACM6E,EAAK7E,SAAX,EAEA2E,iBAEiBR,EAXrB,OAgBI,GAHAQ,mBACAA,iBAAuB3E,EAAvB2E,MAAqC3E,EAArC2E,QAEI3E,EAAJ,qBACA,CAII2E,qBACAA,cAIA,IADA,IACSxE,EAAT,EAAkBA,EAAMH,EAAxB,aAA6CG,GAh1BlD,GAi1BK,CACI,IAAMN,EAAQL,EAAMW,EAp1B7B,GAs1BS,GAAIN,GAAJ,EACA,CAEI8E,cACAA,SAAWnF,EAAMW,EAl2B9B,GAk2B2CX,EAAMW,EAj2BjD,IAm2Ba,IAAK,IAAIvF,EAAT,EAAgBA,EAAhB,EAA2BA,IAEvB+J,SAAWnF,EAAMW,EAAjBwE,EAAuB/J,GAAK4E,EAAMW,IAAOvF,EAAzC+J,IAGJA,cACAA,WAEA,IAAMvC,EAAc5C,EAAMW,EAn2BvC,GAo2BiBiC,GAAJ,IAEIuC,qBACAA,cACAA,SAAWnF,EAAMW,EAAjBwE,EAAuBvC,GAAmB5C,EAAMW,IAAMiC,EAAtDuC,IAEIvC,IAAgBvC,EAApB,EAEI8E,SAAWnF,EAAMW,EAr3BtC,GAq3BmDX,EAAMW,EAp3BzD,IAw3BqBwE,SAAWnF,EAAMW,EAAjBwE,GAAwBvC,EAAD,IAA0B5C,EAAMW,KAAOiC,EAAD,GAA7DuC,IAEJA,WACAA,wBAsFhBA,YAEI3E,EAAJ,WAEQkE,EAAclE,EAAlB,KAEIA,iBA5LR,IAxsBcA,EA5CU8E,EAovBlB9E,EAAS,EAAH,QAAZ,IAxsBcA,EA6sBd+E,GA3sBJ/E,SA5CO,IAFqB8E,EA8Ca9E,EAAzCA,eA5CO,IAAmB8E,EAA1B,GA6CA9E,eA7EG,GA6EmBA,WACtBA,sBAA2BA,WAC3BA,aAAsB3B,SAAS2B,EAAT3B,MAAuB2B,EAAvB3B,SAAyC2B,kBAA3C,GAApBA,EACAA,YAAmBA,EAAnBA,eACAA,eAwsBIgF,KAAA,SAEA,IAAMxF,EAtsBd,SAAgCQ,GAG5B,IAAM8E,EAAQ9E,EAFlB,cAMUiF,EAAa,CACf,IAAIC,EAAJ,QACI7G,YAAc2B,EADlB,WAEI3B,YAAc2B,EAHH,YAKf,IAAIkF,EAAJ,QACI7G,YAAkB2B,EADtB,WAEI3B,YAAkB2B,EAPP,YASf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAXX,YAaf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAfX,YAiBf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAnBX,YAqBf,IAAIkF,EAAJ,QACI7G,WAASD,GAAa4B,EAD1B,WAEI3B,WAASD,GAAa4B,EAvB9B,aA2BMR,EAAQ,IAAIgC,aAAaxB,EAA/B,cAEImF,EAAJ,EAEItF,EAAJ,EACIuF,EAAJ,EACA,EACA,CACI,IAAK,IAAIxK,EAAT,EAAgBA,EAAhB,EAAuBA,IAQnB,IANA,IAAMyK,EAAKJ,EAAX,GACMK,EAAKL,GAAYrK,EAAD,GAAtB,GACM2K,EAAKN,GAAYrK,EAAD,GAAtB,GAEIuF,EAAMkF,eAAV,GAESvJ,EAAT,EAAgBA,EAAhB,EAA6BA,IAEzB,KAAIA,EAEA0D,EAAM2F,EArJnB,GAqJa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EArJnB,GAqJa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EArJnB,GAqJkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EArJnB,GAqJkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EArJnB,GAqJkChF,IAAQoF,EAAT,EAApB/F,EACAA,EAAM2F,EArJnB,GAqJkChF,IAAQoF,EAAT,EAApB/F,EACAA,EAAM2F,EAnJnB,GAmJa3F,EACAA,EAAM2F,EAnJnB,IAmJa3F,EAEA2F,GApJb,GAsJahF,aAGJ,CAGI,IAAMqF,EAAY3F,IAAlB,EAEAL,EAAM2F,EAxKnB,GAwKa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EAxKnB,GAwKa3F,EAAqBW,EAAD,EACpBX,EAAM2F,EAxKnB,GAwKkChF,IAAQkF,EAAT,EAApB7F,EACAA,EAAM2F,EAxKnB,GAwKkChF,IAAQkF,EAAT,EAApB7F,EACAA,EAAM2F,EAxKnB,GAwKkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EAxKnB,GAwKkChF,IAAQmF,EAAT,EAApB9F,EACAA,EAAM2F,EAtKnB,GAsKa3F,EACAA,EAAM2F,EAtKnB,GAsK0CK,EAAY,GAAzChG,EAEA2F,GAvKb,GA4KCC,WAEKvF,IAjDT,GAmDA,SA2mBkB4F,CAAd,GAEIzF,EAAJ,uBAEIgF,KAAA,MAAahF,kCAA2CR,EAA3CQ,QAAb,GAGJ,IAAM0F,EAAQ1F,UAAgB,IAA9B,WAEAD,EAAkB,EAAlBA,GAEAC,SAAgBO,gCAAiC,eAAjCA,EAAhBP,MAtBJ,QAwB2BiB,EAAU,EAxBrC,MAwBWkD,EAxBX,KAwBkB1C,EAxBlB,KAyBIuD,KAAA,QAEKhF,EAAL,WAEIkE,EAAc,EAAD,EAAgBlE,EAA7BkE,eAGJc,KAAA,S,6CC7zBR,WAeIL,EAAKgB,EAMLxF,EACAyF,EACAC,EACAC,EAxBJ,8CAOMC,GAAO,EAAI1H,KAAK2H,KAAK,IAAM,EAC3BC,EAAgB,EAAV5H,KAAK6H,GAEXlG,EAAS,CACXzB,MAAO,EACPC,OAAQ,GAMR2H,EAAS,EACTC,EAAS,EAabC,KACI,WAEI,IAAMC,EAAYC,SAASC,eAAe,aAE1Cb,EAASY,SAASE,cAAc,UAChCH,EAAUI,YAAYf,GAEtBhB,EAAMgB,EAAOgB,WAAW,MAExB,IAAMpI,EAA8B,EAArBN,OAAO2I,WAChBpI,EAAgC,EAAtBP,OAAO4I,YAIvB7G,EAAOzB,MAAQA,EACfyB,EAAOxB,OAASA,EAEhBmH,EAAOpH,MAAQA,EACfoH,EAAOnH,OAASA,EAEhB,IAUIsI,EAVElC,EAAKrG,EAAQ,EACbsG,EAAKrG,EAAS,EAEduI,EAAU1I,KAAK2I,IAAIzI,EAAOC,GAAU,EAEpCyI,EAAK1I,EAAM,EACX2I,GAAMH,EAAQ,EAEpBpC,EAAIwC,UAAU5I,EAAM,EAAGsG,GAIvB,IAAMuC,EAAa,WACfN,EAAW,GACX,IAAK,IAAIlM,EAAE,EAAGA,EAAIqL,EAAKrL,GAAKqL,EAAI,EAChC,CACI,IAAMoB,EAAQzM,EAAIqL,EAAI,GAAK5H,KAAKiJ,SAAWrB,EAAI,EACzCsB,EAAO1C,EAAKkB,EAAMlB,EAAG,GAAKxG,KAAKiJ,SAAWzC,EAAK,EAG/C2C,GAAKnJ,KAAKoJ,IAAIJ,GAASE,EACvBG,EAAIrJ,KAAKsJ,IAAIN,GAASE,EAC5BT,EAAS1L,KAAKoM,EAAGE,GAGrBvH,EAAM,IAAI+E,SAAO4B,EAAS,GAAKA,EAAS,IACxClB,EAAM,IAAIV,SAAO4B,EAAS,GAAKA,EAAS,GAAIA,EAAS,GAAKA,EAAS,IACnEjB,EAAM,IAAIX,SAAO4B,EAAS,GAAKA,EAAS,GAAIA,EAAS,GAAKA,EAAS,IACnEhB,EAAM,IAAIZ,SAAO4B,EAAS,GAAKA,EAAS,GAAIA,EAAS,GAAKA,EAAS,KAwEvE,SAASc,EAAYJ,EAAGE,GAEpB,IAAMG,EAAajC,EAAIkC,OAAOC,MAAMP,GAAGQ,IAAI7H,GAG3C,OAFiB0F,EAAIiC,OAAOC,MAAMP,GAAGQ,IAAI7H,GAAK6H,IAAIlC,GAElCmC,SAASJ,GAAYE,MAAML,GAAGM,IAAIH,GAmBtDT,IAEA,IAAMc,EAAe,SAAAC,GAEjB,IAEIX,EAAEE,EAFAU,EAAOzC,EAAO0C,wBAGhBF,EAAGG,SAEHd,EAAIW,EAAGG,QAAQ,GAAGC,QAAUH,EAAKI,KACjCd,EAAIS,EAAGG,QAAQ,GAAGG,QAAUL,EAAKM,MAIjClB,EAAIW,EAAGI,QAAUH,EAAKI,KACtBd,EAAIS,EAAGM,QAAUL,EAAKM,KAK1BvC,GAAUqB,EAAIjJ,EAAM,EAAI0I,GAAIF,EAC5BX,GAAUW,EAAQ,GAAKW,EAAI7C,IAAKkC,GAIpCpB,EAAOgD,iBAAiB,QAASvB,GAAY,GAC7CzB,EAAOgD,iBAAiB,YAAaT,GAAc,GACnDvC,EAAOgD,iBAAiB,YAAaT,GAAc,GAEnDU,KA7CiB,SAAXC,IAzEFlE,EAAImE,UAAY,OAChBnE,EAAIoE,UAAUnE,GAAKC,EAAItG,EAAOC,GAIlC,WAGImG,EAAIqE,YAAc,OAClBrE,EAAIsE,YAHR,IAKWnO,EAAUgM,EAAVhM,OAEP6J,EAAIuE,OAAOpC,EAAShM,EAAS,GAAIgM,EAAShM,EAAS,IACnD,IAAK,IAAIF,EAAI,EAAGA,EAAIE,EAAQF,GAAK,EAE7B+J,EAAIwE,OAAOrC,EAASlM,GAAIkM,EAASlM,EAAI,IAEzC+J,EAAIyE,SAEJzE,EAAIqE,YAAc,OAClBrE,EAAIsE,YACJtE,EAAIuE,OAAOjC,EAAIC,GACfvC,EAAIwE,OAAOlC,EAAKF,EAASG,GACzBvC,EAAIwE,OAAOlC,EAAKF,EAASG,EAAKH,GAC9BpC,EAAIwE,OAAOlC,EAAIC,EAAKH,GACpBpC,EAAIwE,OAAOlC,EAAIC,GAEfvC,EAAIuE,OAAOjC,EAAIC,GACfvC,EAAIwE,OAAOlC,EAAKF,EAASG,EAAKH,GAE9BpC,EAAIuE,OAAOjC,EAAIC,EAAKH,GACpBpC,EAAIwE,OAAOlC,EAAKF,EAASG,GAEzBvC,EAAIyE,SAEJzE,EAAIqE,YAAc,OAEdrE,EAAIsE,YACJ,IAAMlL,EAAI6J,EAAY,EAAE,GACxBjD,EAAIuE,OAAOnL,EAAEyJ,EAAEzJ,EAAE2J,GACjB,IAAK,IAAIF,EAAI,GAAKA,EAAI,EAAGA,GAAK,GAC9B,CACI,IAAMzJ,EAAI6J,EAAYJ,EAAEA,GAExB7C,EAAIwE,OAAOpL,EAAEyJ,EAAGzJ,EAAE2J,GAGtB/C,EAAIyE,SAGJzE,EAAIsE,YACJ,IAAMlL,EAAI6J,EAAY,EAAE,GACxBjD,EAAIuE,OAAOnL,EAAEyJ,EAAEzJ,EAAE2J,GACjB,IAAK,IAAIF,EAAI,GAAKA,EAAI,EAAGA,GAAK,GAC9B,CACI,IAAMzJ,EAAI6J,EAAYJ,EAAE,EAAIA,GAC5B7C,EAAIwE,OAAOpL,EAAEyJ,EAAGzJ,EAAE2J,GAEtB/C,EAAIyE,SAiBRC,GAEA,IAAMC,EAAc1B,EAAYzB,EAAQC,GAIxCzB,EAAImE,UAAY,OAChBnE,EAAIoE,SAASO,EAAY9B,EAAI,EAAG8B,EAAY5B,EAAI,EAAG,EAAG,GAEtDkB,IAAIC,U,2RC7KhB,IAAM7C,EAAO3H,KAAb,K,aAII,iB,4FACA,SACI2G,KAAA,IACAA,KAAA,I,sDAUA,OAAO,IAAIE,EAAOF,KAAX,EAAkBA,KAAzB,K,0BAWAwC,EAAEE,GAaF,MAXA,iBAAWF,GAEPxC,KAAA,KACAA,KAAA,OAIAA,KAAA,GAAUwC,EAAV,EACAxC,KAAA,GAAUwC,EAAV,GAGJ,O,+BAUKA,EAAEE,GAaP,MAXA,iBAAWF,GAEPxC,KAAA,KACAA,KAAA,OAIAA,KAAA,GAAUwC,EAAV,EACAxC,KAAA,GAAUwC,EAAV,GAGJ,O,4BASE5J,GAKF,OAHAoH,KAAA,KACAA,KAAA,KAEA,O,+BASJ,IACYwC,EADZ,OACeE,EADf,OAEI,OAAO1B,EAAKwB,IAAIE,EAAhB,K,6BAWJ,IADK6B,EACL,uDADoB,EAEhB,OAAOvE,KAAK+C,MAAMwB,EAAevE,KAAjC,Y,wCASJ,IACYwC,EADZ,OACeE,EADf,OAOI,OAHA1C,KAAA,IACAA,KAAA,KAEA,O,+CASJ,IACYwC,EADZ,OACeE,EADf,OAOI,OAJA1C,KAAA,GAHJ,EAKIA,KAAA,IAEA,O,0BAUAwC,EAAEE,GAEF,iBAAWF,GAEPxC,KAAA,IACAA,KAAA,MAIAA,KAAA,EAASwC,EAAT,EACAxC,KAAA,EAASwC,EAAT,Q","file":"bundle-test-282a7509c99989b20c5f.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t3: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpDemo\"] = window[\"webpackJsonpDemo\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([16,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import now from \"performance-now\"\nimport Vector from \"./vector\";\n\nexport const f_x0 = 0;\nexport const f_y0 = 1;\nexport const f_x1 = 2;\nexport const f_y1 = 3;\nexport const f_x2 = 4;\nexport const f_y2 = 5;\nexport const f_x3 = 6;\nexport const f_y3 = 7;\nexport const f_count = 8;\nexport const f_outmostEdge = 9;\nexport const f_size = 10;\n\nexport const g_x = 0;\nexport const g_y = 1;\nexport const g_isEdge = 2;\nexport const g_count = 3;\nexport const g_edge0 = 4;\nexport const g_edge1 = 5;\nexport const g_edge2 = 6;\nexport const g_edge3 = 7;\nexport const g_edge4 = 8;\nexport const g_edge5 = 9;\nexport const g_size = 10;\n\n\nexport const t_n0 = 0;\nexport const t_n1 = 1;\nexport const t_n2 = 2;\nexport const t_n3 = 3;\nexport const t_isEdge = 4;\nexport const t_tile0 = 5;\nexport const t_tile1 = 6;\nexport const t_tile2 = 7;\nexport const t_tile3 = 8;\nexport const t_size = 9;\n\nconst TAU = Math.PI * 2;\n\nconst SIXTH = TAU / 6;\n\nfunction calculateNumberOfFaces(limit)\n{\n    return 6 * (limit + 1) * (limit + 1);\n}\n\n\nconst DEFAULT_CONFIG = {\n    /** coordinate width */\n    width: 0,\n    /** coordinate height */\n    height: 0,\n    /** number of rings in the hexagon / number of base intersections of hexaxgon */\n    numberOfRings: 5,\n    /** how many percent of the edges shall we attempt to remove? */\n    removeEdges: 50,\n\n    /** if true, the graph will be layouted a bit with every render. If false, the graph relaxation happens at creation */\n    animatedEasing: true,\n\n    /** Set to true to render the original triangles, set to \"merged\" to render the merged triangles before subdivision */\n    renderFirstPassEdges: false,\n\n     /** Set to true to enable some debug logging */\n    debug : false,\n\n    weightFunction : (x0,y0,x1,y1) => {\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n        return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /// MOSTLY INTERNAL CONFIG ////\n    \n    // calculated internally to match the height\n    edgeLength: 80,\n    // number of iterations until we give up (we will drop out due to having reached low energy most likely much sooner)\n    maxIterations: 100,\n    // set to false if the graph is done animated on animatedEasing : true\n    animating: true,\n\n    // Minimum energy at which we stop relaxing the graph\n    minTension: 2\n};\n\nfunction updateConfig(config)\n{\n    config.numFaces = calculateNumberOfFaces(config.numberOfRings)\n    config.firstPassLen = config.numFaces * f_size\n    config.firstPassNumEdges = config.numFaces * 3\n    config.edgeLength = ( Math.min(config.width, config.height) / (config.numberOfRings * 2 + 2)) | 0;\n    config.animating = config.animatedEasing;\n    config.relaxCount = 0;\n}\n\n\nfunction createHexagonTriangles(config)\n{\n\n    const limit = config.numberOfRings;\n\n    //console.log(\"createHexagonTriangles\", limit);\n\n    const DIRECTIONS = [\n        new Vector(\n            Math.cos(0) * config.edgeLength,\n            Math.sin(0) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH) * config.edgeLength,\n            Math.sin(SIXTH) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 2) * config.edgeLength,\n            Math.sin(SIXTH * 2) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 3) * config.edgeLength,\n            Math.sin(SIXTH * 3) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 4) * config.edgeLength,\n            Math.sin(SIXTH * 4) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 5) * config.edgeLength,\n            Math.sin(SIXTH * 5) * config.edgeLength\n        )\n    ];\n\n    const faces = new Float64Array(config.firstPassLen);\n\n    let off = 0;\n\n    let count = 0;\n    let numTris = 1;\n    do\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            const v0 = DIRECTIONS[i];\n            const v1 = DIRECTIONS[(i + 1) % 6];\n            const v2 = DIRECTIONS[(i + 2) % 6];\n\n            let pos = v0.copy().scale(count);\n\n            for (let j = 0; j < numTris; j++)\n            {\n                if (j & 1)\n                {\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v1.x) | 0;\n                    faces[off + f_y1] = (pos.y + v1.y) | 0;\n                    faces[off + f_x2] = (pos.x + v2.x) | 0;\n                    faces[off + f_y2] = (pos.y + v2.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = -1;\n\n                    off += f_size;\n\n                    pos.add(v2);\n                }\n                else\n                {\n\n                    // All tris in the last row all have their edge #1 on the outer edge of the big hexagon\n                    const isOutmost = count === limit;\n\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v0.x) | 0;\n                    faces[off + f_y1] = (pos.y + v0.y) | 0;\n                    faces[off + f_x2] = (pos.x + v1.x) | 0;\n                    faces[off + f_y2] = (pos.y + v1.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = isOutmost ? 1 : -1;\n\n                    off += f_size;\n                }\n            }\n        }\n\n        numTris += 2;\n\n    } while (count++ < limit);\n\n    return faces;\n}\n\n\nfunction findOtherEdge(faces, x0, y0, x1, y1, index, out)\n{\n    for (let i = 0; i < faces.length; i += f_size)\n    {\n        if (i === index)\n        {\n            continue;\n        }\n\n        // console.log(\"find\", x0, y0, x1, y1, \":\",\n        //     faces[i + f_x0], faces[i + f_y0],\n        //     faces[i + f_x1], faces[i + f_y1],\n        //     faces[i + f_x2], faces[i + f_y2],\n        //     faces[i + f_x3], faces[i + f_y3],\n        // );\n\n        const count = faces[i + f_count];\n        if (\n            faces[i + f_x0] === x1 && faces[i + f_y0] === y1 &&\n            faces[i + f_x1] === x0 && faces[i + f_y1] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 0;\n            return;\n        }\n        if (\n            faces[i + f_x1] === x1 && faces[i + f_y1] === y1 &&\n            faces[i + f_x2] === x0 && faces[i + f_y2] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 1;\n            return;\n        }\n\n        if (count === 3)\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n        }\n        else\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x3] === x0 && faces[i + f_y3] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n\n            if (\n                faces[i + f_x3] === x1 && faces[i + f_y3] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 3;\n                return;\n            }\n\n        }\n    }\n\n    out.index = -1;\n}\n\n\nconst out = {index: -1, edge: 0};\n\n\nfunction getEdgeStack(config, faces)\n{\n    const length = config.numFaces * 3;\n    const stack = new Int32Array(length);\n\n    let pos = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const outmostEdge = faces[i + f_outmostEdge];\n\n        const targetIsOutmostFace = outmostEdge >= 0;\n        // we can't remove any of the outmost edges around the big hexagon (and we avoid having an edge triange as\n        // first merged triangle to simplify edge removal\n        if (!targetIsOutmostFace)\n        {\n            const scaled = i << 2;\n            stack[pos++] = scaled ;\n            stack[pos++] = scaled + 1;\n            stack[pos++] = scaled + 2;\n        }\n    }\n\n    // fisher-yates shuffle the stack\n    for (let i  = 0; i < pos - 2; i++)\n    {\n        const j = i + ((Math.random() * pos - i - 1)|0)\n        const tmp = stack[i];\n        stack[i] = stack[j];\n        stack[j] = tmp;\n    }\n    return stack.slice(0, pos);\n}\n\n\nfunction removeRandomEdges(config, faces)\n{\n    const count = (config.firstPassNumEdges * config.removeEdges / 100)|0;\n\n    //console.log(\"remove attempts\", count);\n\n    const stack = getEdgeStack(config, faces);\n\n    if (config.debug)\n    {\n        console.log(\"Shuffled stack\", [ ... stack.slice() ])\n    }\n\n    let stackPos = 0;\n\n\n    const eraseEdgesOfFaceInStack = index => {\n\n        for (let i = stackPos; i < stack.length; i++)\n        {\n            if ((stack[i] >>> 2) === index)\n            {\n                stack[i] = -1;\n            }\n        }\n    }\n\n\n\n    let success = 0;\n\n    // function printEdge(faces, otherIndex, outMostEdge)\n    // {\n    //     const count = faces[otherIndex + f_count];\n    //     const x0 = faces[otherIndex + outMostEdge * 2]\n    //     const y0 = faces[otherIndex + outMostEdge * 2 + 1]\n    //     const x1 = outMostEdge === count -1 ? faces[otherIndex] : faces[otherIndex + (outMostEdge + 1) * 2]\n    //     const y1 = outMostEdge === count -1 ? faces[otherIndex + 1] : faces[otherIndex + (outMostEdge + 1) * 2 + 1]\n    //\n    //\n    //     return x0 + \",\" + y0 + \",\" + x1 + \",\" + y1;\n    // }\n\n    for (let i = 0; i < count; i++)\n    {\n        let code;\n        do\n        {\n            if (stackPos === stack.length)\n            {\n                if (config.debug)\n                {\n                    config.debug && console.log(\"Ran out of removal candidates after successfully removing\", success, \"out of\", count);\n                }\n                // no more valid removals\n                return;\n            }\n            code = stack[stackPos++];\n        } while (code === -1);\n\n\n        const index = code >> 2;\n        const edge = code & 3;\n\n        const x0 = faces[index + edge * 2];\n        const y0 = faces[index + edge * 2 + 1];\n        const x1 = edge === 2 ? faces[index + f_x0] : faces[index + (edge + 1) * 2];\n        const y1 = edge === 2 ? faces[index + f_y0] : faces[index + (edge + 1) * 2 + 1];\n\n        findOtherEdge(faces, x0, y0, x1, y1, index, out)\n        if (out.index >= 0 && faces[out.index + f_count] === 3)\n        {\n            const {index: otherIndex, edge: otherEdge} = out;\n            const x2 = edge === 0 ? faces[index + f_x2] : faces[index + (edge - 1) * 2];\n            const y2 = edge === 0 ? faces[index + f_y2] : faces[index + (edge - 1) * 2 + 1];\n\n            // check if we're merging with an outmost face\n            const outMostEdge = faces[otherIndex + 9];\n            const otherIsOutmostTri = outMostEdge >= 0;\n\n            //const before = printEdge(faces, otherIndex, outMostEdge)\n            // if (otherIsOutmostTri)\n            // {\n            //     console.log(\"OUTMOST edge before split\", printEdge(faces, otherIndex, outMostEdge),\"EDGE CASE\", otherEdge, \"outMostEdge\", outMostEdge)\n            //     console.log(\"face before\", faces.slice(otherIndex, otherIndex + f_size))\n            // }\n\n            faces[otherIndex + 8] = 4;\n            switch (otherEdge)\n            {\n                case 2:\n                    faces[otherIndex + f_x3] = x2;\n                    faces[otherIndex + f_y3] = y2;\n                    break;\n                case 1:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = x2;\n                    faces[otherIndex + f_y2] = y2;\n                    break;\n                case 0:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = faces[otherIndex + f_x1];\n                    faces[otherIndex + f_y2] = faces[otherIndex + f_y1];\n                    faces[otherIndex + f_x1] = x2\n                    faces[otherIndex + f_y1] = y2;\n\n                    if (otherIsOutmostTri)\n                    {\n                        faces[otherIndex + f_outmostEdge] = 2;\n                    }\n\n                    break;\n\n            }\n            eraseEdgesOfFaceInStack(otherIndex)\n\n            // remove our face\n            faces[index + f_count] = 0;\n\n            success++;\n        }\n        eraseEdgesOfFaceInStack(index)\n\n    }\n\n    config.debug && console.log(\"Successfully removed\", success, \"out of\", count);\n\n    return success;\n}\n\n\nfunction calculateNumNodes(config, faces)\n{\n    let tris = 0;\n    let quads = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        if (count === 3)\n        {\n            tris++;\n        }\n        else if (count === 4)\n        {\n            quads++;\n        }\n    }\n\n    //console.log({quads,tris})\n\n    // we divide each quad in 9 nodes and each tri into 7 nodes\n    return quads * 9 + tris * 7;\n}\n\n\n\nfunction connectTiles(config, tiles)\n{\n    const { length } = tiles;\n\n    for (let i=0; i < length; i += t_size)\n    {\n        let numConnections = 0;\n        for (let j = 0; j < 4; j++)\n        {\n            const n0 = tiles[i + t_n0 + j];\n            const n1 = j === 3 ? tiles[i + t_n0 ] : tiles[i + t_n0 + j + 1];\n\n            let otherIndex = -1;\n            for (let k=0; k < tiles.length; k += t_size)\n            {\n                if (k === i)\n                {\n                    continue;\n                }\n\n                const otherNode0 = tiles[k + t_n0];\n                const otherNode1 = tiles[k + t_n1];\n                const otherNode2 = tiles[k + t_n2];\n                const otherNode3 = tiles[k + t_n3];\n\n                // tile edges are all defined in clockwise order, the opposite edge must necessarily walk the two nodes in\n                // the opposite direction\n\n                if (\n                    otherNode1 === n0 && otherNode0 === n1 ||\n                    otherNode2 === n0 && otherNode1 === n1 ||\n                    otherNode3 === n0 && otherNode2 === n1 ||\n                    otherNode0 === n0 && otherNode3 === n1\n                )\n                {\n\n                    otherIndex = k;\n                    numConnections++;\n                    break;\n                }\n            }\n\n            tiles[i + t_tile0 + j] = otherIndex;\n        }\n        tiles[i + t_isEdge] = numConnections === 4 ? 0 : 1;\n    }\n\n    config.debug && console.log(\"TILE GRAPH\", tiles);\n}\n\n\nfunction subdivide(config, faces)\n{\n    const { firstPassLen } = config;\n\n    const numNodes = calculateNumNodes(config, faces);\n\n    const nodes = new Float64Array(numNodes * g_size);\n\n\n    const tiles = new Int32Array(((numNodes / 2)|0) * t_size);\n\n    let pos = 0;\n    let tilePos = 0;\n\n    const insertNode = (x0, y0, isEdge) => {\n\n        x0 |= 0;\n        y0 |= 0;\n\n        for (let i = 0; i < pos; i += g_size)\n        {\n            if (Math.abs(nodes[i] - x0) < 4 && Math.abs(nodes[i + 1] - y0) < 4)\n            {\n                // if we discover an odd face vertex touching the outmost edge, we will\n                // not register that because the odd tris are not marked as having an outmost edge, because they don't, they\n                // only have one vertex on the edge at most\n                // Later we might however return to that node within an outmost edge and we have to make sure that\n                // we take over the isEdge status from such a node\n                if (isEdge && !nodes[i + 2])\n                {\n                    nodes[i + 2] = 1;\n                }\n\n                return i;\n            }\n        }\n\n        const index = pos;\n\n        nodes[pos + g_x] = x0;\n        nodes[pos + g_y] = y0;\n        nodes[pos + g_isEdge] = isEdge ? 1 : 0;\n        nodes[pos + g_count] = 0;\n\n        pos += g_size;\n\n        return index;\n    }\n\n    const addTile = ((n0,n1,n2,n3) => {\n\n        //console.log(\"addTile\", n0, n1, n2, n3, tilePos)\n\n        tiles[tilePos + t_n0] = n0;\n        tiles[tilePos + t_n1] = n1;\n        tiles[tilePos + t_n2] = n2;\n        tiles[tilePos + t_n3] = n3;\n\n        tilePos += t_size;\n    });\n\n    const insertEdge = (n0, n1) => {\n        let count = nodes[n0 + g_count];\n\n        let found = false;\n        for (let i = 0; i < count; i++)\n        {\n            const other = nodes[n0 + g_edge0 + i];\n            if (other === n1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            if (count >= 6)\n            {\n                throw new Error(\"At most 6 edges per node\")\n            }\n\n            nodes[n0 + g_edge0 + count++] = n1;\n            nodes[n0 + g_count] = count;\n        }\n\n    }\n    const connect = (n0, n1) => {\n\n        insertEdge(n0, n1);\n        insertEdge(n1, n0);\n\n    }\n\n    for (let i = 0; i < firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        const x0 = faces[i + f_x0]\n        const y0 = faces[i + f_y0]\n        const x1 = faces[i + f_x1]\n        const y1 = faces[i + f_y1]\n        const x2 = faces[i + f_x2]\n        const y2 = faces[i + f_y2]\n\n        const outmostEdge = faces[i + f_outmostEdge ];\n\n        const firstEdgeIsOutmost = outmostEdge === 1;\n        const secondEdgeIsOutmost = outmostEdge === 2;\n\n        if (count === 3)\n        {\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x0) / 2;\n            const m2y = (y2 + y0) / 2;\n\n            const cx = (x0 + x1 + x2) / 3\n            const cy = (y0 + y1 + y2) / 3\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y);\n            const n6 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n6);\n            connect(n6, n5);\n            connect(n5, n0);\n\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n6);\n            connect(n6, n1);\n\n            connect(n5, n6);\n            connect(n6, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n\n            addTile(n0,n1,n6,n5);\n            addTile(n1,n2,n3,n6);\n            addTile(n5,n6,n3,n4);\n\n        }\n        else if (count === 4)\n        {\n            const x3 = faces[i + f_x3]\n            const y3 = faces[i + f_y3]\n\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x3) / 2;\n            const m2y = (y2 + y3) / 2;\n            const m3x = (x3 + x0) / 2;\n            const m3y = (y3 + y0) / 2;\n\n            const cx = (x0 + x1 + x2 + x3) / 4\n            const cy = (y0 + y1 + y2 + y3) / 4\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost || secondEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y, secondEdgeIsOutmost);\n            const n6 = insertNode(x3, y3, secondEdgeIsOutmost);\n            const n7 = insertNode(m3x, m3y);\n            const n8 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n            connect(n5, n6);\n            connect(n6, n7);\n            connect(n7, n0);\n\n            connect(n8, n3);\n            connect(n8, n5);\n            connect(n8, n7);\n            connect(n8, n1);\n\n            addTile(n0,n1,n8,n7);\n            addTile(n1,n2,n3,n8);\n            addTile(n8,n3,n4,n5);\n            addTile(n7,n8,n5,n6);\n        }\n    }\n\n    //const fillRate = (pos / g_size) / numNodes;\n    //console.log(\"SUBDIVIDED: limit = \", numNodes, \", fill rate = \", fillRate);\n\n    console.log(\"TILES: buffer = \", tiles.length, \", used = \" + tilePos)\n\n    const newTiles = tiles.slice(0, tilePos);\n\n    connectTiles(config, newTiles);\n\n    return [nodes.slice(0, pos), newTiles];\n}\n\n\nfunction relaxWeighted(config, graph, maxIterations = 1)\n{\n\n    const {length} = graph;\n\n    for (let i = 0; i < maxIterations; i++)\n    {\n        let tension = 0;\n        for (let j = 0; j < length; j += g_size)\n        {\n            if (!graph[j + g_isEdge])\n            {\n                const x0 = graph[j + g_x]\n                const y0 = graph[j + g_y]\n                const edgeCount = graph[j + g_count]\n\n                let centerX = 0;\n                let centerY = 0;\n                let sumWeight = 0;\n\n                for (let k = 0; k < edgeCount; k++)\n                {\n                    const other = graph[j + 4 + k];\n\n                    const x1 = graph[other];\n                    const y1 = graph[other + 1];\n\n                    const weight = config.weightFunction(x0, y0, x1, y1);\n\n                    centerX += x1 * weight;\n                    centerY += y1 * weight;\n                    sumWeight += weight;\n                }\n\n                const x1 = centerX / sumWeight\n                const y1 = centerY / sumWeight;\n\n                const dx = x1 - x0;\n                const dy = y1 - y0;\n\n                graph[j + g_x] = x1;\n                graph[j + g_y] = y1;\n\n                tension += dx * dx + dy * dy;\n\n            }\n        }\n\n        if (tension < config.minTension)\n        {\n            config.debug && console.log(\"Reached minimal tension\", config.minTension, \"after\", config.relaxCount, \"iterations\")\n            return true;\n        }\n        config.relaxCount++;\n    }\n\n    if (!config.animatedEasing)\n    {\n        config.debug && console.log(\"Stopping after max iterations = \" + config.maxIterations)\n    }\n\n    return false;\n}\n\n\n/**\n * A hexagon filled with quads forming organic shapes.\n */\nclass OrganicQuads {\n    constructor(cfg)\n    {\n\n        const config = {\n            ...DEFAULT_CONFIG,\n            ...cfg\n        }\n\n        updateConfig(config)\n\n        this.config = config;\n\n        const faces = createHexagonTriangles(config);\n\n        if (config.renderFirstPassEdges)\n        {\n            this.faces = config.renderFirstPassEdges !== \"merged\" ? faces.slice() : faces;\n        }\n\n        const start = config.debug && now();\n\n        removeRandomEdges(config, faces)\n\n        config.debug && console.log(\"Edge removal in \" , now() - start, \"ms\")\n\n        const [graph, tiles] = subdivide(config, faces);\n        this.tiles = tiles;\n\n        if (!config.animating)\n        {\n            relaxWeighted(config, graph, config.maxIterations);\n        }\n        //console.log(\"GRAPH f_size\", graph.length / g_size, graph);\n        this.graph = graph;\n\n    }\n\n\n    render = ctx =>\n    {\n        const { config, graph, faces } = this;\n\n\n        ctx.save();\n\n        const hw = config.width / 2;\n        const hh = config.height / 2;\n\n        ctx.translate(hw, hh)\n\n        const {length} = graph;\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(-hw, -hh, config.width, config.height)\n\n        if (config.renderFirstPassEdges)\n        {\n\n            // draw original quads and tris\n\n            ctx.strokeStyle = \"#f00\";\n            ctx.lineWidth = 1;\n\n\n            let outerCount = 0;\n            for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n            {\n                const count = faces[pos + f_count];\n\n                if (count >= 3)\n                {\n\n                    ctx.beginPath();\n                    ctx.moveTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n\n                    for (let i = 1; i < count; i++)\n                    {\n                        ctx.lineTo(faces[pos + i*2],faces[pos +  i*2 + 1]);\n                    }\n\n                    ctx.closePath();\n                    ctx.stroke();\n\n                    const outmostEdge = faces[pos + f_outmostEdge];\n                    if (outmostEdge >= 0)\n                    {\n                        ctx.strokeStyle = \"#fe0\";\n                        ctx.beginPath();\n                        ctx.moveTo(faces[pos + outmostEdge * 2  ],faces[pos + outmostEdge * 2 + 1]);\n\n                        if (outmostEdge === count - 1)\n                        {\n                            ctx.lineTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n                        }\n                        else\n                        {\n                            ctx.lineTo(faces[pos + (outmostEdge + 1 ) * 2  ],faces[pos + (outmostEdge + 1 ) * 2 + 1]);\n                        }\n                        ctx.stroke();\n                        ctx.strokeStyle = \"#f00\";\n\n                        outerCount++;\n\n                    }\n\n                }\n            }\n            //    console.log(\"Number of outer edges\", outerCount)\n\n            //console.log(\"DRAW EDGES\")\n        }\n\n        // ctx.strokeStyle = \"#fff\";\n        // ctx.lineWidth = 1;\n        //\n        //\n        // function drawEdge(x0, y0, node)\n        // {\n        //     const x1 = graph[node + g_x];\n        //     const y1 = graph[node + g_y];\n        //\n        //     ctx.beginPath();\n        //     ctx.moveTo(x0, y0);\n        //     ctx.lineTo(x1, y1);\n        //     ctx.stroke();\n        // }\n        //\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const edgeCount = graph[i + g_count];\n        //\n        //     for (let j = 0; j < edgeCount; j++)\n        //     {\n        //         drawEdge(x0, y0, graph[i + g_edge0 + j])\n        //     }\n        // }\n\n        //ctx.fillStyle = \"#f0f\";\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const isEdge = graph[i + g_isEdge];\n        //\n        //     if (isEdge)\n        //     {\n        //         ctx.fillRect(x0 - 4,  y0 - 4, 8, 8)\n        //     }\n        // }\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 4;\n        //\n        // for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n        // {\n        //     const count = faces[pos + f_count];\n        //     const outmostEdge = faces[pos + f_outmostEdge];\n        //\n        //\n        //     const last = count - 1;\n        //     for (let i=0; i < count; i++)\n        //     {\n        //         if (i === outmostEdge)\n        //         {\n        //             ctx.strokeStyle = \"rgba(255,0,0,0.5)\";\n        //         }\n        //         else\n        //         {\n        //             ctx.strokeStyle = \"rgba(0,255,0,0.5)\";\n        //         }\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos + i * 2], faces[pos + i * 2 + 1]);\n        //         ctx.lineTo(\n        //             i === last ? faces[pos + f_x0 ] : faces[pos + (i+1) * 2],\n        //             i === last ? faces[pos + f_y0 ] : faces[pos + (i+1) * 2 + 1]\n        //         );\n        //         ctx.stroke();\n        //     }\n        // }\n\n        ctx.restore();\n\n        if (config.animating)\n        {\n            if (relaxWeighted(config, graph))\n            {\n                config.animating = false;\n            }\n            //            raf(redrawGraph)\n        }\n    }\n}\n\n\nexport {  Vector }\n\nexport default OrganicQuads\n","import domready from \"domready\"\nimport raf from \"raf\"\n// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport { Vector } from \"@fforw/organic-quads\";\n\n\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst TAU = Math.PI * 2;\n\nconst config = {\n    width: 0,\n    height: 0\n};\n\nlet ctx, canvas;\n\n\nlet mouseX = 0;\nlet mouseY = 0;\n\nlet pos;\nlet vX1;\nlet vX2;\nlet vY1;\n\n/**\n * Basic 2D visualization of our 3D quad projection.\n *\n * Projects the mouse cursor relative to the blue quad onto the red squad and draws a green dot.\n *\n */\ndomready(\n    () => {\n\n        const container = document.getElementById(\"container\");\n\n        canvas = document.createElement(\"canvas\");\n        container.appendChild(canvas);\n\n        ctx = canvas.getContext(\"2d\");\n\n        const width = (window.innerWidth) | 0;\n        const height = (window.innerHeight) | 0;\n\n\n\n        config.width = width;\n        config.height = height;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const hw = width / 2;\n        const hh = height / 2;\n\n        const boxSize = Math.min(width, height) / 2;\n\n        const bx = width/4;\n        const by = -boxSize/2;\n\n        ctx.translate(width/3, hh)\n\n        let vertices;\n\n        const randomQuad = () => {\n            vertices = [];\n            for (let i=0; i < TAU; i += TAU/4)\n            {\n                const angle = i - TAU/16 + Math.random() * TAU/8;\n                const dist = hh / PHI - hh/16 + Math.random() * hh / 8;\n\n                // start at the bottom, clockwise order\n                const x = -Math.sin(angle) * dist;\n                const y = Math.cos(angle) * dist;\n                vertices.push(x, y);\n            }\n\n            pos = new Vector(vertices[0],  vertices[1]);\n            vX1 = new Vector(vertices[6] - vertices[0], vertices[7] - vertices[1]);\n            vX2 = new Vector(vertices[4] - vertices[2], vertices[5] - vertices[3]);\n            vY1 = new Vector(vertices[2] - vertices[0], vertices[3] - vertices[1]);\n\n        }\n\n\n        function clear()\n        {\n            ctx.fillStyle = \"#000\";\n            ctx.fillRect(-hw, -hh, width, height);\n        }\n\n\n        function renderQuads()\n        {\n\n            ctx.strokeStyle = \"#f00\";\n            ctx.beginPath();\n\n            const {length} = vertices\n\n            ctx.moveTo(vertices[length - 2], vertices[length - 1]);\n            for (let i = 0; i < length; i += 2)\n            {\n                ctx.lineTo(vertices[i], vertices[i + 1]);\n            }\n            ctx.stroke();\n\n            ctx.strokeStyle = \"#46f\";\n            ctx.beginPath();\n            ctx.moveTo(bx, by);\n            ctx.lineTo(bx + boxSize, by);\n            ctx.lineTo(bx + boxSize, by + boxSize);\n            ctx.lineTo(bx, by + boxSize);\n            ctx.lineTo(bx, by);\n\n            ctx.moveTo(bx, by);\n            ctx.lineTo(bx + boxSize, by + boxSize);\n\n            ctx.moveTo(bx, by + boxSize);\n            ctx.lineTo(bx + boxSize, by);\n\n            ctx.stroke();\n\n            ctx.strokeStyle = \"#F00\";\n            {\n                ctx.beginPath();\n                const p = interpolate(0,0);\n                ctx.moveTo(p.x,p.y)\n                for (let x = 0.1; x < 1; x += 0.1)\n                {\n                    const p = interpolate(x,x);\n\n                    ctx.lineTo(p.x, p.y);\n                }\n\n                ctx.stroke();\n            }\n            {\n                ctx.beginPath();\n                const p = interpolate(0,1);\n                ctx.moveTo(p.x,p.y)\n                for (let x = 0.1; x < 1; x += 0.1)\n                {\n                    const p = interpolate(x,1 - x);\n                    ctx.lineTo(p.x, p.y);\n                }\n                ctx.stroke();\n            }\n\n        }\n\n\n        function interpolate(x, y)\n        {\n            const vAxisStart = vX1.copy().scale(x).add(pos);\n            const vAxisEnd = vX2.copy().scale(x).add(pos).add(vY1);\n\n            return vAxisEnd.subtract(vAxisStart).scale(y).add(vAxisStart);\n        }\n\n        const mainLoop = () =>{\n\n            clear();\n            renderQuads();\n\n            const transformed = interpolate(mouseX, mouseY);\n\n            //console.log((mouseX - width/3 - 300)/boxSize, (100 - (mouseY - hh))/boxSize, \"=>\", transformed.x, transformed.y);\n\n            ctx.fillStyle = \"#0f0\";\n            ctx.fillRect(transformed.x - 2, transformed.y - 2, 4, 4);\n\n            raf(mainLoop)\n\n        }\n\n        randomQuad();\n\n        const updateCoords = ev =>{\n\n            const rect = canvas.getBoundingClientRect();\n\n            let x,y;\n            if (ev.touches)\n            {\n                x = ev.touches[0].clientX - rect.left;\n                y = ev.touches[0].clientY - rect.top;\n            }\n            else\n            {\n                x = ev.clientX - rect.left;\n                y = ev.clientY - rect.top;\n            }\n\n\n            // if the mouse is within the blue box, it's position goes from 0,0 to 1,1\n            mouseX = (x - width/3 - bx)/boxSize;\n            mouseY = (boxSize/2 - (y - hh))/boxSize;\n\n        };\n\n        canvas.addEventListener(\"click\", randomQuad, true);\n        canvas.addEventListener(\"mousemove\", updateCoords, true)\n        canvas.addEventListener(\"touchmove\", updateCoords, true)\n\n        raf(mainLoop)\n    }\n);\n\n","const sqrt = Math.sqrt;\n\nclass Vector\n{\n    constructor(x,y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns a copy of this vector.\n     *\n     * @returns {Vector} copy\n     */\n    copy()\n    {\n        return new Vector(this.x,this.y);\n    }\n\n    /**\n     * Adds to this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n\n    add(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x += x;\n            this.y += y;\n        }\n        else\n        {\n            this.x += x.x;\n            this.y += x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Subtracts from this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    subtract(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x -= x;\n            this.y -= y;\n        }\n        else\n        {\n            this.x -= x.x;\n            this.y -= x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by a planar number.\n     *\n     * @param n     scale\n     * @returns {Vector} this vector, scaled\n     */\n    scale(n)\n    {\n        this.x *= n;\n        this.y *= n;\n\n        return this;\n    }\n\n    /**\n     * Length of this vector\n     *\n     * @returns {number}    length\n     */\n    length()\n    {\n        const { x, y } = this;\n        return sqrt(x*x+y*y);\n    }\n\n    /**\n     * Scales the vector to normal length or a specified length\n     *\n     * @param targetLength      {number?} target length of the vector (default is 1, the normal vector length)\n     *\n     * @returns {Vector}\n     */\n    norm(targetLength = 1)\n    {\n        return this.scale(targetLength / this.length());\n    }\n\n    /**\n     * Rotate vector 90 degrees clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateClockwise()\n    {\n        const { x, y } = this;\n\n        //noinspection JSSuspiciousNameCombination\n        this.x = y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate vector 90 degrees counter clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateCounterClockwise()\n    {\n        const { x, y } = this;\n\n        this.x = -y;\n        //noinspection JSSuspiciousNameCombination\n        this.y = x;\n\n        return this;\n    }\n\n    /**\n     * Sets the coordinates of this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    set(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x = x;\n            this.y = y;\n        }\n        else\n        {\n            this.x = x.x;\n            this.y = x.y;\n        }\n\n    }\n}\n\nexport default Vector;\n"],"sourceRoot":""}