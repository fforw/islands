{"version":3,"sources":["webpack://App/webpack/bootstrap","webpack://App/../src/index.js","webpack://App/./src/util/dump.js","webpack://App/../src/vector.js","webpack://App/./src/constants.js","webpack://App/./src/instancing/toIndexed.js","webpack://App/./src/instancing/InstancedMeshSet.js","webpack://App/./src/test-morph.js","webpack://App/./src/util/loadScene.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","5","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","SIXTH","Math","DEFAULT_CONFIG","width","height","numberOfRings","removeEdges","animatedEasing","renderFirstPassEdges","debug","weightFunction","dx","x1","dy","y1","edgeLength","maxIterations","animating","minTension","findOtherEdge","faces","x0","y0","index","out","count","edge","removeRandomEdges","config","stack","Int32Array","pos","scaled","tmp","getEdgeStack","console","stackPos","eraseEdgesOfFaceInStack","success","code","otherIndex","otherEdge","x2","y2","otherIsOutmostTri","subdivide","firstPassLen","numNodes","tris","quads","calculateNumNodes","nodes","Float64Array","tiles","tilePos","insertNode","isEdge","addTile","n0","insertEdge","n1","found","Error","connect","outmostEdge","firstEdgeIsOutmost","secondEdgeIsOutmost","m0x","m0y","m1x","m1y","m2x","m2y","cx","cy","n2","n3","n4","n5","n6","x3","y3","m3x","m3y","n7","n8","newTiles","numConnections","k","otherNode0","otherNode1","otherNode2","otherNode3","connectTiles","relaxWeighted","graph","tension","edgeCount","centerX","centerY","sumWeight","other","weight","ctx","hw","hh","limit","updateConfig","this","DIRECTIONS","Vector","off","numTris","v0","v1","v2","isOutmost","createHexagonTriangles","start","dump","obj","level","type","log","nextLevel","children","sqrt","x","y","targetLength","scale","WATER","SAND","GRASS","FOREST","STONE","ICE","DIRT","UNDEFINED","MATERIAL_NAMES","CASE_NAMES","TAU","PI","PHI","_src","attributesKeys","morphKeys","list","vertices","prec","precHalf","floor","array","offset","Float32Array","Float16Array","createAttribute","src_attribute","dst_attribute","BufferAttribute","constructor","itemSize","dst_array","src_array","hashAttribute","attribute","store","id","attributes","morphAttributes","undefined","storeFast","z","v","DEFAULT_OPTIONS","objects","attributeDefs","defaultCount","maxInstances","Object3D","attr1","normalized","attr3","InstancedMeshSet","gltf","opts","nameLookup","Map","instances","calculateMaxInstances","importGeometries","instanceSize","maxGeomsPerInstance","Uint32Array","meshes","createMeshes","scene","find","kid","set","filter","JSON","stringify","numGeoms","Array","inputMeshes","instancedMesh","createInstancedMesh","inputMesh","geometry","InstancedBufferGeometry","BufferGeometry","copy","forEach","a","stride","buffer","InterleavedBuffer","setAttribute","InterleavedBufferAttribute","InstancedMesh","material","clone","container","camera","renderer","light","controls","materials","tilesMesh","standardTileMaterial","selectedTileMaterial","organicQuads","tilesGLTF","raycaster","Raycaster","cubeCamera","sky","meshSet","skyParameters","updateSun","theta","phi","position","cos","sin","uniforms","update","init","OrganicQuads","graphUserData","document","getElementById","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","outputEncoding","sRGBEncoding","appendChild","domElement","Scene","PerspectiveCamera","DirectionalLight","add","CubeCamera","background","renderTarget","waterGeometry","PlaneBufferGeometry","Mesh","rotation","Sky","texture","OrbitControls","maxPolarAngle","target","minDistance","maxDistance","enableDamping","dampingFactor","addEventListener","onWindowResize","Group","MeshStandardMaterial","depthTest","side","DoubleSide","color","roughness","transparent","opacity","t_size","normals","t_n0","t_n1","t_n2","t_n3","ox0","g_x","oz0","g_y","ox1","oz1","ox2","oz2","ox3","oz3","mx","mz","z0","z1","z2","z3","ax","az","bx","bz","cz","nx","ny","nz","f","Float32BufferAttribute","mesh","drawTiles","aspect","updateProjectionMatrix","currentTile","tStart","mouse","Vector2","onDocumentMouseMove","event","preventDefault","clientX","clientY","Promise","all","loadScene","then","_tiles","ground","perfNow","map","end","setFromCamera","mainLoop","intersects","intersectObjects","performance","now","render","raf","loader","GLTFLoader","url","onProgress","resolve","reject","load"],"mappings":"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","file":"bundle-morph-dfb5581cc51d13541c51.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t5: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpApp\"] = window[\"webpackJsonpApp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([47,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import now from \"performance-now\"\nimport Vector from \"./vector\";\n\nexport const f_x0 = 0;\nexport const f_y0 = 1;\nexport const f_x1 = 2;\nexport const f_y1 = 3;\nexport const f_x2 = 4;\nexport const f_y2 = 5;\nexport const f_x3 = 6;\nexport const f_y3 = 7;\nexport const f_count = 8;\nexport const f_outmostEdge = 9;\nexport const f_size = 10;\n\nexport const g_x = 0;\nexport const g_y = 1;\nexport const g_isEdge = 2;\nexport const g_count = 3;\nexport const g_edge0 = 4;\nexport const g_edge1 = 5;\nexport const g_edge2 = 6;\nexport const g_edge3 = 7;\nexport const g_edge4 = 8;\nexport const g_edge5 = 9;\nexport const g_size = 10;\n\n\nexport const t_n0 = 0;\nexport const t_n1 = 1;\nexport const t_n2 = 2;\nexport const t_n3 = 3;\nexport const t_isEdge = 4;\nexport const t_tile0 = 5;\nexport const t_tile1 = 6;\nexport const t_tile2 = 7;\nexport const t_tile3 = 8;\nexport const t_size = 9;\n\nconst TAU = Math.PI * 2;\n\nconst SIXTH = TAU / 6;\n\nfunction calculateNumberOfFaces(limit)\n{\n    return 6 * (limit + 1) * (limit + 1);\n}\n\n\nconst DEFAULT_CONFIG = {\n    /** coordinate width */\n    width: 0,\n    /** coordinate height */\n    height: 0,\n    /** number of rings in the hexagon / number of base intersections of hexaxgon */\n    numberOfRings: 5,\n    /** how many percent of the edges shall we attempt to remove? */\n    removeEdges: 50,\n\n    /** if true, the graph will be layouted a bit with every render. If false, the graph relaxation happens at creation */\n    animatedEasing: true,\n\n    /** Set to true to render the original triangles, set to \"merged\" to render the merged triangles before subdivision */\n    renderFirstPassEdges: false,\n\n     /** Set to true to enable some debug logging */\n    debug : false,\n\n    weightFunction : (x0,y0,x1,y1) => {\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n        return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /// MOSTLY INTERNAL CONFIG ////\n    \n    // calculated internally to match the height\n    edgeLength: 80,\n    // number of iterations until we give up (we will drop out due to having reached low energy most likely much sooner)\n    maxIterations: 100,\n    // set to false if the graph is done animated on animatedEasing : true\n    animating: true,\n\n    // Minimum energy at which we stop relaxing the graph\n    minTension: 2\n};\n\nfunction updateConfig(config)\n{\n    config.numFaces = calculateNumberOfFaces(config.numberOfRings)\n    config.firstPassLen = config.numFaces * f_size\n    config.firstPassNumEdges = config.numFaces * 3\n    config.edgeLength = ( Math.min(config.width, config.height) / (config.numberOfRings * 2 + 2)) | 0;\n    config.animating = config.animatedEasing;\n    config.relaxCount = 0;\n}\n\n\nfunction createHexagonTriangles(config)\n{\n\n    const limit = config.numberOfRings;\n\n    //console.log(\"createHexagonTriangles\", limit);\n\n    const DIRECTIONS = [\n        new Vector(\n            Math.cos(0) * config.edgeLength,\n            Math.sin(0) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH) * config.edgeLength,\n            Math.sin(SIXTH) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 2) * config.edgeLength,\n            Math.sin(SIXTH * 2) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 3) * config.edgeLength,\n            Math.sin(SIXTH * 3) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 4) * config.edgeLength,\n            Math.sin(SIXTH * 4) * config.edgeLength\n        ),\n        new Vector(\n            Math.cos(SIXTH * 5) * config.edgeLength,\n            Math.sin(SIXTH * 5) * config.edgeLength\n        )\n    ];\n\n    const faces = new Float64Array(config.firstPassLen);\n\n    let off = 0;\n\n    let count = 0;\n    let numTris = 1;\n    do\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            const v0 = DIRECTIONS[i];\n            const v1 = DIRECTIONS[(i + 1) % 6];\n            const v2 = DIRECTIONS[(i + 2) % 6];\n\n            let pos = v0.copy().scale(count);\n\n            for (let j = 0; j < numTris; j++)\n            {\n                if (j & 1)\n                {\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v1.x) | 0;\n                    faces[off + f_y1] = (pos.y + v1.y) | 0;\n                    faces[off + f_x2] = (pos.x + v2.x) | 0;\n                    faces[off + f_y2] = (pos.y + v2.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = -1;\n\n                    off += f_size;\n\n                    pos.add(v2);\n                }\n                else\n                {\n\n                    // All tris in the last row all have their edge #1 on the outer edge of the big hexagon\n                    const isOutmost = count === limit;\n\n                    faces[off + f_x0] = (pos.x) | 0;\n                    faces[off + f_y0] = (pos.y) | 0;\n                    faces[off + f_x1] = (pos.x + v0.x) | 0;\n                    faces[off + f_y1] = (pos.y + v0.y) | 0;\n                    faces[off + f_x2] = (pos.x + v1.x) | 0;\n                    faces[off + f_y2] = (pos.y + v1.y) | 0;\n                    faces[off + f_count] = 3;\n                    faces[off + f_outmostEdge] = isOutmost ? 1 : -1;\n\n                    off += f_size;\n                }\n            }\n        }\n\n        numTris += 2;\n\n    } while (count++ < limit);\n\n    return faces;\n}\n\n\nfunction findOtherEdge(faces, x0, y0, x1, y1, index, out)\n{\n    for (let i = 0; i < faces.length; i += f_size)\n    {\n        if (i === index)\n        {\n            continue;\n        }\n\n        // console.log(\"find\", x0, y0, x1, y1, \":\",\n        //     faces[i + f_x0], faces[i + f_y0],\n        //     faces[i + f_x1], faces[i + f_y1],\n        //     faces[i + f_x2], faces[i + f_y2],\n        //     faces[i + f_x3], faces[i + f_y3],\n        // );\n\n        const count = faces[i + f_count];\n        if (\n            faces[i + f_x0] === x1 && faces[i + f_y0] === y1 &&\n            faces[i + f_x1] === x0 && faces[i + f_y1] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 0;\n            return;\n        }\n        if (\n            faces[i + f_x1] === x1 && faces[i + f_y1] === y1 &&\n            faces[i + f_x2] === x0 && faces[i + f_y2] === y0\n        )\n        {\n            out.index = i;\n            out.edge = 1;\n            return;\n        }\n\n        if (count === 3)\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n        }\n        else\n        {\n            if (\n                faces[i + f_x2] === x1 && faces[i + f_y2] === y1 &&\n                faces[i + f_x3] === x0 && faces[i + f_y3] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 2;\n                return;\n            }\n\n            if (\n                faces[i + f_x3] === x1 && faces[i + f_y3] === y1 &&\n                faces[i + f_x0] === x0 && faces[i + f_y0] === y0\n            )\n            {\n                out.index = i;\n                out.edge = 3;\n                return;\n            }\n\n        }\n    }\n\n    out.index = -1;\n}\n\n\nconst out = {index: -1, edge: 0};\n\n\nfunction getEdgeStack(config, faces)\n{\n    const length = config.numFaces * 3;\n    const stack = new Int32Array(length);\n\n    let pos = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const outmostEdge = faces[i + f_outmostEdge];\n\n        const targetIsOutmostFace = outmostEdge >= 0;\n        // we can't remove any of the outmost edges around the big hexagon (and we avoid having an edge triange as\n        // first merged triangle to simplify edge removal\n        if (!targetIsOutmostFace)\n        {\n            const scaled = i << 2;\n            stack[pos++] = scaled ;\n            stack[pos++] = scaled + 1;\n            stack[pos++] = scaled + 2;\n        }\n    }\n\n    // fisher-yates shuffle the stack\n    for (let i  = 0; i < pos - 2; i++)\n    {\n        const j = i + ((Math.random() * pos - i - 1)|0)\n        const tmp = stack[i];\n        stack[i] = stack[j];\n        stack[j] = tmp;\n    }\n    return stack.slice(0, pos);\n}\n\n\nfunction removeRandomEdges(config, faces)\n{\n    const count = (config.firstPassNumEdges * config.removeEdges / 100)|0;\n\n    //console.log(\"remove attempts\", count);\n\n    const stack = getEdgeStack(config, faces);\n\n    if (config.debug)\n    {\n        console.log(\"Shuffled stack\", [ ... stack.slice() ])\n    }\n\n    let stackPos = 0;\n\n\n    const eraseEdgesOfFaceInStack = index => {\n\n        for (let i = stackPos; i < stack.length; i++)\n        {\n            if ((stack[i] >>> 2) === index)\n            {\n                stack[i] = -1;\n            }\n        }\n    }\n\n\n\n    let success = 0;\n\n    // function printEdge(faces, otherIndex, outMostEdge)\n    // {\n    //     const count = faces[otherIndex + f_count];\n    //     const x0 = faces[otherIndex + outMostEdge * 2]\n    //     const y0 = faces[otherIndex + outMostEdge * 2 + 1]\n    //     const x1 = outMostEdge === count -1 ? faces[otherIndex] : faces[otherIndex + (outMostEdge + 1) * 2]\n    //     const y1 = outMostEdge === count -1 ? faces[otherIndex + 1] : faces[otherIndex + (outMostEdge + 1) * 2 + 1]\n    //\n    //\n    //     return x0 + \",\" + y0 + \",\" + x1 + \",\" + y1;\n    // }\n\n    for (let i = 0; i < count; i++)\n    {\n        let code;\n        do\n        {\n            if (stackPos === stack.length)\n            {\n                if (config.debug)\n                {\n                    config.debug && console.log(\"Ran out of removal candidates after successfully removing\", success, \"out of\", count);\n                }\n                // no more valid removals\n                return;\n            }\n            code = stack[stackPos++];\n        } while (code === -1);\n\n\n        const index = code >> 2;\n        const edge = code & 3;\n\n        const x0 = faces[index + edge * 2];\n        const y0 = faces[index + edge * 2 + 1];\n        const x1 = edge === 2 ? faces[index + f_x0] : faces[index + (edge + 1) * 2];\n        const y1 = edge === 2 ? faces[index + f_y0] : faces[index + (edge + 1) * 2 + 1];\n\n        findOtherEdge(faces, x0, y0, x1, y1, index, out)\n        if (out.index >= 0 && faces[out.index + f_count] === 3)\n        {\n            const {index: otherIndex, edge: otherEdge} = out;\n            const x2 = edge === 0 ? faces[index + f_x2] : faces[index + (edge - 1) * 2];\n            const y2 = edge === 0 ? faces[index + f_y2] : faces[index + (edge - 1) * 2 + 1];\n\n            // check if we're merging with an outmost face\n            const outMostEdge = faces[otherIndex + 9];\n            const otherIsOutmostTri = outMostEdge >= 0;\n\n            //const before = printEdge(faces, otherIndex, outMostEdge)\n            // if (otherIsOutmostTri)\n            // {\n            //     console.log(\"OUTMOST edge before split\", printEdge(faces, otherIndex, outMostEdge),\"EDGE CASE\", otherEdge, \"outMostEdge\", outMostEdge)\n            //     console.log(\"face before\", faces.slice(otherIndex, otherIndex + f_size))\n            // }\n\n            faces[otherIndex + 8] = 4;\n            switch (otherEdge)\n            {\n                case 2:\n                    faces[otherIndex + f_x3] = x2;\n                    faces[otherIndex + f_y3] = y2;\n                    break;\n                case 1:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = x2;\n                    faces[otherIndex + f_y2] = y2;\n                    break;\n                case 0:\n                    faces[otherIndex + f_x3] = faces[otherIndex + f_x2];\n                    faces[otherIndex + f_y3] = faces[otherIndex + f_y2];\n                    faces[otherIndex + f_x2] = faces[otherIndex + f_x1];\n                    faces[otherIndex + f_y2] = faces[otherIndex + f_y1];\n                    faces[otherIndex + f_x1] = x2\n                    faces[otherIndex + f_y1] = y2;\n\n                    if (otherIsOutmostTri)\n                    {\n                        faces[otherIndex + f_outmostEdge] = 2;\n                    }\n\n                    break;\n\n            }\n            eraseEdgesOfFaceInStack(otherIndex)\n\n            // remove our face\n            faces[index + f_count] = 0;\n\n            success++;\n        }\n        eraseEdgesOfFaceInStack(index)\n\n    }\n\n    config.debug && console.log(\"Successfully removed\", success, \"out of\", count);\n\n    return success;\n}\n\n\nfunction calculateNumNodes(config, faces)\n{\n    let tris = 0;\n    let quads = 0;\n    for (let i = 0; i < config.firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        if (count === 3)\n        {\n            tris++;\n        }\n        else if (count === 4)\n        {\n            quads++;\n        }\n    }\n\n    //console.log({quads,tris})\n\n    // we divide each quad in 9 nodes and each tri into 7 nodes\n    return quads * 9 + tris * 7;\n}\n\n\n\nfunction connectTiles(config, tiles)\n{\n    const { length } = tiles;\n\n    for (let i=0; i < length; i += t_size)\n    {\n        let numConnections = 0;\n        for (let j = 0; j < 4; j++)\n        {\n            const n0 = tiles[i + t_n0 + j];\n            const n1 = j === 3 ? tiles[i + t_n0 ] : tiles[i + t_n0 + j + 1];\n\n            let otherIndex = -1;\n            for (let k=0; k < tiles.length; k += t_size)\n            {\n                if (k === i)\n                {\n                    continue;\n                }\n\n                const otherNode0 = tiles[k + t_n0];\n                const otherNode1 = tiles[k + t_n1];\n                const otherNode2 = tiles[k + t_n2];\n                const otherNode3 = tiles[k + t_n3];\n\n                // tile edges are all defined in clockwise order, the opposite edge must necessarily walk the two nodes in\n                // the opposite direction\n\n                if (\n                    otherNode1 === n0 && otherNode0 === n1 ||\n                    otherNode2 === n0 && otherNode1 === n1 ||\n                    otherNode3 === n0 && otherNode2 === n1 ||\n                    otherNode0 === n0 && otherNode3 === n1\n                )\n                {\n\n                    otherIndex = k;\n                    numConnections++;\n                    break;\n                }\n            }\n\n            tiles[i + t_tile0 + j] = otherIndex;\n        }\n        tiles[i + t_isEdge] = numConnections === 4 ? 0 : 1;\n    }\n\n    config.debug && console.log(\"TILE GRAPH\", tiles);\n}\n\n\nfunction subdivide(config, faces)\n{\n    const { firstPassLen } = config;\n\n    const numNodes = calculateNumNodes(config, faces);\n\n    const nodes = new Float64Array(numNodes * g_size);\n\n\n    const tiles = new Int32Array(((numNodes / 2)|0) * t_size);\n\n    let pos = 0;\n    let tilePos = 0;\n\n    const insertNode = (x0, y0, isEdge) => {\n\n        x0 |= 0;\n        y0 |= 0;\n\n        for (let i = 0; i < pos; i += g_size)\n        {\n            if (Math.abs(nodes[i] - x0) < 4 && Math.abs(nodes[i + 1] - y0) < 4)\n            {\n                // if we discover an odd face vertex touching the outmost edge, we will\n                // not register that because the odd tris are not marked as having an outmost edge, because they don't, they\n                // only have one vertex on the edge at most\n                // Later we might however return to that node within an outmost edge and we have to make sure that\n                // we take over the isEdge status from such a node\n                if (isEdge && !nodes[i + 2])\n                {\n                    nodes[i + 2] = 1;\n                }\n\n                return i;\n            }\n        }\n\n        const index = pos;\n\n        nodes[pos + g_x] = x0;\n        nodes[pos + g_y] = y0;\n        nodes[pos + g_isEdge] = isEdge ? 1 : 0;\n        nodes[pos + g_count] = 0;\n\n        pos += g_size;\n\n        return index;\n    }\n\n    const addTile = ((n0,n1,n2,n3) => {\n\n        //console.log(\"addTile\", n0, n1, n2, n3, tilePos)\n\n        tiles[tilePos + t_n0] = n0;\n        tiles[tilePos + t_n1] = n1;\n        tiles[tilePos + t_n2] = n2;\n        tiles[tilePos + t_n3] = n3;\n\n        tilePos += t_size;\n    });\n\n    const insertEdge = (n0, n1) => {\n        let count = nodes[n0 + g_count];\n\n        let found = false;\n        for (let i = 0; i < count; i++)\n        {\n            const other = nodes[n0 + g_edge0 + i];\n            if (other === n1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            if (count >= 6)\n            {\n                throw new Error(\"At most 6 edges per node\")\n            }\n\n            nodes[n0 + g_edge0 + count++] = n1;\n            nodes[n0 + g_count] = count;\n        }\n\n    }\n    const connect = (n0, n1) => {\n\n        insertEdge(n0, n1);\n        insertEdge(n1, n0);\n\n    }\n\n    for (let i = 0; i < firstPassLen; i += f_size)\n    {\n        const count = faces[i + f_count];\n\n        const x0 = faces[i + f_x0]\n        const y0 = faces[i + f_y0]\n        const x1 = faces[i + f_x1]\n        const y1 = faces[i + f_y1]\n        const x2 = faces[i + f_x2]\n        const y2 = faces[i + f_y2]\n\n        const outmostEdge = faces[i + f_outmostEdge ];\n\n        const firstEdgeIsOutmost = outmostEdge === 1;\n        const secondEdgeIsOutmost = outmostEdge === 2;\n\n        if (count === 3)\n        {\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x0) / 2;\n            const m2y = (y2 + y0) / 2;\n\n            const cx = (x0 + x1 + x2) / 3\n            const cy = (y0 + y1 + y2) / 3\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y);\n            const n6 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n6);\n            connect(n6, n5);\n            connect(n5, n0);\n\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n6);\n            connect(n6, n1);\n\n            connect(n5, n6);\n            connect(n6, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n\n            addTile(n0,n1,n6,n5);\n            addTile(n1,n2,n3,n6);\n            addTile(n5,n6,n3,n4);\n\n        }\n        else if (count === 4)\n        {\n            const x3 = faces[i + f_x3]\n            const y3 = faces[i + f_y3]\n\n            const m0x = (x0 + x1) / 2;\n            const m0y = (y0 + y1) / 2;\n            const m1x = (x1 + x2) / 2;\n            const m1y = (y1 + y2) / 2;\n            const m2x = (x2 + x3) / 2;\n            const m2y = (y2 + y3) / 2;\n            const m3x = (x3 + x0) / 2;\n            const m3y = (y3 + y0) / 2;\n\n            const cx = (x0 + x1 + x2 + x3) / 4\n            const cy = (y0 + y1 + y2 + y3) / 4\n\n            const n0 = insertNode(x0, y0);\n            const n1 = insertNode(m0x, m0y);\n            const n2 = insertNode(x1, y1, firstEdgeIsOutmost);\n            const n3 = insertNode(m1x, m1y, firstEdgeIsOutmost);\n            const n4 = insertNode(x2, y2, firstEdgeIsOutmost || secondEdgeIsOutmost);\n            const n5 = insertNode(m2x, m2y, secondEdgeIsOutmost);\n            const n6 = insertNode(x3, y3, secondEdgeIsOutmost);\n            const n7 = insertNode(m3x, m3y);\n            const n8 = insertNode(cx, cy);\n\n            connect(n0, n1);\n            connect(n1, n2);\n            connect(n2, n3);\n            connect(n3, n4);\n            connect(n4, n5);\n            connect(n5, n6);\n            connect(n6, n7);\n            connect(n7, n0);\n\n            connect(n8, n3);\n            connect(n8, n5);\n            connect(n8, n7);\n            connect(n8, n1);\n\n            addTile(n0,n1,n8,n7);\n            addTile(n1,n2,n3,n8);\n            addTile(n8,n3,n4,n5);\n            addTile(n7,n8,n5,n6);\n        }\n    }\n\n    //const fillRate = (pos / g_size) / numNodes;\n    //console.log(\"SUBDIVIDED: limit = \", numNodes, \", fill rate = \", fillRate);\n\n    console.log(\"TILES: buffer = \", tiles.length, \", used = \" + tilePos)\n\n    const newTiles = tiles.slice(0, tilePos);\n\n    connectTiles(config, newTiles);\n\n    return [nodes.slice(0, pos), newTiles];\n}\n\n\nfunction relaxWeighted(config, graph, maxIterations = 1)\n{\n\n    const {length} = graph;\n\n    for (let i = 0; i < maxIterations; i++)\n    {\n        let tension = 0;\n        for (let j = 0; j < length; j += g_size)\n        {\n            if (!graph[j + g_isEdge])\n            {\n                const x0 = graph[j + g_x]\n                const y0 = graph[j + g_y]\n                const edgeCount = graph[j + g_count]\n\n                let centerX = 0;\n                let centerY = 0;\n                let sumWeight = 0;\n\n                for (let k = 0; k < edgeCount; k++)\n                {\n                    const other = graph[j + 4 + k];\n\n                    const x1 = graph[other];\n                    const y1 = graph[other + 1];\n\n                    const weight = config.weightFunction(x0, y0, x1, y1);\n\n                    centerX += x1 * weight;\n                    centerY += y1 * weight;\n                    sumWeight += weight;\n                }\n\n                const x1 = centerX / sumWeight\n                const y1 = centerY / sumWeight;\n\n                const dx = x1 - x0;\n                const dy = y1 - y0;\n\n                graph[j + g_x] = x1;\n                graph[j + g_y] = y1;\n\n                tension += dx * dx + dy * dy;\n\n            }\n        }\n\n        if (tension < config.minTension)\n        {\n            config.debug && console.log(\"Reached minimal tension\", config.minTension, \"after\", config.relaxCount, \"iterations\")\n            return true;\n        }\n        config.relaxCount++;\n    }\n\n    if (!config.animatedEasing)\n    {\n        config.debug && console.log(\"Stopping after max iterations = \" + config.maxIterations)\n    }\n\n    return false;\n}\n\n\n/**\n * A hexagon filled with quads forming organic shapes.\n */\nclass OrganicQuads {\n    constructor(cfg)\n    {\n\n        const config = {\n            ...DEFAULT_CONFIG,\n            ...cfg\n        }\n\n        updateConfig(config)\n\n        this.config = config;\n\n        const faces = createHexagonTriangles(config);\n\n        if (config.renderFirstPassEdges)\n        {\n            this.faces = config.renderFirstPassEdges !== \"merged\" ? faces.slice() : faces;\n        }\n\n        const start = config.debug && now();\n\n        removeRandomEdges(config, faces)\n\n        config.debug && console.log(\"Edge removal in \" , now() - start, \"ms\")\n\n        const [graph, tiles] = subdivide(config, faces);\n        this.tiles = tiles;\n\n        if (!config.animating)\n        {\n            relaxWeighted(config, graph, config.maxIterations);\n        }\n        //console.log(\"GRAPH f_size\", graph.length / g_size, graph);\n        this.graph = graph;\n\n    }\n\n\n    render = ctx =>\n    {\n        const { config, graph, faces } = this;\n\n\n        ctx.save();\n\n        const hw = config.width / 2;\n        const hh = config.height / 2;\n\n        ctx.translate(hw, hh)\n\n        const {length} = graph;\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(-hw, -hh, config.width, config.height)\n\n        if (config.renderFirstPassEdges)\n        {\n\n            // draw original quads and tris\n\n            ctx.strokeStyle = \"#f00\";\n            ctx.lineWidth = 1;\n\n\n            let outerCount = 0;\n            for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n            {\n                const count = faces[pos + f_count];\n\n                if (count >= 3)\n                {\n\n                    ctx.beginPath();\n                    ctx.moveTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n\n                    for (let i = 1; i < count; i++)\n                    {\n                        ctx.lineTo(faces[pos + i*2],faces[pos +  i*2 + 1]);\n                    }\n\n                    ctx.closePath();\n                    ctx.stroke();\n\n                    const outmostEdge = faces[pos + f_outmostEdge];\n                    if (outmostEdge >= 0)\n                    {\n                        ctx.strokeStyle = \"#fe0\";\n                        ctx.beginPath();\n                        ctx.moveTo(faces[pos + outmostEdge * 2  ],faces[pos + outmostEdge * 2 + 1]);\n\n                        if (outmostEdge === count - 1)\n                        {\n                            ctx.lineTo(faces[pos + f_x0 ],faces[pos + f_y0]);\n                        }\n                        else\n                        {\n                            ctx.lineTo(faces[pos + (outmostEdge + 1 ) * 2  ],faces[pos + (outmostEdge + 1 ) * 2 + 1]);\n                        }\n                        ctx.stroke();\n                        ctx.strokeStyle = \"#f00\";\n\n                        outerCount++;\n\n                    }\n\n                }\n            }\n            //    console.log(\"Number of outer edges\", outerCount)\n\n            //console.log(\"DRAW EDGES\")\n        }\n\n        // ctx.strokeStyle = \"#fff\";\n        // ctx.lineWidth = 1;\n        //\n        //\n        // function drawEdge(x0, y0, node)\n        // {\n        //     const x1 = graph[node + g_x];\n        //     const y1 = graph[node + g_y];\n        //\n        //     ctx.beginPath();\n        //     ctx.moveTo(x0, y0);\n        //     ctx.lineTo(x1, y1);\n        //     ctx.stroke();\n        // }\n        //\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const edgeCount = graph[i + g_count];\n        //\n        //     for (let j = 0; j < edgeCount; j++)\n        //     {\n        //         drawEdge(x0, y0, graph[i + g_edge0 + j])\n        //     }\n        // }\n\n        //ctx.fillStyle = \"#f0f\";\n        //\n        // for (let i = 0; i < length; i += g_size)\n        // {\n        //     const x0 = graph[i + g_x];\n        //     const y0 = graph[i + g_y];\n        //     const isEdge = graph[i + g_isEdge];\n        //\n        //     if (isEdge)\n        //     {\n        //         ctx.fillRect(x0 - 4,  y0 - 4, 8, 8)\n        //     }\n        // }\n\n        // ctx.strokeStyle = \"#f00\";\n        // ctx.lineWidth = 4;\n        //\n        // for (let pos = 0; pos < config.firstPassLen; pos += f_size)\n        // {\n        //     const count = faces[pos + f_count];\n        //     const outmostEdge = faces[pos + f_outmostEdge];\n        //\n        //\n        //     const last = count - 1;\n        //     for (let i=0; i < count; i++)\n        //     {\n        //         if (i === outmostEdge)\n        //         {\n        //             ctx.strokeStyle = \"rgba(255,0,0,0.5)\";\n        //         }\n        //         else\n        //         {\n        //             ctx.strokeStyle = \"rgba(0,255,0,0.5)\";\n        //         }\n        //\n        //         ctx.beginPath();\n        //         ctx.moveTo(faces[pos + i * 2], faces[pos + i * 2 + 1]);\n        //         ctx.lineTo(\n        //             i === last ? faces[pos + f_x0 ] : faces[pos + (i+1) * 2],\n        //             i === last ? faces[pos + f_y0 ] : faces[pos + (i+1) * 2 + 1]\n        //         );\n        //         ctx.stroke();\n        //     }\n        // }\n\n        ctx.restore();\n\n        if (config.animating)\n        {\n            if (relaxWeighted(config, graph))\n            {\n                config.animating = false;\n            }\n            //            raf(redrawGraph)\n        }\n    }\n}\n\n\nexport {  Vector }\n\nexport default OrganicQuads\n","export function dump(obj, level = \"\")\n{\n    const {type} = obj;\n    if (type === \"Group\")\n    {\n        console.log(level + \"GROUP\", obj.name)\n\n        const nextLevel = level + \"    \"\n\n        const {children} = obj;\n        for (let i = 0; i < children.length; i++)\n        {\n            dump(children[i], nextLevel);\n        }\n    }\n    else if (type === \"Mesh\")\n    {\n        console.log(level + \"MESH\", obj.name)\n    }\n}\n","const sqrt = Math.sqrt;\n\nclass Vector\n{\n    constructor(x,y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Returns a copy of this vector.\n     *\n     * @returns {Vector} copy\n     */\n    copy()\n    {\n        return new Vector(this.x,this.y);\n    }\n\n    /**\n     * Adds to this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n\n    add(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x += x;\n            this.y += y;\n        }\n        else\n        {\n            this.x += x.x;\n            this.y += x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Subtracts from this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    subtract(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x -= x;\n            this.y -= y;\n        }\n        else\n        {\n            this.x -= x.x;\n            this.y -= x.y;\n        }\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by a planar number.\n     *\n     * @param n     scale\n     * @returns {Vector} this vector, scaled\n     */\n    scale(n)\n    {\n        this.x *= n;\n        this.y *= n;\n\n        return this;\n    }\n\n    /**\n     * Length of this vector\n     *\n     * @returns {number}    length\n     */\n    length()\n    {\n        const { x, y } = this;\n        return sqrt(x*x+y*y);\n    }\n\n    /**\n     * Scales the vector to normal length or a specified length\n     *\n     * @param targetLength      {number?} target length of the vector (default is 1, the normal vector length)\n     *\n     * @returns {Vector}\n     */\n    norm(targetLength = 1)\n    {\n        return this.scale(targetLength / this.length());\n    }\n\n    /**\n     * Rotate vector 90 degrees clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateClockwise()\n    {\n        const { x, y } = this;\n\n        //noinspection JSSuspiciousNameCombination\n        this.x = y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate vector 90 degrees counter clockwise.\n     *\n     * @returns {Vector}\n     */\n    rotateCounterClockwise()\n    {\n        const { x, y } = this;\n\n        this.x = -y;\n        //noinspection JSSuspiciousNameCombination\n        this.y = x;\n\n        return this;\n    }\n\n    /**\n     * Sets the coordinates of this vector\n     *\n     * @param x     {number|Vector} x coordinate or a vector\n     * @param y     {number?} y coordinate, ignored if x is a vector\n     * @returns {Vector} this vector\n     */\n    set(x,y)\n    {\n        if (typeof x === \"number\")\n        {\n            this.x = x;\n            this.y = y;\n        }\n        else\n        {\n            this.x = x.x;\n            this.y = x.y;\n        }\n\n    }\n}\n\nexport default Vector;\n","export const WATER = 0;\nexport const SAND = 1;\nexport const GRASS = 2;\nexport const FOREST = 3;\nexport const STONE = 4;\nexport const ICE = 5;\nexport const DIRT = 6;\nexport const PACKED_ICE = 7;\nexport const UNDEFINED = 8;\n\nexport const MATERIAL_NAMES = [\n    \"Water\", // WATER\n    \"Sand\", // SAND\n    \"Grass\", // GRASS\n    \"Forest\", // FOREST\n    \"Stone\", // STONE\n    \"Ice\", // ICE\n    \"Dirt\", // DIRT\n    \"Packed_Ice\", // PACKED_ICE\n];\nexport const CASE_NAMES = [\n    null,\n    \"case-1\",\n    \"case-2\",\n    \"case-3\",\n    \"case-4\",\n    \"case-5-1\",\n    \"case-6\",\n    \"case-7\",\n    \"case-8\",\n    \"case-9\",\n    \"case-10-1\",\n    \"case-11\",\n    \"case-12\",\n    \"case-13\",\n    \"case-14\",\n    \"case-15\",\n    \"case-m1\",\n    \"case-m2\",\n    \"case-m3\",\n    \"case-m4\",\n    \"case-5-2\",\n    \"case-10-2\"\n];\nexport const GROUND_COLORS = {\n    [WATER]: [0, 0.4, 0.8],\n    [SAND]: [0.8, 0.8, 0],\n    [GRASS]: [0, 0.7, 0],\n    [DIRT]: [0.5, 0.3, 0.1],\n    [FOREST]: [0.2, 0.5, 0.3],\n    [STONE]: [0.5, 0.5, 0.5],\n    [ICE]: [1, 1, 1],\n    [PACKED_ICE]: [1, 1, 1],\n    [UNDEFINED]: [1, 0, 1]\n}\nconst GROUND_ROUGHNESS = {\n    [WATER]: 0,\n    [SAND]: 1,\n    [GRASS]: 1,\n    [DIRT]: 1,\n    [FOREST]: 1,\n    [STONE]: 0.4,\n    [ICE]: 0.9,\n    [PACKED_ICE]: 0.8,\n    [UNDEFINED]: 0\n}\n\n\nexport const TAU = Math.PI * 2;\n\nexport const PHI = (1 + Math.sqrt(5)) / 2;\n","import { BufferAttribute, Sphere, Box3, BufferGeometry } from \"three\";\n\n\nexport const toIndexed = function () {\n\n    let list = [], vertices = {};\n\n    let _src, attributesKeys, morphKeys;\n\n    let prec = 0, precHalf = 0, length = 0;\n\n\n    function floor( array, offset ) {\n\n        if ( array instanceof Float32Array ) {\n\n            return Math.floor( array[ offset ] * prec );\n\n        } else if ( array instanceof Float16Array ) {\n\n            return Math.floor( array[ offset ] * precHalf );\n\n        } else {\n\n            return array[ offset ];\n\n        }\n\n    }\n\n    function createAttribute( src_attribute ) {\n\n        const dst_attribute = new BufferAttribute( new src_attribute.array.constructor( length * src_attribute.itemSize ), src_attribute.itemSize );\n\n        const dst_array = dst_attribute.array;\n        const src_array = src_attribute.array;\n\n        switch ( src_attribute.itemSize ) {\n            case 1:\n\n                for ( let i = 0, l = list.length; i < l; i++ ) {\n\n                    dst_array[ i ] = src_array[ list[ i ] ];\n\n                }\n\n                break;\n            case 2:\n\n                for ( let i = 0, l = list.length; i < l; i++ ) {\n\n                    const index = list[ i ] * 2;\n\n                    const offset = i * 2;\n\n                    dst_array[ offset ] = src_array[ index ];\n                    dst_array[ offset + 1 ] = src_array[ index + 1 ];\n\n                }\n\n                break;\n            case 3:\n\n                for ( let i = 0, l = list.length; i < l; i++ ) {\n\n                    const index = list[ i ] * 3;\n\n                    const offset = i * 3;\n\n                    dst_array[ offset ] = src_array[ index ];\n                    dst_array[ offset + 1 ] = src_array[ index + 1 ];\n                    dst_array[ offset + 2 ] = src_array[ index + 2 ];\n\n\n                }\n\n                break;\n            case 4:\n\n                for ( let i = 0, l = list.length; i < l; i++ ) {\n\n                    const index = list[ i ] * 4;\n\n                    const offset = i * 4;\n\n                    dst_array[ offset ] = src_array[ index ];\n                    dst_array[ offset + 1 ] = src_array[ index + 1 ];\n                    dst_array[ offset + 2 ] = src_array[ index + 2 ];\n                    dst_array[ offset + 3 ] = src_array[ index + 3 ];\n\n\n                }\n\n                break;\n        }\n\n        return dst_attribute;\n\n    }\n\n    function hashAttribute( attribute, offset ) {\n\n        const array = attribute.array;\n\n        switch ( attribute.itemSize ) {\n            case 1:\n\n                return floor( array, offset );\n\n            case 2:\n\n                return floor( array, offset ) + '_' + floor( array, offset + 1 );\n\n            case 3:\n\n                return floor( array, offset ) + '_' + floor( array, offset + 1 ) + '_' + floor( array, offset + 2 );\n\n            case 4:\n\n                return floor( array, offset ) + '_' + floor( array, offset + 1 ) + '_' + floor( array, offset + 2 ) + '_' + floor( array, offset + 3 );\n\n        }\n\n\n    }\n\n\n    function store( index, n ) {\n\n        let id = '';\n\n        for ( let i = 0, l = attributesKeys.length; i < l; i++ ) {\n\n            const key = attributesKeys[ i ];\n            const attribute = _src.attributes[ key ];\n\n            const offset = attribute.itemSize * index * 3 + n * attribute.itemSize;\n\n            id += hashAttribute( attribute, offset ) + '_';\n\n        }\n\n        for ( let i = 0, l = morphKeys.length; i < l; i++ ) {\n\n            const key = morphKeys[ i ];\n            const attribute = _src.morphAttributes[ key ];\n\n            const offset = attribute.itemSize * index * 3 + n * attribute.itemSize;\n\n            id += hashAttribute( attribute, offset ) + '_';\n\n        }\n\n\n        if ( vertices[ id ] === undefined ) {\n\n            vertices[ id ] = list.length;\n\n            list.push( index * 3 + n );\n\n        }\n\n        return vertices[ id ];\n\n    }\n\n    function storeFast( x, y, z, v ) {\n\n\n        const id = Math.floor( x * prec ) + '_' + Math.floor( y * prec ) + '_' + Math.floor( z * prec );\n\n        if ( vertices[ id ] === undefined ) {\n\n            vertices[ id ] = list.length;\n\n\n            list.push( v );\n\n        }\n\n        return vertices[ id ];\n\n    }\n\n\n    function indexBufferGeometry( src, dst, fullIndex ) {\n\n        _src = src;\n\n        attributesKeys = Object.keys( src.attributes );\n        morphKeys = Object.keys( src.morphAttributes );\n\n\n\n        const position = src.attributes.position.array;\n        const faceCount = position.length / 3 / 3;\n\n        const typedArray = faceCount * 3 > 65536 ? Uint32Array : Uint16Array;\n        const indexArray = new typedArray( faceCount * 3 );\n\n\n        // Full index only connects vertices where all attributes are equal\n\n        if ( fullIndex ) {\n\n            for ( let i = 0, l = faceCount; i < l; i++ ) {\n\n                indexArray[ i * 3 ] = store( i, 0 );\n                indexArray[ i * 3 + 1 ] = store( i, 1 );\n                indexArray[ i * 3 + 2 ] = store( i, 2, );\n\n            }\n\n        } else {\n\n            for ( let i = 0, l = faceCount; i < l; i++ ) {\n\n                const offset = i * 9;\n\n                indexArray[ i * 3 ] = storeFast( position[ offset ], position[ offset + 1 ], position[ offset + 2 ], i * 3 );\n                indexArray[ i * 3 + 1 ] = storeFast( position[ offset + 3 ], position[ offset + 4 ], position[ offset + 5 ], i * 3 + 1 );\n                indexArray[ i * 3 + 2 ] = storeFast( position[ offset + 6 ], position[ offset + 7 ], position[ offset + 8 ], i * 3 + 2 );\n\n            }\n\n        }\n\n\n        // Index\n\n        dst.index = new BufferAttribute( indexArray, 1 );\n\n        length = list.length;\n\n\n        // Attributes\n\n        for ( let i = 0, l = attributesKeys.length; i < l; i++ ) {\n\n            const key = attributesKeys[ i ];\n\n            dst.attributes[ key ] = createAttribute( src.attributes[ key ] );\n\n        }\n\n        // Morph Attributes\n\n        for ( let i = 0, l = morphKeys.length; i < l; i++ ) {\n\n            const key = morphKeys[ i ];\n\n            dst.morphAttributes[ key ] = createAttribute( src.morphAttributes[ key ] );\n\n        }\n\n\n        if ( src.boundingSphere ) {\n\n            dst.boundingSphere = src.boundingSphere.clone();\n\n        } else {\n\n            dst.boundingSphere = new Sphere;\n            dst.computeBoundingSphere();\n\n        }\n\n\n        if ( src.boundingBox ) {\n\n            dst.boundingBox = src.boundingBox.clone();\n\n        } else {\n\n            dst.boundingBox = new Box3;\n            dst.computeBoundingBox();\n\n        }\n\n\n        // Groups\n\n        const groups = src.groups;\n\n        for ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n            const group = groups[ i ];\n\n            dst.addGroup( group.start, group.count, group.materialIndex );\n\n        }\n\n\n        // Release data\n\n        vertices = {};\n        list = [];\n\n        _src = null;\n        attributesKeys = [];\n        morphKeys = [];\n\n    }\n\n\n    return function ( geom, fullIndex, precision ) {\n\n        precision = precision || 6;\n\n        prec = Math.pow( 10, precision );\n        precHalf = Math.pow( 10, Math.floor( precision / 2 ) );\n\n        const geometry = new BufferGeometry;\n\n        indexBufferGeometry( geom, geometry, fullIndex === undefined ? true : fullIndex );\n\n\n        return geometry;\n\n    }\n\n}();\n","import {\n    BufferGeometry,\n    InstancedBufferGeometry,\n    InstancedMesh,\n    InterleavedBuffer,\n    InterleavedBufferAttribute,\n    Object3D\n} from \"three\";\nimport reduceSum from \"../util/reduceSum\";\nimport { toIndexed } from \"./toIndexed\";\n\n\nfunction sortNumerical(a,b)\n{\n    return a - b;\n}\n\nconst DEFAULT_OPTIONS = {\n    objects: [],\n    attributeDefs: [],\n    defaultCount: 100,\n    maxInstances: -1\n}\n\nconst tmpObject = new Object3D();\n\n\n\nexport function attr1(name)\n{\n    return {\n        name,\n        itemSize: 1,\n        normalized: false\n    };\n}\n\nexport function attr3(name)\n{\n    return {\n        name,\n        itemSize: 3,\n        normalized: false\n    };\n}\n\nexport default class InstancedMeshSet\n{\n    nameLookup = new Map();\n\n    opts = null;\n\n    instances = null;\n\n    /**\n     * \n     * @type {number}\n     */\n    maxInstances = 0;\n\n    constructor(gltf, opts)\n    {\n        this.opts = ({\n            ... DEFAULT_OPTIONS,\n            ... opts\n        });\n\n        this.calculateMaxInstances();\n        this.importGeometries(gltf);\n        this.instanceSize = (1 + this.maxGeomsPerInstance);\n        this.instances = new Uint32Array(this.maxInstances * this.instanceSize);\n        this.meshes = this.createMeshes();\n\n        console.log(\"Created InstancedMeshSet\", this);\n    }\n\n\n    calculateMaxInstances()\n    {\n        const {objects, defaultCount} = this.opts;\n\n        let maxInstances = 0;\n        for (let i = 0; i < objects.length; i++)\n        {\n            const { count = defaultCount } = objects[i];\n            maxInstances += count;\n        }\n        \n        this.maxInstances = maxInstances;\n    }\n\n\n\n    importGeometries(gltf)\n    {\n        const { objects, defaultCount } = this.opts;\n\n        let maxGeomsPerInstance = 1;\n\n        let index = 0;\n        for (let i = 0; i < objects.length; i++)\n        {\n            const { name, count = defaultCount } = objects[i];\n\n            const object = gltf.scene.children.find(kid => kid.name === name);\n            if (!object)\n            {\n                throw new Error(\"Could not find Object '\" + name + \"'\");\n            }\n\n            this.nameLookup.set(name, index);\n            objects[i].index = index;\n            objects[i].count = count;\n\n            if (object.type === \"Group\")\n            {\n                const meshes = object.children.filter(kid => kid.type === \"Mesh\");\n\n                if (meshes.length > maxGeomsPerInstance)\n                {\n                    maxGeomsPerInstance = meshes.length;\n                }\n                objects[i].meshes = meshes;\n                index += meshes.length;\n            }\n            else if (object.type === \"Mesh\")\n            {\n                objects[i].meshes = [ object ]\n                index++;\n            }\n            else\n            {\n                throw new Error(\"Invalid object type: \" + JSON.stringify(object))\n            }\n        }\n\n        this.maxGeomsPerInstance = maxGeomsPerInstance;\n        this.numGeoms = index;\n    }\n\n    createMeshes()\n    {\n        const { numGeoms } = this;\n        const { objects } = this.opts;\n\n        const meshes = new Array(numGeoms);\n\n        for (let i = 0; i < objects.length; i++)\n        {\n            const { name, index, meshes : inputMeshes, count } = objects[i];\n\n            for (let j = 0; j < inputMeshes.length; j++)\n            {\n                const object = inputMeshes[j];\n                const instancedMesh = this.createInstancedMesh(object, count);\n\n                instancedMesh.name = \"InstancedMesh \" + name + \"#\" + j\n                meshes[index + j] = instancedMesh;\n            }\n\n         }\n\n        return meshes;\n    }\n\n    createInstancedMesh(inputMesh, maxInstances)\n    {\n\n        console.log(\"createInstancedMesh\", inputMesh);\n\n        const { attributeDefs } = this.opts;\n\n\n        const geometry = new InstancedBufferGeometry();\n\n        BufferGeometry.prototype.copy.call(geometry, inputMesh.geometry);\n\n        let offset = 0\n\n        attributeDefs.forEach(\n            a => {\n                offset += a.itemSize;\n            }\n        )\n        const stride = offset;\n        const buffer = new InterleavedBuffer(new Float32Array(maxInstances * stride), stride);\n\n        attributeDefs.forEach(\n            ({ name, itemSize, normalized }) => {\n                geometry.setAttribute(name, new InterleavedBufferAttribute(buffer, itemSize, offset, normalized));\n                offset += itemSize;\n            }\n        );\n\n        //console.log(\"Instance count for \", MATERIAL_NAMES[i], \"/\", CASE_NAMES[j], \" = \", count, geometry);\n        const instancedMesh = new InstancedMesh(geometry, inputMesh.material.clone(), maxInstances);\n        return instancedMesh;\n        // for (let i = 0; i < count; i++)\n        // {\n        //     const idx = i * 3;\n        //     const x = positions[idx]\n        //     const y = positions[idx + 1]\n        //     const z = positions[idx + 2]\n        //\n        //     tmpObject.position.set(x, y, z);\n        //     //dummy.rotation.x = TAU/4;\n        //     tmpObject.updateMatrix();\n        //\n        //     mesh.setMatrixAt(i, tmpObject.matrix)\n        // }\n        //\n        // mesh.needsUpdate = true;\n        // return mesh;\n    }\n}\n/**\n * We go from the GLTF structure\n * gltf:\n *  [\n *      group [\n *          ... object\n *      ]\n *      object\n *  ]\n *\n * to a multi-instanced-mesh-by-geometry\n *\n * instanceMesh:{\n *\n *      names: []\n *\n *     instances: [\n *         kind,\n *         geomId0\n *         geomId0 ... geomIdN\n *     ]\n *     meshes: [\n *         InstancedMesh, ...\n *     ]\n * }\n *\n *\n */\n\n\n","import raf from \"raf\"\n// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport perfNow from \"performance-now\"\nimport {\n    BufferGeometry,\n    CubeCamera,\n    DirectionalLight,\n    DoubleSide,\n    Float32BufferAttribute, Group, InstancedMesh, InterleavedBuffer, InterleavedBufferAttribute,\n    Mesh,\n    MeshStandardMaterial, Object3D,\n    PerspectiveCamera,\n    PlaneBufferGeometry, Raycaster,\n    Scene,\n    sRGBEncoding,\n    Vector2,\n    WebGLRenderer\n} from \"three\"\n\nimport OrganicQuads, { g_x, g_y, t_n0, t_n1, t_n2, t_n3, t_size } from \"@fforw/organic-quads\";\nimport loadScene from \"./util/loadScene\";\nimport { Sky } from \"three/examples/jsm/objects/Sky.js\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CASE_NAMES, ICE, MATERIAL_NAMES } from \"./constants\";\n\nimport { dump } from \"./util/dump\";\nimport { InstancedBufferGeometry } from \"three/src/core/InstancedBufferGeometry\";\nimport InstancedMeshSet, { attr1, attr3 } from \"./instancing/InstancedMeshSet\";\n\n\nconst SKY_EFFECT = true;\n\nconst DETAIL = 1;\n\n// size of the outer square around our big hexagon\nconst SIZE = 1500;\n\n//////////////////////////////////////////////////////////////////////\n\nlet container, stats;\nlet camera, scene, renderer, light;\nlet controls, water;\n\nlet materials;\nlet tilesMesh;\nlet standardTileMaterial;\nlet selectedTileMaterial;\n\nconst raycaster = new Raycaster();\n\nlet organicQuads, envMap;\n\nlet tilesGLTF;\n\n// how much to shrink down the individual tiles to we can see them \nconst SHRINK_SCALE = 0.9;\n\nfunction drawTiles()\n{\n\n    // generate vertices, normals and color data for a simple grid geometry\n    const { graph, tiles } = organicQuads;\n\n    const { length } = tiles;\n    tilesMesh = new Group();\n\n    standardTileMaterial = new MeshStandardMaterial({\n        depthTest: false,\n        side: DoubleSide,\n        color: \"#888\",\n        roughness: 0.7\n    });\n\n    selectedTileMaterial = new MeshStandardMaterial({\n        depthTest: false,\n        side: DoubleSide,\n        transparent: true,\n        opacity: 0.5,\n        color: \"#888\",\n        roughness: 0.7\n    });\n\n    for (let i = 0; i < length; i += t_size)\n    {\n        const geometry = new BufferGeometry();\n        geometry.name = \"Morph-Tiles\"\n\n        const vertices = [];\n        const normals = [];\n\n        // node indizes for our quad\n        const n0 = tiles[i + t_n0];\n        const n1 = tiles[i + t_n1];\n        const n2 = tiles[i + t_n2];\n        const n3 = tiles[i + t_n3];\n\n        // scale-down around centroid\n        const ox0 = graph[n0 + g_x];\n        const oz0 = graph[n0 + g_y];\n        const ox1 = graph[n1 + g_x];\n        const oz1 = graph[n1 + g_y];\n        const ox2 = graph[n2 + g_x];\n        const oz2 = graph[n2 + g_y];\n        const ox3 = graph[n3 + g_x];\n        const oz3 = graph[n3 + g_y];\n\n        const mx = (ox0 + ox1 + ox2 + ox3) / 4;\n        const mz = (oz0 + oz1 + oz2 + oz3) / 4;\n\n        const x0 = mx + (ox0 - mx) * SHRINK_SCALE\n        const z0 = mz + (oz0 - mz) * SHRINK_SCALE\n        const x1 = mx + (ox1 - mx) * SHRINK_SCALE\n        const z1 = mz + (oz1 - mz) * SHRINK_SCALE\n        const x2 = mx + (ox2 - mx) * SHRINK_SCALE\n        const z2 = mz + (oz2 - mz) * SHRINK_SCALE\n        const x3 = mx + (ox3 - mx) * SHRINK_SCALE\n        const z3 = mz + (oz3 - mz) * SHRINK_SCALE\n\n        const y0 = 0;\n        const y1 = 0;\n        const y2 = 0;\n        const y3 = 0;\n\n        const ax = (x0 - x1);\n        const ay = (y0 - y1);\n        const az = (z0 - z1);\n        const bx = (x2 - x1);\n        const by = (y2 - y1);\n        const bz = (z2 - z1);\n        const cx = (x3 - x1);\n        const cy = (y3 - y1);\n        const cz = (z3 - z1);\n\n        // normal vector based on points 0, 1 and 2\n        const n0x = ay * bz - az * by;\n        const n0y = az * bx - ax * bz;\n        const n0z = ax * by - ay * bx;\n\n        // normal vector based on points 0, 1 and 3\n        const n1x = ay * cz - az * cy;\n        const n1y = az * cx - ax * cz;\n        const n1z = ax * cy - ay * cx;\n\n        // average and renormalize\n        let nx = (n0x + n1x) / 2;\n        let ny = (n0y + n1y) / 2;\n        let nz = (n0z + n1z) / 2;\n\n        const f = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz);\n        nx *= f;\n        ny *= f;\n        nz *= f;\n\n        {\n            vertices.push(x0, y0, z0);\n            vertices.push(x3, y3, z3);\n            vertices.push(x1, y1, z1);\n\n            vertices.push(x1, y1, z1);\n            vertices.push(x3, y3, z3);\n            vertices.push(x2, y2, z2);\n\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n            normals.push(nx, ny, nz);\n        }\n\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n\n        const mesh = new Mesh(geometry, standardTileMaterial);\n        mesh.position.set(0, 0, 0);\n\n        tilesMesh.add(mesh)\n    }\n\n\n    scene.add(tilesMesh);\n\n    // const wireframe = new WireframeGeometry( geometry );\n    //\n    // const line = new LineSegments( wireframe );\n    // line.material.depthTest = false;\n    // line.material.color = new Color(\"#000\");\n    // line.material.opacity = 0.25;\n    // line.material.transparent = true;\n    // scene.add( line );\n\n}\n\n\nfunction createScene()\n{\n    organicQuads = new OrganicQuads({\n        numberOfRings: DETAIL,\n        width: SIZE,\n        height: SIZE,\n        graphUserData: 1,\n        // weightFunction: (x0,y0,x1,y1) => {\n        //\n        //     const dx = x1 - x0;\n        //     const dy = y1 - y0;\n        //     const dz = heightFn(x0,y0) - heightFn(x1,y1);\n        //\n        //     return Math.sqrt(dx * dx + dy * dy + dz * dz);\n        //\n        // }\n    });\n\n    const {graph, tiles, config} = organicQuads;\n    const {length} = graph;\n\n}\n\n\nconst skyParameters = {\n    distance: 1000,\n    inclination: 0.1,\n    azimuth: 0.1\n};\n\n\nfunction updateSun()\n{\n\n    if (!sky)\n    {\n        return;\n    }\n\n    const theta = Math.PI * (skyParameters.inclination - 0.5);\n    const phi = 2 * Math.PI * (skyParameters.azimuth - 0.5);\n\n    light.position.x = skyParameters.distance * Math.cos(phi);\n    light.position.y = skyParameters.distance * Math.sin(phi) * Math.sin(theta);\n    light.position.z = skyParameters.distance * Math.sin(phi) * Math.cos(theta);\n\n    sky.material.uniforms[\"sunPosition\"].value = light.position.copy(light.position);\n    water && water.material.uniforms[\"sunDirection\"].value.copy(light.position).normalize();\n\n    cubeCamera.update(renderer, sky);\n\n}\n\n\nlet cubeCamera, sky, meshSet;\n\n\n\nfunction init()\n{\n\n    createScene();\n\n    container = document.getElementById(\"container\");\n\n    //\n\n    renderer = new WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = sRGBEncoding\n    container.appendChild(renderer.domElement);\n    //\n\n    scene = new Scene();\n\n    camera = new PerspectiveCamera(55, window.innerWidth / window.innerHeight, 1, 20000);\n    camera.position.set(250, 250, 1000);\n\n    //\n\n    light = new DirectionalLight(\"#fff8d5\", 0.8);\n    scene.add(light);\n\n    cubeCamera = new CubeCamera(0.2, 1, 512);\n    // cubeCamera.renderTarget.texture.generateMipmaps = true;\n    // cubeCamera.renderTarget.texture.minFilter = LinearMipmapLinearFilter;\n\n    scene.background = cubeCamera.renderTarget;\n\n    // Water\n\n    const waterGeometry = new PlaneBufferGeometry(30000, 30000);\n\n    const mesh = new Mesh(waterGeometry, materials[ICE]);\n    mesh.rotation.x = -Math.PI / 2;\n    //scene.add(mesh)\n\n    // Skybox\n\n    if (SKY_EFFECT)\n    {\n        sky = new Sky();\n\n        // uniforms[\"turbidity\"].value = 5;\n        // uniforms[\"rayleigh\"].value = 1.2;\n        // uniforms[\"luminance\"].value = 1;\n        // uniforms[\"mieCoefficient\"].value = 0.05;\n        // uniforms[\"mieDirectionalG\"].value = 0.9;\n\n        envMap = cubeCamera.renderTarget.texture\n\n        updateSun();\n    }\n    else\n    {\n        envMap = null;\n    }\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    //controls.maxPolarAngle = Math.PI * 0.45;\n    controls.maxPolarAngle = Math.PI;\n    controls.target.set(0, 0, 0);\n    controls.minDistance = 0.0;\n    controls.maxDistance = 1500.0;\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.02;\n    controls.update();\n\n    // stats = new Stats();\n    // container.appendChild( stats.dom );\n\n    // GUI\n\n    //const gui = new GUI();\n\n    // const folder = gui.addFolder( \"Sky\" );\n    // folder.add( skyParameters, \"inclination\", 0, 0.5, 0.0001 ).onChange( updateSun );\n    // folder.add( skyParameters, \"azimuth\", 0, 1, 0.0001 ).onChange( updateSun );\n    // folder.open();\n    //\n    // const uniforms = water.material.uniforms;\n    //\n    // const folder = gui.addFolder( \"Water\" );\n    // folder.add( uniforms.distortionScale, \"value\", 0, 8, 0.1 ).name( \"distortionScale\" );\n    // folder.add( uniforms.size, \"value\", 0.1, 10, 0.1 ).name( \"size\" );\n    // folder.add( uniforms.alpha, \"value\", 0.9, 1, .001 ).name( \"alpha\" );\n    // folder.open();\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n\n    drawTiles()\n\n    meshSet = new InstancedMeshSet(\n        tilesGLTF,\n        {\n            objects: [\n                {\n                    name: \"tree_plateau\"\n                }\n            ],\n            defaultCount: 100,\n            attributeDefs: [\n                attr3(\"pos\"),\n                attr3(\"up\"),\n                attr3(\"vX1\"),\n                attr3(\"vX2\"),\n                attr3(\"vY1\"),\n                attr1(\"stiff\"),\n                attr1(\"size\")\n            ]\n        }\n    );\n\n    console.log(\"MESH-SET\", meshSet);\n}\n\n\nfunction onWindowResize()\n{\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n}\n\n\nlet currentTile = null;\nlet valid;\n\n\nfunction mainLoop()\n{\n    raycaster.setFromCamera(mouse, camera)\n\n    const intersects = raycaster.intersectObjects(tilesMesh.children);\n\n    if (intersects.length > 0)\n    {\n        if (currentTile !== intersects[0].object)\n        {\n            if (currentTile !== null)\n            {\n                currentTile.material = standardTileMaterial;\n            }\n\n            currentTile = intersects[0].object;\n            currentTile.material = selectedTileMaterial;\n        }\n\n    }\n    else\n    {\n        valid = false;\n        if (currentTile !== null)\n        {\n            currentTile.material = standardTileMaterial;\n            currentTile = null;\n        }\n    }\n\n    render();\n    //stats.update();\n\n    //skyParameters.inclination = -0.012 + Math.sin(inclinationCount += 0.01) * 0.524;\n\n    updateSun();\n\n    controls.update()\n    raf(mainLoop);\n\n}\n\n\nlet first = true;\n\n\nfunction render()\n{\n\n    const time = performance.now() * 0.0001;\n\n    // sphere.position.y = Math.sin( time ) * 5 + 1;\n    // sphere.rotation.x = time * 0.5;\n    // sphere.rotation.z = time * 0.51;\n\n    renderer.render(scene, camera);\n\n    if (first)\n    {\n        //console.log({materialCompile})\n    }\n\n    first = false;\n}\n\n\nlet mouse = new Vector2(100, 0)\n\nfunction onDocumentMouseMove(event)\n{\n\n    event.preventDefault();\n\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n}\n\n\nfunction start()\n{\n    let tStart;\n\n    return Promise.all([\n        loadScene(\"assets/tiles.glb\"),\n        loadScene(\"assets/ground.glb\"),\n    ])\n        .then(([\n                   _tiles,\n                   ground,\n               ]) => {\n\n            //scene.add( tiles.scene );\n\n            tStart = perfNow();\n\n            tilesGLTF = _tiles\n\n            dump(tilesGLTF.scene, \"tiles: \")\n\n            materials = MATERIAL_NAMES.map(n => {\n                return ground.scene.children.find(kid => kid.name === n).material;\n            })\n\n            //console.log(\"INDEXED\", marchingSquaresArray.map(ms => ({index:ms.index,attributes: ms.attributes})))\n\n            //const msMapRaised = extractMarchingSquares(marchingSquaresRaised.scene);\n            // console.log({marchingSquaresArray, msMapRaised})\n\n            //dump(marchingSquares.scene, \"ms-normal: \");\n            //dump(marchingSquaresRaised.scene, \"ms-raised: \");\n\n            // console.log(\"Scene Objects\", tiles.scene.children.map(kid => kid.name).join(\", \"))\n            //\n            // const obj  = tiles.scene.children.find(\n            //     kid => kid.name === \"tree_default\"\n            // );\n\n            // tiles.animations; // Array<AnimationClip>\n            // tiles.scene; // Group\n            // tiles.scenes; // Array<Group>\n            // tiles.cameras; // Array<Camera>\n            // tiles.asset; // Object\n\n            // ReactDOM.render(\n            //     <Game/>,\n            //     document.getElementById(\"root\")\n            // )\n\n            init();\n\n            const end = perfNow();\n\n            console.log(\"Total: \", (end - tStart), \"ms\");\n\n            raycaster.setFromCamera(mouse, camera)\n\n            document.addEventListener(\"mousemove\", onDocumentMouseMove, false);\n        })\n\n}\n\nstart().then(mainLoop);\n","\n// Instantiate a loader\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nconst loader = new GLTFLoader();\n\nexport default function(url, onProgress = null)\n{\n    return new Promise(((resolve, reject) => {\n        // Load a glTF resource\n        loader.load(\n            // resource URL\n            url,\n            // called when the resource is loaded\n            resolve,\n            // called while loading is progressing\n            onProgress,\n            // called when loading has errors\n            reject\n        );\n\n    }))\n}\n"],"sourceRoot":""}